
QAMDecFS2019.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00802000  00005848  000058dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c81  008020a6  008020a6  00005982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  000059f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b21c  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046dd  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007912  00000000  00000000  00015acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e2c  00000000  00000000  0001d3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029cca  00000000  00000000  0001f20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fd0  00000000  00000000  00048ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f8  00000000  00000000  0004cea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a4db  00000000  00000000  0004d59e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
       4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
       c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      10:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      14:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      18:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      1c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      20:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      24:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      28:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      2c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      30:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      34:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      38:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_14>
      3c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      40:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      44:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      48:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      4c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      50:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      54:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      58:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      5c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      60:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      64:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      68:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      6c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      70:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      74:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      78:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      7c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      80:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      84:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      88:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      8c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      90:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      94:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      98:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      9c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      a0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      a4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      a8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      ac:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      b0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      b4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      b8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      bc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      c0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      c4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      c8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      cc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      d0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      d4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      d8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      dc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      e0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      e4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      e8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      ec:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      f0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      f4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      f8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
      fc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     100:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     104:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     108:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     10c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     110:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     114:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     118:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     11c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     120:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     124:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     128:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     12c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     130:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     134:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     138:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     13c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     140:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     144:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     148:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     14c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     150:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     154:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     158:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     15c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     160:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     164:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     168:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     16c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     170:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     174:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     178:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     17c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     180:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     184:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     188:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     18c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     190:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     194:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     198:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     19c:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1a0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1a4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1a8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1ac:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1b0:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <__vector_108>
     1b4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1b8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1bc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1c0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1c4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1c8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1cc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1d0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1d4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1d8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1dc:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1e0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1e4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1e8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1ec:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1f0:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1f4:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1f8:	0c 94 44 01 	jmp	0x288	; 0x288 <__bad_interrupt>
     1fc:	24 1c       	adc	r2, r4
     1fe:	24 1c       	adc	r2, r4
     200:	24 1c       	adc	r2, r4
     202:	ab 1c       	adc	r10, r11
     204:	77 1c       	adc	r7, r7
     206:	a5 1c       	adc	r10, r5
     208:	24 1c       	adc	r2, r4
     20a:	24 1c       	adc	r2, r4
     20c:	ab 1c       	adc	r10, r11
     20e:	77 1c       	adc	r7, r7

00000210 <__trampolines_start>:
     210:	0c 94 1e 28 	jmp	0x503c	; 0x503c <vProtocolHandlerTask>
     214:	0c 94 a5 1c 	jmp	0x394a	; 0x394a <prvProcessReceivedCommands+0x1d0>
     218:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <vEventGroupSetBitsCallback>
     21c:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <prvProcessReceivedCommands+0x1dc>
     220:	0c 94 06 1a 	jmp	0x340c	; 0x340c <prvTimerTask>
     224:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <prvProcessReceivedCommands+0xce>
     228:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <prvIdleTask>
     22c:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <prvProcessReceivedCommands+0x174>
     230:	0c 94 66 21 	jmp	0x42cc	; 0x42cc <vDisplayUpdateTask>

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df e3       	ldi	r29, 0x3F	; 63
     23e:	de bf       	out	0x3e, r29	; 62
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	0c bf       	out	0x3c, r16	; 60

00000244 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     244:	e7 e2       	ldi	r30, 0x27	; 39
     246:	fd e2       	ldi	r31, 0x2D	; 45
     248:	8a ea       	ldi	r24, 0xAA	; 170
     24a:	90 e4       	ldi	r25, 0x40	; 64
     24c:	81 93       	st	Z+, r24
     24e:	e0 30       	cpi	r30, 0x00	; 0
     250:	f9 07       	cpc	r31, r25
     252:	e0 f3       	brcs	.-8      	; 0x24c <init_mem+0x8>
	...

00000256 <__do_copy_data>:
     256:	10 e2       	ldi	r17, 0x20	; 32
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e2       	ldi	r27, 0x20	; 32
     25c:	e8 e4       	ldi	r30, 0x48	; 72
     25e:	f8 e5       	ldi	r31, 0x58	; 88
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	0b bf       	out	0x3b, r16	; 59
     264:	02 c0       	rjmp	.+4      	; 0x26a <__do_copy_data+0x14>
     266:	07 90       	elpm	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	a6 3a       	cpi	r26, 0xA6	; 166
     26c:	b1 07       	cpc	r27, r17
     26e:	d9 f7       	brne	.-10     	; 0x266 <__do_copy_data+0x10>

00000270 <__do_clear_bss>:
     270:	2d e2       	ldi	r18, 0x2D	; 45
     272:	a6 ea       	ldi	r26, 0xA6	; 166
     274:	b0 e2       	ldi	r27, 0x20	; 32
     276:	01 c0       	rjmp	.+2      	; 0x27a <.do_clear_bss_start>

00000278 <.do_clear_bss_loop>:
     278:	1d 92       	st	X+, r1

0000027a <.do_clear_bss_start>:
     27a:	a7 32       	cpi	r26, 0x27	; 39
     27c:	b2 07       	cpc	r27, r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <.do_clear_bss_loop>
     280:	0e 94 56 1e 	call	0x3cac	; 0x3cac <main>
     284:	0c 94 22 2c 	jmp	0x5844	; 0x5844 <_exit>

00000288 <__bad_interrupt>:
     288:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028c <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     28c:	0f 93       	push	r16
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <CCPWrite+0x8>
     294:	00 d0       	rcall	.+0      	; 0x296 <CCPWrite+0xa>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	8c 83       	std	Y+4, r24	; 0x04
     29c:	9d 83       	std	Y+5, r25	; 0x05
     29e:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	8b 83       	std	Y+3, r24	; 0x03
     2aa:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	9d 81       	ldd	r25, Y+5	; 0x05
     2b0:	89 83       	std	Y+1, r24	; 0x01
     2b2:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     2b4:	8b e3       	ldi	r24, 0x3B	; 59
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
#endif
	asm volatile(
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	2e 81       	ldd	r18, Y+6	; 0x06
     2c2:	fc 01       	movw	r30, r24
     2c4:	08 ed       	ldi	r16, 0xD8	; 216
     2c6:	04 bf       	out	0x34, r16	; 52
     2c8:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     2ca:	8f e3       	ldi	r24, 0x3F	; 63
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	2b 81       	ldd	r18, Y+3	; 0x03
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
#endif
}
     2d4:	00 00       	nop
     2d6:	26 96       	adiw	r28, 0x06	; 6
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	0f 91       	pop	r16
     2e2:	08 95       	ret

000002e4 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <CLKSYS_XOSC_Config+0x6>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	6a 83       	std	Y+2, r22	; 0x02
     2f2:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     2f4:	80 e5       	ldi	r24, 0x50	; 80
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	2a 81       	ldd	r18, Y+2	; 0x02
     2fa:	22 23       	and	r18, r18
     2fc:	11 f0       	breq	.+4      	; 0x302 <CLKSYS_XOSC_Config+0x1e>
     2fe:	20 e2       	ldi	r18, 0x20	; 32
     300:	01 c0       	rjmp	.+2      	; 0x304 <CLKSYS_XOSC_Config+0x20>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	39 81       	ldd	r19, Y+1	; 0x01
     306:	32 2b       	or	r19, r18
     308:	2b 81       	ldd	r18, Y+3	; 0x03
     30a:	23 2b       	or	r18, r19
     30c:	fc 01       	movw	r30, r24
     30e:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     310:	00 00       	nop
     312:	23 96       	adiw	r28, 0x03	; 3
     314:	cd bf       	out	0x3d, r28	; 61
     316:	de bf       	out	0x3e, r29	; 62
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	89 83       	std	Y+1, r24	; 0x01
     32c:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     32e:	8a 81       	ldd	r24, Y+2	; 0x02
     330:	8f 71       	andi	r24, 0x1F	; 31
     332:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     334:	80 e5       	ldi	r24, 0x50	; 80
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	39 81       	ldd	r19, Y+1	; 0x01
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	23 2b       	or	r18, r19
     33e:	fc 01       	movw	r30, r24
     340:	25 83       	std	Z+5, r18	; 0x05
}
     342:	00 00       	nop
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	1f 92       	push	r1
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     35c:	80 e5       	ldi	r24, 0x50	; 80
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	20 e5       	ldi	r18, 0x50	; 80
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	32 2f       	mov	r19, r18
     36a:	2a 81       	ldd	r18, Y+2	; 0x02
     36c:	20 95       	com	r18
     36e:	23 23       	and	r18, r19
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     374:	80 e5       	ldi	r24, 0x50	; 80
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	90 81       	ld	r25, Z
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	89 23       	and	r24, r25
     380:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     382:	89 81       	ldd	r24, Y+1	; 0x01
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <CLKSYS_Prescalers_Config+0x6>
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	8a 83       	std	Y+2, r24	; 0x02
     39a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	89 2b       	or	r24, r25
     3a2:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     3a4:	69 81       	ldd	r22, Y+1	; 0x01
     3a6:	81 e4       	ldi	r24, 0x41	; 65
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 46 01 	call	0x28c	; 0x28c <CCPWrite>
}
     3ae:	00 00       	nop
     3b0:	23 96       	adiw	r28, 0x03	; 3
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	1f 92       	push	r1
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     3ca:	80 e4       	ldi	r24, 0x40	; 64
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	98 2f       	mov	r25, r24
     3d4:	98 7f       	andi	r25, 0xF8	; 248
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	89 2b       	or	r24, r25
     3da:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     3dc:	69 81       	ldd	r22, Y+1	; 0x01
     3de:	80 e4       	ldi	r24, 0x40	; 64
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 46 01 	call	0x28c	; 0x28c <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     3e6:	80 e4       	ldi	r24, 0x40	; 64
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	90 81       	ld	r25, Z
     3ee:	8a 81       	ldd	r24, Y+2	; 0x02
     3f0:	89 23       	and	r24, r25
     3f2:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	00 d0       	rcall	.+0      	; 0x406 <TC0_ConfigClockSource+0x6>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	6b 83       	std	Y+3, r22	; 0x03
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	98 2f       	mov	r25, r24
     41a:	90 7f       	andi	r25, 0xF0	; 240
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	89 2b       	or	r24, r25
     420:	28 2f       	mov	r18, r24
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18
     42a:	00 00       	nop
     42c:	23 96       	adiw	r28, 0x03	; 3
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	de bf       	out	0x3e, r29	; 62
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <TC0_ConfigWGM>:
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	00 d0       	rcall	.+0      	; 0x43e <TC0_ConfigWGM+0x6>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	6b 83       	std	Y+3, r22	; 0x03
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	fc 01       	movw	r30, r24
     44e:	81 81       	ldd	r24, Z+1	; 0x01
     450:	98 2f       	mov	r25, r24
     452:	98 7f       	andi	r25, 0xF8	; 248
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	89 2b       	or	r24, r25
     458:	28 2f       	mov	r18, r24
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	fc 01       	movw	r30, r24
     460:	21 83       	std	Z+1, r18	; 0x01
     462:	00 00       	nop
     464:	23 96       	adiw	r28, 0x03	; 3
     466:	cd bf       	out	0x3d, r28	; 61
     468:	de bf       	out	0x3e, r29	; 62
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	00 d0       	rcall	.+0      	; 0x476 <TC0_SetOverflowIntLevel+0x6>
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	9a 83       	std	Y+2, r25	; 0x02
     47e:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	fc 01       	movw	r30, r24
     486:	86 81       	ldd	r24, Z+6	; 0x06
     488:	98 2f       	mov	r25, r24
     48a:	9c 7f       	andi	r25, 0xFC	; 252
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	89 2b       	or	r24, r25
     490:	28 2f       	mov	r18, r24
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	fc 01       	movw	r30, r24
     498:	26 83       	std	Z+6, r18	; 0x06
}
     49a:	00 00       	nop
     49c:	23 96       	adiw	r28, 0x03	; 3
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <vApplicationStackOverflowHook+0x6>
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	6b 83       	std	Y+3, r22	; 0x03
     4ba:	7c 83       	std	Y+4, r23	; 0x04
     4bc:	8b e2       	ldi	r24, 0x2B	; 43
     4be:	0e 94 68 02 	call	0x4d0	; 0x4d0 <error>
     4c2:	00 00       	nop
     4c4:	24 96       	adiw	r28, 0x04	; 4
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	1f 92       	push	r1
     4d6:	1f 92       	push	r1
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     4de:	8a 81       	ldd	r24, Y+2	; 0x02
     4e0:	8b 32       	cpi	r24, 0x2B	; 43
     4e2:	19 f4       	brne	.+6      	; 0x4ea <error+0x1a>
	 a = 1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	0e c0       	rjmp	.+28     	; 0x506 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	8c 32       	cpi	r24, 0x2C	; 44
     4ee:	19 f4       	brne	.+6      	; 0x4f6 <error+0x26>
	 a = 2;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     4f6:	8a 81       	ldd	r24, Y+2	; 0x02
     4f8:	8f 32       	cpi	r24, 0x2F	; 47
     4fa:	19 f4       	brne	.+6      	; 0x502 <error+0x32>
	 a = 3;
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	89 83       	std	Y+1, r24	; 0x01
     500:	02 c0       	rjmp	.+4      	; 0x506 <error+0x36>
	 else
	 a = 4;
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     506:	0e 94 8b 02 	call	0x516	; 0x516 <software_reset>
 }
     50a:	00 00       	nop
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     51e:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     520:	84 e3       	ldi	r24, 0x34	; 52
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	28 ed       	ldi	r18, 0xD8	; 216
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     52a:	88 e7       	ldi	r24, 0x78	; 120
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	fc 01       	movw	r30, r24
     532:	21 83       	std	Z+1, r18	; 0x01
     534:	00 00       	nop
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	1f 92       	push	r1
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pvPortMalloc>
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	89 2b       	or	r24, r25
     55a:	61 f0       	breq	.+24     	; 0x574 <xEventGroupCreate+0x38>
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	fc 01       	movw	r30, r24
     562:	10 82       	st	Z, r1
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	12 82       	std	Z+2, r1	; 0x02
     568:	13 82       	std	Z+3, r1	; 0x03
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	04 96       	adiw	r24, 0x04	; 4
     570:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	9a 81       	ldd	r25, Y+2	; 0x02
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <xEventGroupWaitBits>:
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	6d 97       	sbiw	r28, 0x1d	; 29
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	8a 8b       	std	Y+18, r24	; 0x12
     59e:	9b 8b       	std	Y+19, r25	; 0x13
     5a0:	4c 8b       	std	Y+20, r20	; 0x14
     5a2:	5d 8b       	std	Y+21, r21	; 0x15
     5a4:	6e 8b       	std	Y+22, r22	; 0x16
     5a6:	7f 8b       	std	Y+23, r23	; 0x17
     5a8:	28 8f       	std	Y+24, r18	; 0x18
     5aa:	09 8f       	std	Y+25, r16	; 0x19
     5ac:	ca 8e       	std	Y+26, r12	; 0x1a
     5ae:	db 8e       	std	Y+27, r13	; 0x1b
     5b0:	ec 8e       	std	Y+28, r14	; 0x1c
     5b2:	fd 8e       	std	Y+29, r15	; 0x1d
     5b4:	8a 89       	ldd	r24, Y+18	; 0x12
     5b6:	9b 89       	ldd	r25, Y+19	; 0x13
     5b8:	89 87       	std	Y+9, r24	; 0x09
     5ba:	9a 87       	std	Y+10, r25	; 0x0a
     5bc:	1d 82       	std	Y+5, r1	; 0x05
     5be:	1e 82       	std	Y+6, r1	; 0x06
     5c0:	1f 82       	std	Y+7, r1	; 0x07
     5c2:	18 86       	std	Y+8, r1	; 0x08
     5c4:	1b 86       	std	Y+11, r1	; 0x0b
     5c6:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
     5ca:	89 85       	ldd	r24, Y+9	; 0x09
     5cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	a2 81       	ldd	r26, Z+2	; 0x02
     5d6:	b3 81       	ldd	r27, Z+3	; 0x03
     5d8:	8c 87       	std	Y+12, r24	; 0x0c
     5da:	9d 87       	std	Y+13, r25	; 0x0d
     5dc:	ae 87       	std	Y+14, r26	; 0x0e
     5de:	bf 87       	std	Y+15, r27	; 0x0f
     5e0:	2c 89       	ldd	r18, Y+20	; 0x14
     5e2:	3d 89       	ldd	r19, Y+21	; 0x15
     5e4:	4e 89       	ldd	r20, Y+22	; 0x16
     5e6:	5f 89       	ldd	r21, Y+23	; 0x17
     5e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     5ea:	9d 85       	ldd	r25, Y+13	; 0x0d
     5ec:	ae 85       	ldd	r26, Y+14	; 0x0e
     5ee:	bf 85       	ldd	r27, Y+15	; 0x0f
     5f0:	09 8d       	ldd	r16, Y+25	; 0x19
     5f2:	bc 01       	movw	r22, r24
     5f4:	cd 01       	movw	r24, r26
     5f6:	0e 94 6a 05 	call	0xad4	; 0xad4 <prvTestWaitCondition>
     5fa:	88 8b       	std	Y+16, r24	; 0x10
     5fc:	88 89       	ldd	r24, Y+16	; 0x10
     5fe:	88 23       	and	r24, r24
     600:	59 f1       	breq	.+86     	; 0x658 <xEventGroupWaitBits+0xd6>
     602:	8c 85       	ldd	r24, Y+12	; 0x0c
     604:	9d 85       	ldd	r25, Y+13	; 0x0d
     606:	ae 85       	ldd	r26, Y+14	; 0x0e
     608:	bf 85       	ldd	r27, Y+15	; 0x0f
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	ab 83       	std	Y+3, r26	; 0x03
     610:	bc 83       	std	Y+4, r27	; 0x04
     612:	1a 8e       	std	Y+26, r1	; 0x1a
     614:	1b 8e       	std	Y+27, r1	; 0x1b
     616:	1c 8e       	std	Y+28, r1	; 0x1c
     618:	1d 8e       	std	Y+29, r1	; 0x1d
     61a:	88 8d       	ldd	r24, Y+24	; 0x18
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <xEventGroupWaitBits+0xa0>
     620:	65 c0       	rjmp	.+202    	; 0x6ec <xEventGroupWaitBits+0x16a>
     622:	89 85       	ldd	r24, Y+9	; 0x09
     624:	9a 85       	ldd	r25, Y+10	; 0x0a
     626:	fc 01       	movw	r30, r24
     628:	20 81       	ld	r18, Z
     62a:	31 81       	ldd	r19, Z+1	; 0x01
     62c:	42 81       	ldd	r20, Z+2	; 0x02
     62e:	53 81       	ldd	r21, Z+3	; 0x03
     630:	8c 89       	ldd	r24, Y+20	; 0x14
     632:	9d 89       	ldd	r25, Y+21	; 0x15
     634:	ae 89       	ldd	r26, Y+22	; 0x16
     636:	bf 89       	ldd	r27, Y+23	; 0x17
     638:	80 95       	com	r24
     63a:	90 95       	com	r25
     63c:	a0 95       	com	r26
     63e:	b0 95       	com	r27
     640:	82 23       	and	r24, r18
     642:	93 23       	and	r25, r19
     644:	a4 23       	and	r26, r20
     646:	b5 23       	and	r27, r21
     648:	29 85       	ldd	r18, Y+9	; 0x09
     64a:	3a 85       	ldd	r19, Y+10	; 0x0a
     64c:	f9 01       	movw	r30, r18
     64e:	80 83       	st	Z, r24
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	a2 83       	std	Z+2, r26	; 0x02
     654:	b3 83       	std	Z+3, r27	; 0x03
     656:	4a c0       	rjmp	.+148    	; 0x6ec <xEventGroupWaitBits+0x16a>
     658:	8a 8d       	ldd	r24, Y+26	; 0x1a
     65a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     65c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     65e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     660:	89 2b       	or	r24, r25
     662:	8a 2b       	or	r24, r26
     664:	8b 2b       	or	r24, r27
     666:	59 f4       	brne	.+22     	; 0x67e <xEventGroupWaitBits+0xfc>
     668:	8c 85       	ldd	r24, Y+12	; 0x0c
     66a:	9d 85       	ldd	r25, Y+13	; 0x0d
     66c:	ae 85       	ldd	r26, Y+14	; 0x0e
     66e:	bf 85       	ldd	r27, Y+15	; 0x0f
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	ab 83       	std	Y+3, r26	; 0x03
     676:	bc 83       	std	Y+4, r27	; 0x04
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	8b 87       	std	Y+11, r24	; 0x0b
     67c:	37 c0       	rjmp	.+110    	; 0x6ec <xEventGroupWaitBits+0x16a>
     67e:	88 8d       	ldd	r24, Y+24	; 0x18
     680:	88 23       	and	r24, r24
     682:	49 f0       	breq	.+18     	; 0x696 <xEventGroupWaitBits+0x114>
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	af 81       	ldd	r26, Y+7	; 0x07
     68a:	b8 85       	ldd	r27, Y+8	; 0x08
     68c:	b1 60       	ori	r27, 0x01	; 1
     68e:	8d 83       	std	Y+5, r24	; 0x05
     690:	9e 83       	std	Y+6, r25	; 0x06
     692:	af 83       	std	Y+7, r26	; 0x07
     694:	b8 87       	std	Y+8, r27	; 0x08
     696:	89 8d       	ldd	r24, Y+25	; 0x19
     698:	88 23       	and	r24, r24
     69a:	49 f0       	breq	.+18     	; 0x6ae <xEventGroupWaitBits+0x12c>
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	9e 81       	ldd	r25, Y+6	; 0x06
     6a0:	af 81       	ldd	r26, Y+7	; 0x07
     6a2:	b8 85       	ldd	r27, Y+8	; 0x08
     6a4:	b4 60       	ori	r27, 0x04	; 4
     6a6:	8d 83       	std	Y+5, r24	; 0x05
     6a8:	9e 83       	std	Y+6, r25	; 0x06
     6aa:	af 83       	std	Y+7, r26	; 0x07
     6ac:	b8 87       	std	Y+8, r27	; 0x08
     6ae:	2c 89       	ldd	r18, Y+20	; 0x14
     6b0:	3d 89       	ldd	r19, Y+21	; 0x15
     6b2:	4e 89       	ldd	r20, Y+22	; 0x16
     6b4:	5f 89       	ldd	r21, Y+23	; 0x17
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	af 81       	ldd	r26, Y+7	; 0x07
     6bc:	b8 85       	ldd	r27, Y+8	; 0x08
     6be:	82 2b       	or	r24, r18
     6c0:	93 2b       	or	r25, r19
     6c2:	a4 2b       	or	r26, r20
     6c4:	b5 2b       	or	r27, r21
     6c6:	29 85       	ldd	r18, Y+9	; 0x09
     6c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ca:	f9 01       	movw	r30, r18
     6cc:	34 96       	adiw	r30, 0x04	; 4
     6ce:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6d0:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6d2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     6d4:	5d 8d       	ldd	r21, Y+29	; 0x1d
     6d6:	89 01       	movw	r16, r18
     6d8:	9a 01       	movw	r18, r20
     6da:	ac 01       	movw	r20, r24
     6dc:	bd 01       	movw	r22, r26
     6de:	cf 01       	movw	r24, r30
     6e0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <vTaskPlaceOnUnorderedEventList>
     6e4:	19 82       	std	Y+1, r1	; 0x01
     6e6:	1a 82       	std	Y+2, r1	; 0x02
     6e8:	1b 82       	std	Y+3, r1	; 0x03
     6ea:	1c 82       	std	Y+4, r1	; 0x04
     6ec:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
     6f0:	89 8b       	std	Y+17, r24	; 0x11
     6f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6f6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     6f8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     6fa:	89 2b       	or	r24, r25
     6fc:	8a 2b       	or	r24, r26
     6fe:	8b 2b       	or	r24, r27
     700:	09 f4       	brne	.+2      	; 0x704 <xEventGroupWaitBits+0x182>
     702:	65 c0       	rjmp	.+202    	; 0x7ce <xEventGroupWaitBits+0x24c>
     704:	89 89       	ldd	r24, Y+17	; 0x11
     706:	88 23       	and	r24, r24
     708:	11 f4       	brne	.+4      	; 0x70e <xEventGroupWaitBits+0x18c>
     70a:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
     70e:	0e 94 09 18 	call	0x3012	; 0x3012 <uxTaskResetEventItemValue>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	ab 83       	std	Y+3, r26	; 0x03
     71c:	bc 83       	std	Y+4, r27	; 0x04
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	ab 81       	ldd	r26, Y+3	; 0x03
     724:	bc 81       	ldd	r27, Y+4	; 0x04
     726:	88 27       	eor	r24, r24
     728:	99 27       	eor	r25, r25
     72a:	aa 27       	eor	r26, r26
     72c:	b2 70       	andi	r27, 0x02	; 2
     72e:	89 2b       	or	r24, r25
     730:	8a 2b       	or	r24, r26
     732:	8b 2b       	or	r24, r27
     734:	09 f0       	breq	.+2      	; 0x738 <xEventGroupWaitBits+0x1b6>
     736:	42 c0       	rjmp	.+132    	; 0x7bc <xEventGroupWaitBits+0x23a>
     738:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     73c:	ff 93       	push	r31
     73e:	f8 7f       	andi	r31, 0xF8	; 248
     740:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     744:	89 85       	ldd	r24, Y+9	; 0x09
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	fc 01       	movw	r30, r24
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	a2 81       	ldd	r26, Z+2	; 0x02
     750:	b3 81       	ldd	r27, Z+3	; 0x03
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
     75a:	2c 89       	ldd	r18, Y+20	; 0x14
     75c:	3d 89       	ldd	r19, Y+21	; 0x15
     75e:	4e 89       	ldd	r20, Y+22	; 0x16
     760:	5f 89       	ldd	r21, Y+23	; 0x17
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	ab 81       	ldd	r26, Y+3	; 0x03
     768:	bc 81       	ldd	r27, Y+4	; 0x04
     76a:	09 8d       	ldd	r16, Y+25	; 0x19
     76c:	bc 01       	movw	r22, r24
     76e:	cd 01       	movw	r24, r26
     770:	0e 94 6a 05 	call	0xad4	; 0xad4 <prvTestWaitCondition>
     774:	88 23       	and	r24, r24
     776:	e9 f0       	breq	.+58     	; 0x7b2 <xEventGroupWaitBits+0x230>
     778:	88 8d       	ldd	r24, Y+24	; 0x18
     77a:	88 23       	and	r24, r24
     77c:	d1 f0       	breq	.+52     	; 0x7b2 <xEventGroupWaitBits+0x230>
     77e:	89 85       	ldd	r24, Y+9	; 0x09
     780:	9a 85       	ldd	r25, Y+10	; 0x0a
     782:	fc 01       	movw	r30, r24
     784:	20 81       	ld	r18, Z
     786:	31 81       	ldd	r19, Z+1	; 0x01
     788:	42 81       	ldd	r20, Z+2	; 0x02
     78a:	53 81       	ldd	r21, Z+3	; 0x03
     78c:	8c 89       	ldd	r24, Y+20	; 0x14
     78e:	9d 89       	ldd	r25, Y+21	; 0x15
     790:	ae 89       	ldd	r26, Y+22	; 0x16
     792:	bf 89       	ldd	r27, Y+23	; 0x17
     794:	80 95       	com	r24
     796:	90 95       	com	r25
     798:	a0 95       	com	r26
     79a:	b0 95       	com	r27
     79c:	82 23       	and	r24, r18
     79e:	93 23       	and	r25, r19
     7a0:	a4 23       	and	r26, r20
     7a2:	b5 23       	and	r27, r21
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	f9 01       	movw	r30, r18
     7aa:	80 83       	st	Z, r24
     7ac:	91 83       	std	Z+1, r25	; 0x01
     7ae:	a2 83       	std	Z+2, r26	; 0x02
     7b0:	b3 83       	std	Z+3, r27	; 0x03
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	8b 87       	std	Y+11, r24	; 0x0b
     7b6:	ff 91       	pop	r31
     7b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	ab 81       	ldd	r26, Y+3	; 0x03
     7c2:	bc 81       	ldd	r27, Y+4	; 0x04
     7c4:	bb 27       	eor	r27, r27
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	ab 83       	std	Y+3, r26	; 0x03
     7cc:	bc 83       	std	Y+4, r27	; 0x04
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	ab 81       	ldd	r26, Y+3	; 0x03
     7d4:	bc 81       	ldd	r27, Y+4	; 0x04
     7d6:	bc 01       	movw	r22, r24
     7d8:	cd 01       	movw	r24, r26
     7da:	6d 96       	adiw	r28, 0x1d	; 29
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	08 95       	ret

000007f2 <xEventGroupClearBits>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	2c 97       	sbiw	r28, 0x0c	; 12
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	8f 83       	std	Y+7, r24	; 0x07
     802:	98 87       	std	Y+8, r25	; 0x08
     804:	49 87       	std	Y+9, r20	; 0x09
     806:	5a 87       	std	Y+10, r21	; 0x0a
     808:	6b 87       	std	Y+11, r22	; 0x0b
     80a:	7c 87       	std	Y+12, r23	; 0x0c
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     818:	ff 93       	push	r31
     81a:	f8 7f       	andi	r31, 0xF8	; 248
     81c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	a2 81       	ldd	r26, Z+2	; 0x02
     82c:	b3 81       	ldd	r27, Z+3	; 0x03
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	9c 83       	std	Y+4, r25	; 0x04
     832:	ad 83       	std	Y+5, r26	; 0x05
     834:	be 83       	std	Y+6, r27	; 0x06
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	fc 01       	movw	r30, r24
     83c:	20 81       	ld	r18, Z
     83e:	31 81       	ldd	r19, Z+1	; 0x01
     840:	42 81       	ldd	r20, Z+2	; 0x02
     842:	53 81       	ldd	r21, Z+3	; 0x03
     844:	89 85       	ldd	r24, Y+9	; 0x09
     846:	9a 85       	ldd	r25, Y+10	; 0x0a
     848:	ab 85       	ldd	r26, Y+11	; 0x0b
     84a:	bc 85       	ldd	r27, Y+12	; 0x0c
     84c:	80 95       	com	r24
     84e:	90 95       	com	r25
     850:	a0 95       	com	r26
     852:	b0 95       	com	r27
     854:	82 23       	and	r24, r18
     856:	93 23       	and	r25, r19
     858:	a4 23       	and	r26, r20
     85a:	b5 23       	and	r27, r21
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	3a 81       	ldd	r19, Y+2	; 0x02
     860:	f9 01       	movw	r30, r18
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	a2 83       	std	Z+2, r26	; 0x02
     868:	b3 83       	std	Z+3, r27	; 0x03
     86a:	ff 91       	pop	r31
     86c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	ad 81       	ldd	r26, Y+5	; 0x05
     876:	be 81       	ldd	r27, Y+6	; 0x06
     878:	bc 01       	movw	r22, r24
     87a:	cd 01       	movw	r24, r26
     87c:	2c 96       	adiw	r28, 0x0c	; 12
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	de bf       	out	0x3e, r29	; 62
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <xEventGroupSetBits>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	6d 97       	sbiw	r28, 0x1d	; 29
     892:	cd bf       	out	0x3d, r28	; 61
     894:	de bf       	out	0x3e, r29	; 62
     896:	88 8f       	std	Y+24, r24	; 0x18
     898:	99 8f       	std	Y+25, r25	; 0x19
     89a:	4a 8f       	std	Y+26, r20	; 0x1a
     89c:	5b 8f       	std	Y+27, r21	; 0x1b
     89e:	6c 8f       	std	Y+28, r22	; 0x1c
     8a0:	7d 8f       	std	Y+29, r23	; 0x1d
     8a2:	1b 82       	std	Y+3, r1	; 0x03
     8a4:	1c 82       	std	Y+4, r1	; 0x04
     8a6:	1d 82       	std	Y+5, r1	; 0x05
     8a8:	1e 82       	std	Y+6, r1	; 0x06
     8aa:	88 8d       	ldd	r24, Y+24	; 0x18
     8ac:	99 8d       	ldd	r25, Y+25	; 0x19
     8ae:	88 87       	std	Y+8, r24	; 0x08
     8b0:	99 87       	std	Y+9, r25	; 0x09
     8b2:	1f 82       	std	Y+7, r1	; 0x07
     8b4:	88 85       	ldd	r24, Y+8	; 0x08
     8b6:	99 85       	ldd	r25, Y+9	; 0x09
     8b8:	04 96       	adiw	r24, 0x04	; 4
     8ba:	8a 87       	std	Y+10, r24	; 0x0a
     8bc:	9b 87       	std	Y+11, r25	; 0x0b
     8be:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8c2:	03 96       	adiw	r24, 0x03	; 3
     8c4:	8c 87       	std	Y+12, r24	; 0x0c
     8c6:	9d 87       	std	Y+13, r25	; 0x0d
     8c8:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
     8cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8ce:	9b 85       	ldd	r25, Y+11	; 0x0b
     8d0:	fc 01       	movw	r30, r24
     8d2:	87 81       	ldd	r24, Z+7	; 0x07
     8d4:	90 85       	ldd	r25, Z+8	; 0x08
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	88 85       	ldd	r24, Y+8	; 0x08
     8dc:	99 85       	ldd	r25, Y+9	; 0x09
     8de:	fc 01       	movw	r30, r24
     8e0:	20 81       	ld	r18, Z
     8e2:	31 81       	ldd	r19, Z+1	; 0x01
     8e4:	42 81       	ldd	r20, Z+2	; 0x02
     8e6:	53 81       	ldd	r21, Z+3	; 0x03
     8e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8ec:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8ee:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8f0:	82 2b       	or	r24, r18
     8f2:	93 2b       	or	r25, r19
     8f4:	a4 2b       	or	r26, r20
     8f6:	b5 2b       	or	r27, r21
     8f8:	28 85       	ldd	r18, Y+8	; 0x08
     8fa:	39 85       	ldd	r19, Y+9	; 0x09
     8fc:	f9 01       	movw	r30, r18
     8fe:	80 83       	st	Z, r24
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	a2 83       	std	Z+2, r26	; 0x02
     904:	b3 83       	std	Z+3, r27	; 0x03
     906:	95 c0       	rjmp	.+298    	; 0xa32 <xEventGroupSetBits+0x1aa>
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	fc 01       	movw	r30, r24
     90e:	84 81       	ldd	r24, Z+4	; 0x04
     910:	95 81       	ldd	r25, Z+5	; 0x05
     912:	8e 87       	std	Y+14, r24	; 0x0e
     914:	9f 87       	std	Y+15, r25	; 0x0f
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	88 8b       	std	Y+16, r24	; 0x10
     926:	99 8b       	std	Y+17, r25	; 0x11
     928:	aa 8b       	std	Y+18, r26	; 0x12
     92a:	bb 8b       	std	Y+19, r27	; 0x13
     92c:	1f 82       	std	Y+7, r1	; 0x07
     92e:	88 89       	ldd	r24, Y+16	; 0x10
     930:	99 89       	ldd	r25, Y+17	; 0x11
     932:	aa 89       	ldd	r26, Y+18	; 0x12
     934:	bb 89       	ldd	r27, Y+19	; 0x13
     936:	88 27       	eor	r24, r24
     938:	99 27       	eor	r25, r25
     93a:	aa 27       	eor	r26, r26
     93c:	8c 8b       	std	Y+20, r24	; 0x14
     93e:	9d 8b       	std	Y+21, r25	; 0x15
     940:	ae 8b       	std	Y+22, r26	; 0x16
     942:	bf 8b       	std	Y+23, r27	; 0x17
     944:	88 89       	ldd	r24, Y+16	; 0x10
     946:	99 89       	ldd	r25, Y+17	; 0x11
     948:	aa 89       	ldd	r26, Y+18	; 0x12
     94a:	bb 89       	ldd	r27, Y+19	; 0x13
     94c:	bb 27       	eor	r27, r27
     94e:	88 8b       	std	Y+16, r24	; 0x10
     950:	99 8b       	std	Y+17, r25	; 0x11
     952:	aa 8b       	std	Y+18, r26	; 0x12
     954:	bb 8b       	std	Y+19, r27	; 0x13
     956:	8c 89       	ldd	r24, Y+20	; 0x14
     958:	9d 89       	ldd	r25, Y+21	; 0x15
     95a:	ae 89       	ldd	r26, Y+22	; 0x16
     95c:	bf 89       	ldd	r27, Y+23	; 0x17
     95e:	88 27       	eor	r24, r24
     960:	99 27       	eor	r25, r25
     962:	aa 27       	eor	r26, r26
     964:	b4 70       	andi	r27, 0x04	; 4
     966:	89 2b       	or	r24, r25
     968:	8a 2b       	or	r24, r26
     96a:	8b 2b       	or	r24, r27
     96c:	b1 f4       	brne	.+44     	; 0x99a <xEventGroupSetBits+0x112>
     96e:	88 85       	ldd	r24, Y+8	; 0x08
     970:	99 85       	ldd	r25, Y+9	; 0x09
     972:	fc 01       	movw	r30, r24
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	42 81       	ldd	r20, Z+2	; 0x02
     97a:	53 81       	ldd	r21, Z+3	; 0x03
     97c:	88 89       	ldd	r24, Y+16	; 0x10
     97e:	99 89       	ldd	r25, Y+17	; 0x11
     980:	aa 89       	ldd	r26, Y+18	; 0x12
     982:	bb 89       	ldd	r27, Y+19	; 0x13
     984:	82 23       	and	r24, r18
     986:	93 23       	and	r25, r19
     988:	a4 23       	and	r26, r20
     98a:	b5 23       	and	r27, r21
     98c:	89 2b       	or	r24, r25
     98e:	8a 2b       	or	r24, r26
     990:	8b 2b       	or	r24, r27
     992:	e9 f0       	breq	.+58     	; 0x9ce <xEventGroupSetBits+0x146>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	8f 83       	std	Y+7, r24	; 0x07
     998:	1a c0       	rjmp	.+52     	; 0x9ce <xEventGroupSetBits+0x146>
     99a:	88 85       	ldd	r24, Y+8	; 0x08
     99c:	99 85       	ldd	r25, Y+9	; 0x09
     99e:	fc 01       	movw	r30, r24
     9a0:	20 81       	ld	r18, Z
     9a2:	31 81       	ldd	r19, Z+1	; 0x01
     9a4:	42 81       	ldd	r20, Z+2	; 0x02
     9a6:	53 81       	ldd	r21, Z+3	; 0x03
     9a8:	88 89       	ldd	r24, Y+16	; 0x10
     9aa:	99 89       	ldd	r25, Y+17	; 0x11
     9ac:	aa 89       	ldd	r26, Y+18	; 0x12
     9ae:	bb 89       	ldd	r27, Y+19	; 0x13
     9b0:	28 23       	and	r18, r24
     9b2:	39 23       	and	r19, r25
     9b4:	4a 23       	and	r20, r26
     9b6:	5b 23       	and	r21, r27
     9b8:	88 89       	ldd	r24, Y+16	; 0x10
     9ba:	99 89       	ldd	r25, Y+17	; 0x11
     9bc:	aa 89       	ldd	r26, Y+18	; 0x12
     9be:	bb 89       	ldd	r27, Y+19	; 0x13
     9c0:	28 17       	cp	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	4a 07       	cpc	r20, r26
     9c6:	5b 07       	cpc	r21, r27
     9c8:	11 f4       	brne	.+4      	; 0x9ce <xEventGroupSetBits+0x146>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	8f 83       	std	Y+7, r24	; 0x07
     9ce:	8f 81       	ldd	r24, Y+7	; 0x07
     9d0:	88 23       	and	r24, r24
     9d2:	59 f1       	breq	.+86     	; 0xa2a <xEventGroupSetBits+0x1a2>
     9d4:	8c 89       	ldd	r24, Y+20	; 0x14
     9d6:	9d 89       	ldd	r25, Y+21	; 0x15
     9d8:	ae 89       	ldd	r26, Y+22	; 0x16
     9da:	bf 89       	ldd	r27, Y+23	; 0x17
     9dc:	88 27       	eor	r24, r24
     9de:	99 27       	eor	r25, r25
     9e0:	aa 27       	eor	r26, r26
     9e2:	b1 70       	andi	r27, 0x01	; 1
     9e4:	89 2b       	or	r24, r25
     9e6:	8a 2b       	or	r24, r26
     9e8:	8b 2b       	or	r24, r27
     9ea:	81 f0       	breq	.+32     	; 0xa0c <xEventGroupSetBits+0x184>
     9ec:	2b 81       	ldd	r18, Y+3	; 0x03
     9ee:	3c 81       	ldd	r19, Y+4	; 0x04
     9f0:	4d 81       	ldd	r20, Y+5	; 0x05
     9f2:	5e 81       	ldd	r21, Y+6	; 0x06
     9f4:	88 89       	ldd	r24, Y+16	; 0x10
     9f6:	99 89       	ldd	r25, Y+17	; 0x11
     9f8:	aa 89       	ldd	r26, Y+18	; 0x12
     9fa:	bb 89       	ldd	r27, Y+19	; 0x13
     9fc:	82 2b       	or	r24, r18
     9fe:	93 2b       	or	r25, r19
     a00:	a4 2b       	or	r26, r20
     a02:	b5 2b       	or	r27, r21
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	ad 83       	std	Y+5, r26	; 0x05
     a0a:	be 83       	std	Y+6, r27	; 0x06
     a0c:	88 85       	ldd	r24, Y+8	; 0x08
     a0e:	99 85       	ldd	r25, Y+9	; 0x09
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	a2 81       	ldd	r26, Z+2	; 0x02
     a18:	b3 81       	ldd	r27, Z+3	; 0x03
     a1a:	b2 60       	ori	r27, 0x02	; 2
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	3a 81       	ldd	r19, Y+2	; 0x02
     a20:	ac 01       	movw	r20, r24
     a22:	bd 01       	movw	r22, r26
     a24:	c9 01       	movw	r24, r18
     a26:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <vTaskRemoveFromUnorderedEventList>
     a2a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a2c:	9f 85       	ldd	r25, Y+15	; 0x0f
     a2e:	89 83       	std	Y+1, r24	; 0x01
     a30:	9a 83       	std	Y+2, r25	; 0x02
     a32:	29 81       	ldd	r18, Y+1	; 0x01
     a34:	3a 81       	ldd	r19, Y+2	; 0x02
     a36:	8c 85       	ldd	r24, Y+12	; 0x0c
     a38:	9d 85       	ldd	r25, Y+13	; 0x0d
     a3a:	28 17       	cp	r18, r24
     a3c:	39 07       	cpc	r19, r25
     a3e:	09 f0       	breq	.+2      	; 0xa42 <xEventGroupSetBits+0x1ba>
     a40:	63 cf       	rjmp	.-314    	; 0x908 <xEventGroupSetBits+0x80>
     a42:	88 85       	ldd	r24, Y+8	; 0x08
     a44:	99 85       	ldd	r25, Y+9	; 0x09
     a46:	fc 01       	movw	r30, r24
     a48:	20 81       	ld	r18, Z
     a4a:	31 81       	ldd	r19, Z+1	; 0x01
     a4c:	42 81       	ldd	r20, Z+2	; 0x02
     a4e:	53 81       	ldd	r21, Z+3	; 0x03
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	ad 81       	ldd	r26, Y+5	; 0x05
     a56:	be 81       	ldd	r27, Y+6	; 0x06
     a58:	80 95       	com	r24
     a5a:	90 95       	com	r25
     a5c:	a0 95       	com	r26
     a5e:	b0 95       	com	r27
     a60:	82 23       	and	r24, r18
     a62:	93 23       	and	r25, r19
     a64:	a4 23       	and	r26, r20
     a66:	b5 23       	and	r27, r21
     a68:	28 85       	ldd	r18, Y+8	; 0x08
     a6a:	39 85       	ldd	r19, Y+9	; 0x09
     a6c:	f9 01       	movw	r30, r18
     a6e:	80 83       	st	Z, r24
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	a2 83       	std	Z+2, r26	; 0x02
     a74:	b3 83       	std	Z+3, r27	; 0x03
     a76:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
     a7a:	88 85       	ldd	r24, Y+8	; 0x08
     a7c:	99 85       	ldd	r25, Y+9	; 0x09
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	a2 81       	ldd	r26, Z+2	; 0x02
     a86:	b3 81       	ldd	r27, Z+3	; 0x03
     a88:	bc 01       	movw	r22, r24
     a8a:	cd 01       	movw	r24, r26
     a8c:	6d 96       	adiw	r28, 0x1d	; 29
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <vEventGroupSetBitsCallback>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <vEventGroupSetBitsCallback+0x6>
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <vEventGroupSetBitsCallback+0x8>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	9a 83       	std	Y+2, r25	; 0x02
     aa8:	4b 83       	std	Y+3, r20	; 0x03
     aaa:	5c 83       	std	Y+4, r21	; 0x04
     aac:	6d 83       	std	Y+5, r22	; 0x05
     aae:	7e 83       	std	Y+6, r23	; 0x06
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	ad 81       	ldd	r26, Y+5	; 0x05
     ab6:	be 81       	ldd	r27, Y+6	; 0x06
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	ac 01       	movw	r20, r24
     abe:	bd 01       	movw	r22, r26
     ac0:	c9 01       	movw	r24, r18
     ac2:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
     ac6:	00 00       	nop
     ac8:	26 96       	adiw	r28, 0x06	; 6
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     ad4:	0f 93       	push	r16
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	2a 97       	sbiw	r28, 0x0a	; 10
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	6a 83       	std	Y+2, r22	; 0x02
     ae6:	7b 83       	std	Y+3, r23	; 0x03
     ae8:	8c 83       	std	Y+4, r24	; 0x04
     aea:	9d 83       	std	Y+5, r25	; 0x05
     aec:	2e 83       	std	Y+6, r18	; 0x06
     aee:	3f 83       	std	Y+7, r19	; 0x07
     af0:	48 87       	std	Y+8, r20	; 0x08
     af2:	59 87       	std	Y+9, r21	; 0x09
     af4:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     af6:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     af8:	8a 85       	ldd	r24, Y+10	; 0x0a
     afa:	88 23       	and	r24, r24
     afc:	99 f4       	brne	.+38     	; 0xb24 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     afe:	2a 81       	ldd	r18, Y+2	; 0x02
     b00:	3b 81       	ldd	r19, Y+3	; 0x03
     b02:	4c 81       	ldd	r20, Y+4	; 0x04
     b04:	5d 81       	ldd	r21, Y+5	; 0x05
     b06:	8e 81       	ldd	r24, Y+6	; 0x06
     b08:	9f 81       	ldd	r25, Y+7	; 0x07
     b0a:	a8 85       	ldd	r26, Y+8	; 0x08
     b0c:	b9 85       	ldd	r27, Y+9	; 0x09
     b0e:	82 23       	and	r24, r18
     b10:	93 23       	and	r25, r19
     b12:	a4 23       	and	r26, r20
     b14:	b5 23       	and	r27, r21
     b16:	89 2b       	or	r24, r25
     b18:	8a 2b       	or	r24, r26
     b1a:	8b 2b       	or	r24, r27
     b1c:	d1 f0       	breq	.+52     	; 0xb52 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	17 c0       	rjmp	.+46     	; 0xb52 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     b24:	2a 81       	ldd	r18, Y+2	; 0x02
     b26:	3b 81       	ldd	r19, Y+3	; 0x03
     b28:	4c 81       	ldd	r20, Y+4	; 0x04
     b2a:	5d 81       	ldd	r21, Y+5	; 0x05
     b2c:	8e 81       	ldd	r24, Y+6	; 0x06
     b2e:	9f 81       	ldd	r25, Y+7	; 0x07
     b30:	a8 85       	ldd	r26, Y+8	; 0x08
     b32:	b9 85       	ldd	r27, Y+9	; 0x09
     b34:	28 23       	and	r18, r24
     b36:	39 23       	and	r19, r25
     b38:	4a 23       	and	r20, r26
     b3a:	5b 23       	and	r21, r27
     b3c:	8e 81       	ldd	r24, Y+6	; 0x06
     b3e:	9f 81       	ldd	r25, Y+7	; 0x07
     b40:	a8 85       	ldd	r26, Y+8	; 0x08
     b42:	b9 85       	ldd	r27, Y+9	; 0x09
     b44:	28 17       	cp	r18, r24
     b46:	39 07       	cpc	r19, r25
     b48:	4a 07       	cpc	r20, r26
     b4a:	5b 07       	cpc	r21, r27
     b4c:	11 f4       	brne	.+4      	; 0xb52 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
}
     b54:	2a 96       	adiw	r28, 0x0a	; 10
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	29 97       	sbiw	r28, 0x09	; 9
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	8a 83       	std	Y+2, r24	; 0x02
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	4c 83       	std	Y+4, r20	; 0x04
     b7a:	5d 83       	std	Y+5, r21	; 0x05
     b7c:	6e 83       	std	Y+6, r22	; 0x06
     b7e:	7f 83       	std	Y+7, r23	; 0x07
     b80:	28 87       	std	Y+8, r18	; 0x08
     b82:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     b84:	28 85       	ldd	r18, Y+8	; 0x08
     b86:	39 85       	ldd	r19, Y+9	; 0x09
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	9d 81       	ldd	r25, Y+5	; 0x05
     b8c:	ae 81       	ldd	r26, Y+6	; 0x06
     b8e:	bf 81       	ldd	r27, Y+7	; 0x07
     b90:	6a 81       	ldd	r22, Y+2	; 0x02
     b92:	7b 81       	ldd	r23, Y+3	; 0x03
     b94:	89 01       	movw	r16, r18
     b96:	9c 01       	movw	r18, r24
     b98:	ad 01       	movw	r20, r26
     b9a:	8c e4       	ldi	r24, 0x4C	; 76
     b9c:	95 e0       	ldi	r25, 0x05	; 5
     b9e:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <xTimerPendFunctionCallFromISR>
     ba2:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
	}
     ba6:	29 96       	adiw	r28, 0x09	; 9
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	00 d0       	rcall	.+0      	; 0xbbc <pvPortMalloc+0x6>
     bbc:	1f 92       	push	r1
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     bca:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     bce:	20 91 5e 2c 	lds	r18, 0x2C5E	; 0x802c5e <xNextFreeByte>
     bd2:	30 91 5f 2c 	lds	r19, 0x2C5F	; 0x802c5f <xNextFreeByte+0x1>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
     bde:	88 3b       	cpi	r24, 0xB8	; 184
     be0:	9b 40       	sbci	r25, 0x0B	; 11
     be2:	18 f5       	brcc	.+70     	; 0xc2a <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     be4:	20 91 5e 2c 	lds	r18, 0x2C5E	; 0x802c5e <xNextFreeByte>
     be8:	30 91 5f 2c 	lds	r19, 0x2C5F	; 0x802c5f <xNextFreeByte+0x1>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	28 0f       	add	r18, r24
     bf2:	39 1f       	adc	r19, r25
     bf4:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <xNextFreeByte>
     bf8:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     bfc:	82 17       	cp	r24, r18
     bfe:	93 07       	cpc	r25, r19
     c00:	a0 f4       	brcc	.+40     	; 0xc2a <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     c02:	80 91 5e 2c 	lds	r24, 0x2C5E	; 0x802c5e <xNextFreeByte>
     c06:	90 91 5f 2c 	lds	r25, 0x2C5F	; 0x802c5f <xNextFreeByte+0x1>
     c0a:	8a 55       	subi	r24, 0x5A	; 90
     c0c:	9f 4d       	sbci	r25, 0xDF	; 223
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     c12:	20 91 5e 2c 	lds	r18, 0x2C5E	; 0x802c5e <xNextFreeByte>
     c16:	30 91 5f 2c 	lds	r19, 0x2C5F	; 0x802c5f <xNextFreeByte+0x1>
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	80 93 5e 2c 	sts	0x2C5E, r24	; 0x802c5e <xNextFreeByte>
     c26:	90 93 5f 2c 	sts	0x2C5F, r25	; 0x802c5f <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     c2a:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c32:	24 96       	adiw	r28, 0x04	; 4
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	1f 92       	push	r1
     c44:	1f 92       	push	r1
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     c4e:	00 00       	nop
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	1f 92       	push	r1
     c60:	1f 92       	push	r1
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	9c 01       	movw	r18, r24
     c70:	2d 5f       	subi	r18, 0xFD	; 253
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	fc 01       	movw	r30, r24
     c7a:	21 83       	std	Z+1, r18	; 0x01
     c7c:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c7e:	29 81       	ldd	r18, Y+1	; 0x01
     c80:	3a 81       	ldd	r19, Y+2	; 0x02
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	dc 01       	movw	r26, r24
     c88:	f9 01       	movw	r30, r18
     c8a:	83 83       	std	Z+3, r24	; 0x03
     c8c:	94 83       	std	Z+4, r25	; 0x04
     c8e:	a5 83       	std	Z+5, r26	; 0x05
     c90:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	9c 01       	movw	r18, r24
     c98:	2d 5f       	subi	r18, 0xFD	; 253
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	fc 01       	movw	r30, r24
     ca2:	27 83       	std	Z+7, r18	; 0x07
     ca4:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	9c 01       	movw	r18, r24
     cac:	2d 5f       	subi	r18, 0xFD	; 253
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	fc 01       	movw	r30, r24
     cb6:	21 87       	std	Z+9, r18	; 0x09
     cb8:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     cc2:	00 00       	nop
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	1f 92       	push	r1
     cd4:	1f 92       	push	r1
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	fc 01       	movw	r30, r24
     ce4:	12 86       	std	Z+10, r1	; 0x0a
     ce6:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     ce8:	00 00       	nop
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <vListInsertEnd+0x6>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <vListInsertEnd+0x8>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	8b 83       	std	Y+3, r24	; 0x03
     d02:	9c 83       	std	Y+4, r25	; 0x04
     d04:	6d 83       	std	Y+5, r22	; 0x05
     d06:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	fc 01       	movw	r30, r24
     d0e:	81 81       	ldd	r24, Z+1	; 0x01
     d10:	92 81       	ldd	r25, Z+2	; 0x02
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	29 81       	ldd	r18, Y+1	; 0x01
     d1c:	3a 81       	ldd	r19, Y+2	; 0x02
     d1e:	fc 01       	movw	r30, r24
     d20:	24 83       	std	Z+4, r18	; 0x04
     d22:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	fc 01       	movw	r30, r24
     d2a:	26 81       	ldd	r18, Z+6	; 0x06
     d2c:	37 81       	ldd	r19, Z+7	; 0x07
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	fc 01       	movw	r30, r24
     d34:	26 83       	std	Z+6, r18	; 0x06
     d36:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	86 81       	ldd	r24, Z+6	; 0x06
     d40:	97 81       	ldd	r25, Z+7	; 0x07
     d42:	2d 81       	ldd	r18, Y+5	; 0x05
     d44:	3e 81       	ldd	r19, Y+6	; 0x06
     d46:	fc 01       	movw	r30, r24
     d48:	24 83       	std	Z+4, r18	; 0x04
     d4a:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	2d 81       	ldd	r18, Y+5	; 0x05
     d52:	3e 81       	ldd	r19, Y+6	; 0x06
     d54:	fc 01       	movw	r30, r24
     d56:	26 83       	std	Z+6, r18	; 0x06
     d58:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	2b 81       	ldd	r18, Y+3	; 0x03
     d60:	3c 81       	ldd	r19, Y+4	; 0x04
     d62:	fc 01       	movw	r30, r24
     d64:	22 87       	std	Z+10, r18	; 0x0a
     d66:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	28 0f       	add	r18, r24
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
}
     d7c:	00 00       	nop
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	2a 97       	sbiw	r28, 0x0a	; 10
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	8f 83       	std	Y+7, r24	; 0x07
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	69 87       	std	Y+9, r22	; 0x09
     d9e:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	a2 81       	ldd	r26, Z+2	; 0x02
     dac:	b3 81       	ldd	r27, Z+3	; 0x03
     dae:	8b 83       	std	Y+3, r24	; 0x03
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	ad 83       	std	Y+5, r26	; 0x05
     db4:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	9c 81       	ldd	r25, Y+4	; 0x04
     dba:	ad 81       	ldd	r26, Y+5	; 0x05
     dbc:	be 81       	ldd	r27, Y+6	; 0x06
     dbe:	8f 3f       	cpi	r24, 0xFF	; 255
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	af 4f       	sbci	r26, 0xFF	; 255
     dc4:	bf 4f       	sbci	r27, 0xFF	; 255
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     dc8:	8f 81       	ldd	r24, Y+7	; 0x07
     dca:	98 85       	ldd	r25, Y+8	; 0x08
     dcc:	fc 01       	movw	r30, r24
     dce:	81 85       	ldd	r24, Z+9	; 0x09
     dd0:	92 85       	ldd	r25, Z+10	; 0x0a
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	20 c0       	rjmp	.+64     	; 0xe18 <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     dd8:	8f 81       	ldd	r24, Y+7	; 0x07
     dda:	98 85       	ldd	r25, Y+8	; 0x08
     ddc:	03 96       	adiw	r24, 0x03	; 3
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <vListInsert+0x68>
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	fc 01       	movw	r30, r24
     dea:	84 81       	ldd	r24, Z+4	; 0x04
     dec:	95 81       	ldd	r25, Z+5	; 0x05
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	95 81       	ldd	r25, Z+5	; 0x05
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 81       	ld	r18, Z
     e00:	31 81       	ldd	r19, Z+1	; 0x01
     e02:	42 81       	ldd	r20, Z+2	; 0x02
     e04:	53 81       	ldd	r21, Z+3	; 0x03
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	9c 81       	ldd	r25, Y+4	; 0x04
     e0a:	ad 81       	ldd	r26, Y+5	; 0x05
     e0c:	be 81       	ldd	r27, Y+6	; 0x06
     e0e:	82 17       	cp	r24, r18
     e10:	93 07       	cpc	r25, r19
     e12:	a4 07       	cpc	r26, r20
     e14:	b5 07       	cpc	r27, r21
     e16:	30 f7       	brcc	.-52     	; 0xde4 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	fc 01       	movw	r30, r24
     e1e:	24 81       	ldd	r18, Z+4	; 0x04
     e20:	35 81       	ldd	r19, Z+5	; 0x05
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	fc 01       	movw	r30, r24
     e28:	24 83       	std	Z+4, r18	; 0x04
     e2a:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	fc 01       	movw	r30, r24
     e32:	84 81       	ldd	r24, Z+4	; 0x04
     e34:	95 81       	ldd	r25, Z+5	; 0x05
     e36:	29 85       	ldd	r18, Y+9	; 0x09
     e38:	3a 85       	ldd	r19, Y+10	; 0x0a
     e3a:	fc 01       	movw	r30, r24
     e3c:	26 83       	std	Z+6, r18	; 0x06
     e3e:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	29 81       	ldd	r18, Y+1	; 0x01
     e46:	3a 81       	ldd	r19, Y+2	; 0x02
     e48:	fc 01       	movw	r30, r24
     e4a:	26 83       	std	Z+6, r18	; 0x06
     e4c:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	29 85       	ldd	r18, Y+9	; 0x09
     e54:	3a 85       	ldd	r19, Y+10	; 0x0a
     e56:	fc 01       	movw	r30, r24
     e58:	24 83       	std	Z+4, r18	; 0x04
     e5a:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	2f 81       	ldd	r18, Y+7	; 0x07
     e62:	38 85       	ldd	r19, Y+8	; 0x08
     e64:	fc 01       	movw	r30, r24
     e66:	22 87       	std	Z+10, r18	; 0x0a
     e68:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	fc 01       	movw	r30, r24
     e70:	80 81       	ld	r24, Z
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	28 0f       	add	r18, r24
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
}
     e7e:	00 00       	nop
     e80:	2a 96       	adiw	r28, 0x0a	; 10
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <uxListRemove+0x6>
     e92:	1f 92       	push	r1
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8b 83       	std	Y+3, r24	; 0x03
     e9a:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	82 85       	ldd	r24, Z+10	; 0x0a
     ea4:	93 85       	ldd	r25, Z+11	; 0x0b
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	fc 01       	movw	r30, r24
     eb0:	84 81       	ldd	r24, Z+4	; 0x04
     eb2:	95 81       	ldd	r25, Z+5	; 0x05
     eb4:	2b 81       	ldd	r18, Y+3	; 0x03
     eb6:	3c 81       	ldd	r19, Y+4	; 0x04
     eb8:	f9 01       	movw	r30, r18
     eba:	26 81       	ldd	r18, Z+6	; 0x06
     ebc:	37 81       	ldd	r19, Z+7	; 0x07
     ebe:	fc 01       	movw	r30, r24
     ec0:	26 83       	std	Z+6, r18	; 0x06
     ec2:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	fc 01       	movw	r30, r24
     eca:	86 81       	ldd	r24, Z+6	; 0x06
     ecc:	97 81       	ldd	r25, Z+7	; 0x07
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	f9 01       	movw	r30, r18
     ed4:	24 81       	ldd	r18, Z+4	; 0x04
     ed6:	35 81       	ldd	r19, Z+5	; 0x05
     ed8:	fc 01       	movw	r30, r24
     eda:	24 83       	std	Z+4, r18	; 0x04
     edc:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	fc 01       	movw	r30, r24
     ee4:	21 81       	ldd	r18, Z+1	; 0x01
     ee6:	32 81       	ldd	r19, Z+2	; 0x02
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	51 f4       	brne	.+20     	; 0xf06 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	fc 01       	movw	r30, r24
     ef8:	26 81       	ldd	r18, Z+6	; 0x06
     efa:	37 81       	ldd	r19, Z+7	; 0x07
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	fc 01       	movw	r30, r24
     f02:	21 83       	std	Z+1, r18	; 0x01
     f04:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	fc 01       	movw	r30, r24
     f0c:	12 86       	std	Z+10, r1	; 0x0a
     f0e:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	fc 01       	movw	r30, r24
     f16:	80 81       	ld	r24, Z
     f18:	2f ef       	ldi	r18, 0xFF	; 255
     f1a:	28 0f       	add	r18, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	fc 01       	movw	r30, r24
     f22:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
}
     f2c:	24 96       	adiw	r28, 0x04	; 4
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	80 ea       	ldi	r24, 0xA0	; 160
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	12 81       	ldd	r17, Z+2	; 0x02
     f4a:	80 ea       	ldi	r24, 0xA0	; 160
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	20 ea       	ldi	r18, 0xA0	; 160
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	f9 01       	movw	r30, r18
     f54:	22 81       	ldd	r18, Z+2	; 0x02
     f56:	28 7f       	andi	r18, 0xF8	; 248
     f58:	fc 01       	movw	r30, r24
     f5a:	22 83       	std	Z+2, r18	; 0x02
     f5c:	81 2f       	mov	r24, r17
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <pxPortInitialiseStack>:
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	2a 97       	sbiw	r28, 0x0a	; 10
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	6f 83       	std	Y+7, r22	; 0x07
     f7a:	78 87       	std	Y+8, r23	; 0x08
     f7c:	49 87       	std	Y+9, r20	; 0x09
     f7e:	5a 87       	std	Y+10, r21	; 0x0a
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	21 e1       	ldi	r18, 0x11	; 17
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	8d 83       	std	Y+5, r24	; 0x05
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	22 e2       	ldi	r18, 0x22	; 34
     f9a:	fc 01       	movw	r30, r24
     f9c:	20 83       	st	Z, r18
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	23 e3       	ldi	r18, 0x33	; 51
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8f 81       	ldd	r24, Y+7	; 0x07
     fbe:	98 85       	ldd	r25, Y+8	; 0x08
     fc0:	cc 01       	movw	r24, r24
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	ab 83       	std	Y+3, r26	; 0x03
     fcc:	bc 83       	std	Y+4, r27	; 0x04
     fce:	29 81       	ldd	r18, Y+1	; 0x01
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	ab 81       	ldd	r26, Y+3	; 0x03
     fe8:	bc 81       	ldd	r27, Y+4	; 0x04
     fea:	89 2f       	mov	r24, r25
     fec:	9a 2f       	mov	r25, r26
     fee:	ab 2f       	mov	r26, r27
     ff0:	bb 27       	eor	r27, r27
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	ab 83       	std	Y+3, r26	; 0x03
     ff8:	bc 83       	std	Y+4, r27	; 0x04
     ffa:	29 81       	ldd	r18, Y+1	; 0x01
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	ab 81       	ldd	r26, Y+3	; 0x03
    1014:	bc 81       	ldd	r27, Y+4	; 0x04
    1016:	89 2f       	mov	r24, r25
    1018:	9a 2f       	mov	r25, r26
    101a:	ab 2f       	mov	r26, r27
    101c:	bb 27       	eor	r27, r27
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	ab 83       	std	Y+3, r26	; 0x03
    1024:	bc 83       	std	Y+4, r27	; 0x04
    1026:	29 81       	ldd	r18, Y+1	; 0x01
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	21 e3       	ldi	r18, 0x31	; 49
    1040:	fc 01       	movw	r30, r24
    1042:	20 83       	st	Z, r18
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	20 e8       	ldi	r18, 0x80	; 128
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	27 e8       	ldi	r18, 0x87	; 135
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	fc 01       	movw	r30, r24
    107c:	10 82       	st	Z, r1
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	fc 01       	movw	r30, r24
    108e:	10 82       	st	Z, r1
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	22 e0       	ldi	r18, 0x02	; 2
    10a0:	fc 01       	movw	r30, r24
    10a2:	20 83       	st	Z, r18
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	23 e0       	ldi	r18, 0x03	; 3
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	24 e0       	ldi	r18, 0x04	; 4
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	25 e0       	ldi	r18, 0x05	; 5
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	26 e0       	ldi	r18, 0x06	; 6
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	9e 83       	std	Y+6, r25	; 0x06
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	27 e0       	ldi	r18, 0x07	; 7
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	9e 83       	std	Y+6, r25	; 0x06
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	28 e0       	ldi	r18, 0x08	; 8
    1118:	fc 01       	movw	r30, r24
    111a:	20 83       	st	Z, r18
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	8d 83       	std	Y+5, r24	; 0x05
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	29 e0       	ldi	r18, 0x09	; 9
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	9e 81       	ldd	r25, Y+6	; 0x06
    113e:	20 e1       	ldi	r18, 0x10	; 16
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	21 e1       	ldi	r18, 0x11	; 17
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	22 e1       	ldi	r18, 0x12	; 18
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	23 e1       	ldi	r18, 0x13	; 19
    117c:	fc 01       	movw	r30, r24
    117e:	20 83       	st	Z, r18
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	24 e1       	ldi	r18, 0x14	; 20
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	8d 83       	std	Y+5, r24	; 0x05
    119c:	9e 83       	std	Y+6, r25	; 0x06
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	25 e1       	ldi	r18, 0x15	; 21
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	26 e1       	ldi	r18, 0x16	; 22
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	27 e1       	ldi	r18, 0x17	; 23
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	28 e1       	ldi	r18, 0x18	; 24
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	29 e1       	ldi	r18, 0x19	; 25
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	20 e2       	ldi	r18, 0x20	; 32
    1208:	fc 01       	movw	r30, r24
    120a:	20 83       	st	Z, r18
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	21 e2       	ldi	r18, 0x21	; 33
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	22 e2       	ldi	r18, 0x22	; 34
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	23 e2       	ldi	r18, 0x23	; 35
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	cc 01       	movw	r24, r24
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	ab 83       	std	Y+3, r26	; 0x03
    1262:	bc 83       	std	Y+4, r27	; 0x04
    1264:	29 81       	ldd	r18, Y+1	; 0x01
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	fc 01       	movw	r30, r24
    126c:	20 83       	st	Z, r18
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	ab 81       	ldd	r26, Y+3	; 0x03
    127e:	bc 81       	ldd	r27, Y+4	; 0x04
    1280:	89 2f       	mov	r24, r25
    1282:	9a 2f       	mov	r25, r26
    1284:	ab 2f       	mov	r26, r27
    1286:	bb 27       	eor	r27, r27
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	ab 83       	std	Y+3, r26	; 0x03
    128e:	bc 83       	std	Y+4, r27	; 0x04
    1290:	29 81       	ldd	r18, Y+1	; 0x01
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	26 e2       	ldi	r18, 0x26	; 38
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	27 e2       	ldi	r18, 0x27	; 39
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	28 e2       	ldi	r18, 0x28	; 40
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	29 e2       	ldi	r18, 0x29	; 41
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	20 e3       	ldi	r18, 0x30	; 48
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	2a 96       	adiw	r28, 0x0a	; 10
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <xPortStartScheduler>:
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <prvSetupTimerInterrupt>
    1324:	a0 91 60 2c 	lds	r26, 0x2C60	; 0x802c60 <pxCurrentTCB>
    1328:	b0 91 61 2c 	lds	r27, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    132c:	0d 90       	ld	r0, X+
    132e:	0d be       	out	0x3d, r0	; 61
    1330:	0d 90       	ld	r0, X+
    1332:	0e be       	out	0x3e, r0	; 62
    1334:	ef 91       	pop	r30
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	bf 91       	pop	r27
    133c:	af 91       	pop	r26
    133e:	9f 91       	pop	r25
    1340:	8f 91       	pop	r24
    1342:	7f 91       	pop	r23
    1344:	6f 91       	pop	r22
    1346:	5f 91       	pop	r21
    1348:	4f 91       	pop	r20
    134a:	3f 91       	pop	r19
    134c:	2f 91       	pop	r18
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	8f 90       	pop	r8
    1362:	7f 90       	pop	r7
    1364:	6f 90       	pop	r6
    1366:	5f 90       	pop	r5
    1368:	4f 90       	pop	r4
    136a:	3f 90       	pop	r3
    136c:	2f 90       	pop	r2
    136e:	1f 90       	pop	r1
    1370:	0f 90       	pop	r0
    1372:	ff 91       	pop	r31
    1374:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1378:	ff 91       	pop	r31
    137a:	ff bf       	out	0x3f, r31	; 63
    137c:	ff 91       	pop	r31
    137e:	08 95       	ret
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1388:	ff 93       	push	r31
    138a:	ff b7       	in	r31, 0x3f	; 63
    138c:	ff 93       	push	r31
    138e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1392:	ff 93       	push	r31
    1394:	f8 7f       	andi	r31, 0xF8	; 248
    1396:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    139a:	0f 92       	push	r0
    139c:	1f 92       	push	r1
    139e:	11 24       	eor	r1, r1
    13a0:	2f 92       	push	r2
    13a2:	3f 92       	push	r3
    13a4:	4f 92       	push	r4
    13a6:	5f 92       	push	r5
    13a8:	6f 92       	push	r6
    13aa:	7f 92       	push	r7
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	ef 93       	push	r30
    13da:	a0 91 60 2c 	lds	r26, 0x2C60	; 0x802c60 <pxCurrentTCB>
    13de:	b0 91 61 2c 	lds	r27, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    13e2:	0d b6       	in	r0, 0x3d	; 61
    13e4:	0d 92       	st	X+, r0
    13e6:	0e b6       	in	r0, 0x3e	; 62
    13e8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    13ea:	0e 94 53 14 	call	0x28a6	; 0x28a6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13ee:	a0 91 60 2c 	lds	r26, 0x2C60	; 0x802c60 <pxCurrentTCB>
    13f2:	b0 91 61 2c 	lds	r27, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    13f6:	0d 90       	ld	r0, X+
    13f8:	0d be       	out	0x3d, r0	; 61
    13fa:	0d 90       	ld	r0, X+
    13fc:	0e be       	out	0x3e, r0	; 62
    13fe:	ef 91       	pop	r30
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	7f 90       	pop	r7
    142e:	6f 90       	pop	r6
    1430:	5f 90       	pop	r5
    1432:	4f 90       	pop	r4
    1434:	3f 90       	pop	r3
    1436:	2f 90       	pop	r2
    1438:	1f 90       	pop	r1
    143a:	0f 90       	pop	r0
    143c:	ff 91       	pop	r31
    143e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1442:	ff 91       	pop	r31
    1444:	ff bf       	out	0x3f, r31	; 63
    1446:	ff 91       	pop	r31
	asm volatile ( "ret" );
    1448:	08 95       	ret
	...

0000144c <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	1f 92       	push	r1
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    145a:	80 91 1a 2d 	lds	r24, 0x2D1A	; 0x802d1a <intTaskSwitchPending>
    145e:	98 2f       	mov	r25, r24
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	89 2b       	or	r24, r25
    1464:	80 93 1a 2d 	sts	0x2D1A, r24	; 0x802d1a <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    1468:	80 ea       	ldi	r24, 0xA0	; 160
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	80 81       	ld	r24, Z
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	61 f0       	breq	.+24     	; 0x148c <portTaskSwitchContext+0x40>
    1474:	80 ea       	ldi	r24, 0xA0	; 160
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	82 30       	cpi	r24, 0x02	; 2
    147e:	31 f0       	breq	.+12     	; 0x148c <portTaskSwitchContext+0x40>
    1480:	80 ea       	ldi	r24, 0xA0	; 160
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	84 30       	cpi	r24, 0x04	; 4
    148a:	79 f4       	brne	.+30     	; 0x14aa <portTaskSwitchContext+0x5e>
    148c:	80 91 1a 2d 	lds	r24, 0x2D1A	; 0x802d1a <intTaskSwitchPending>
    1490:	88 23       	and	r24, r24
    1492:	59 f0       	breq	.+22     	; 0x14aa <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1494:	0e 94 9c 07 	call	0xf38	; 0xf38 <_portSetInterruptMaskFromIsr>
    1498:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    149a:	10 92 1a 2d 	sts	0x2D1A, r1	; 0x802d1a <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    149e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    14a2:	80 ea       	ldi	r24, 0xA0	; 160
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	fc 01       	movw	r30, r24
    14a8:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    14aa:	00 00       	nop
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	08 95       	ret

000014b6 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    14c0:	0e 94 9c 07 	call	0xf38	; 0xf38 <_portSetInterruptMaskFromIsr>
    14c4:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    14c6:	0e 94 43 13 	call	0x2686	; 0x2686 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    14ca:	80 ea       	ldi	r24, 0xA0	; 160
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	fc 01       	movw	r30, r24
    14d0:	12 83       	std	Z+2, r17	; 0x02
	}
    14d2:	00 00       	nop
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	08 95       	ret

000014dc <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    14dc:	ff 93       	push	r31
    14de:	ff b7       	in	r31, 0x3f	; 63
    14e0:	ff 93       	push	r31
    14e2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14e6:	ff 93       	push	r31
    14e8:	f8 7f       	andi	r31, 0xF8	; 248
    14ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    14ee:	0f 92       	push	r0
    14f0:	1f 92       	push	r1
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 92       	push	r2
    14f6:	3f 92       	push	r3
    14f8:	4f 92       	push	r4
    14fa:	5f 92       	push	r5
    14fc:	6f 92       	push	r6
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ef 93       	push	r30
    152e:	a0 91 60 2c 	lds	r26, 0x2C60	; 0x802c60 <pxCurrentTCB>
    1532:	b0 91 61 2c 	lds	r27, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    1536:	0d b6       	in	r0, 0x3d	; 61
    1538:	0d 92       	st	X+, r0
    153a:	0e b6       	in	r0, 0x3e	; 62
    153c:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    153e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	0e 94 26 0a 	call	0x144c	; 0x144c <portTaskSwitchContext>
    1548:	a0 91 60 2c 	lds	r26, 0x2C60	; 0x802c60 <pxCurrentTCB>
    154c:	b0 91 61 2c 	lds	r27, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    1550:	0d 90       	ld	r0, X+
    1552:	0d be       	out	0x3d, r0	; 61
    1554:	0d 90       	ld	r0, X+
    1556:	0e be       	out	0x3e, r0	; 62
    1558:	ef 91       	pop	r30
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
    157e:	bf 90       	pop	r11
    1580:	af 90       	pop	r10
    1582:	9f 90       	pop	r9
    1584:	8f 90       	pop	r8
    1586:	7f 90       	pop	r7
    1588:	6f 90       	pop	r6
    158a:	5f 90       	pop	r5
    158c:	4f 90       	pop	r4
    158e:	3f 90       	pop	r3
    1590:	2f 90       	pop	r2
    1592:	1f 90       	pop	r1
    1594:	0f 90       	pop	r0
    1596:	ff 91       	pop	r31
    1598:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    159c:	ff 91       	pop	r31
    159e:	ff bf       	out	0x3f, r31	; 63
    15a0:	ff 91       	pop	r31
    15a2:	18 95       	reti
	...

000015a6 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <prvSetupTimerInterrupt+0x6>
    15ac:	1f 92       	push	r1
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	9d e7       	ldi	r25, 0x7D	; 125
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	ab 83       	std	Y+3, r26	; 0x03
    15c0:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	ab 81       	ldd	r26, Y+3	; 0x03
    15c8:	bc 81       	ldd	r27, Y+4	; 0x04
    15ca:	68 94       	set
    15cc:	15 f8       	bld	r1, 5
    15ce:	b6 95       	lsr	r27
    15d0:	a7 95       	ror	r26
    15d2:	97 95       	ror	r25
    15d4:	87 95       	ror	r24
    15d6:	16 94       	lsr	r1
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <prvSetupTimerInterrupt+0x28>
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	ab 83       	std	Y+3, r26	; 0x03
    15e0:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	ab 81       	ldd	r26, Y+3	; 0x03
    15e8:	bc 81       	ldd	r27, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	a1 09       	sbc	r26, r1
    15ee:	b1 09       	sbc	r27, r1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	ab 83       	std	Y+3, r26	; 0x03
    15f6:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	98 e0       	ldi	r25, 0x08	; 8
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1600:	fc 01       	movw	r30, r24
    1602:	26 a3       	std	Z+38, r18	; 0x26
    1604:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	98 e0       	ldi	r25, 0x08	; 8
    160c:	0e 94 00 02 	call	0x400	; 0x400 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	98 e0       	ldi	r25, 0x08	; 8
    1616:	0e 94 38 02 	call	0x470	; 0x470 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    161a:	00 00       	nop
    161c:	24 96       	adiw	r28, 0x04	; 4
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	25 97       	sbiw	r28, 0x05	; 5
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	6d 83       	std	Y+5, r22	; 0x05
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1648:	ff 93       	push	r31
    164a:	f8 7f       	andi	r31, 0xF8	; 248
    164c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	fc 01       	movw	r30, r24
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	29 81       	ldd	r18, Y+1	; 0x01
    165c:	3a 81       	ldd	r19, Y+2	; 0x02
    165e:	f9 01       	movw	r30, r18
    1660:	27 8d       	ldd	r18, Z+31	; 0x1f
    1662:	42 2f       	mov	r20, r18
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	29 81       	ldd	r18, Y+1	; 0x01
    1668:	3a 81       	ldd	r19, Y+2	; 0x02
    166a:	f9 01       	movw	r30, r18
    166c:	20 a1       	ldd	r18, Z+32	; 0x20
    166e:	22 2f       	mov	r18, r18
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	42 9f       	mul	r20, r18
    1674:	b0 01       	movw	r22, r0
    1676:	43 9f       	mul	r20, r19
    1678:	70 0d       	add	r23, r0
    167a:	52 9f       	mul	r21, r18
    167c:	70 0d       	add	r23, r0
    167e:	11 24       	eor	r1, r1
    1680:	9b 01       	movw	r18, r22
    1682:	28 0f       	add	r18, r24
    1684:	39 1f       	adc	r19, r25
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	fc 01       	movw	r30, r24
    168c:	22 83       	std	Z+2, r18	; 0x02
    168e:	33 83       	std	Z+3, r19	; 0x03
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	fc 01       	movw	r30, r24
    1696:	16 8e       	std	Z+30, r1	; 0x1e
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	fc 01       	movw	r30, r24
    169e:	20 81       	ld	r18, Z
    16a0:	31 81       	ldd	r19, Z+1	; 0x01
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	fc 01       	movw	r30, r24
    16a8:	24 83       	std	Z+4, r18	; 0x04
    16aa:	35 83       	std	Z+5, r19	; 0x05
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	fc 01       	movw	r30, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	29 81       	ldd	r18, Y+1	; 0x01
    16b8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ba:	f9 01       	movw	r30, r18
    16bc:	27 8d       	ldd	r18, Z+31	; 0x1f
    16be:	22 2f       	mov	r18, r18
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	a9 01       	movw	r20, r18
    16c4:	41 50       	subi	r20, 0x01	; 1
    16c6:	51 09       	sbc	r21, r1
    16c8:	29 81       	ldd	r18, Y+1	; 0x01
    16ca:	3a 81       	ldd	r19, Y+2	; 0x02
    16cc:	f9 01       	movw	r30, r18
    16ce:	20 a1       	ldd	r18, Z+32	; 0x20
    16d0:	22 2f       	mov	r18, r18
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	42 9f       	mul	r20, r18
    16d6:	b0 01       	movw	r22, r0
    16d8:	43 9f       	mul	r20, r19
    16da:	70 0d       	add	r23, r0
    16dc:	52 9f       	mul	r21, r18
    16de:	70 0d       	add	r23, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	9b 01       	movw	r18, r22
    16e4:	28 0f       	add	r18, r24
    16e6:	39 1f       	adc	r19, r25
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	fc 01       	movw	r30, r24
    16ee:	26 83       	std	Z+6, r18	; 0x06
    16f0:	37 83       	std	Z+7, r19	; 0x07
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	9a 81       	ldd	r25, Y+2	; 0x02
    16f6:	2f ef       	ldi	r18, 0xFF	; 255
    16f8:	fc 01       	movw	r30, r24
    16fa:	21 a3       	std	Z+33, r18	; 0x21
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	fc 01       	movw	r30, r24
    1704:	22 a3       	std	Z+34, r18	; 0x22
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	88 23       	and	r24, r24
    170a:	81 f4       	brne	.+32     	; 0x172c <xQueueGenericReset+0x104>
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	fc 01       	movw	r30, r24
    1712:	80 85       	ldd	r24, Z+8	; 0x08
    1714:	88 23       	and	r24, r24
    1716:	a1 f0       	breq	.+40     	; 0x1740 <xQueueGenericReset+0x118>
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	08 96       	adiw	r24, 0x08	; 8
    171e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    1722:	88 23       	and	r24, r24
    1724:	69 f0       	breq	.+26     	; 0x1740 <xQueueGenericReset+0x118>
    1726:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    172a:	0a c0       	rjmp	.+20     	; 0x1740 <xQueueGenericReset+0x118>
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	08 96       	adiw	r24, 0x08	; 8
    1732:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	43 96       	adiw	r24, 0x13	; 19
    173c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    1740:	ff 91       	pop	r31
    1742:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	25 96       	adiw	r28, 0x05	; 5
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <xQueueGenericCreate>:
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	29 97       	sbiw	r28, 0x09	; 9
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	8f 83       	std	Y+7, r24	; 0x07
    1768:	68 87       	std	Y+8, r22	; 0x08
    176a:	49 87       	std	Y+9, r20	; 0x09
    176c:	88 85       	ldd	r24, Y+8	; 0x08
    176e:	88 23       	and	r24, r24
    1770:	19 f4       	brne	.+6      	; 0x1778 <xQueueGenericCreate+0x24>
    1772:	19 82       	std	Y+1, r1	; 0x01
    1774:	1a 82       	std	Y+2, r1	; 0x02
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <xQueueGenericCreate+0x42>
    1778:	8f 81       	ldd	r24, Y+7	; 0x07
    177a:	48 2f       	mov	r20, r24
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	88 85       	ldd	r24, Y+8	; 0x08
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	42 9f       	mul	r20, r18
    1786:	c0 01       	movw	r24, r0
    1788:	43 9f       	mul	r20, r19
    178a:	90 0d       	add	r25, r0
    178c:	52 9f       	mul	r21, r18
    178e:	90 0d       	add	r25, r0
    1790:	11 24       	eor	r1, r1
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	85 96       	adiw	r24, 0x25	; 37
    179c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pvPortMalloc>
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	89 2b       	or	r24, r25
    17aa:	81 f0       	breq	.+32     	; 0x17cc <xQueueGenericCreate+0x78>
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	85 96       	adiw	r24, 0x25	; 37
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	9e 81       	ldd	r25, Y+6	; 0x06
    17be:	89 01       	movw	r16, r18
    17c0:	29 85       	ldd	r18, Y+9	; 0x09
    17c2:	ac 01       	movw	r20, r24
    17c4:	68 85       	ldd	r22, Y+8	; 0x08
    17c6:	8f 81       	ldd	r24, Y+7	; 0x07
    17c8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <prvInitialiseNewQueue>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	29 96       	adiw	r28, 0x09	; 9
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <prvInitialiseNewQueue>:
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	27 97       	sbiw	r28, 0x07	; 7
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6a 83       	std	Y+2, r22	; 0x02
    17f6:	4b 83       	std	Y+3, r20	; 0x03
    17f8:	5c 83       	std	Y+4, r21	; 0x04
    17fa:	2d 83       	std	Y+5, r18	; 0x05
    17fc:	0e 83       	std	Y+6, r16	; 0x06
    17fe:	1f 83       	std	Y+7, r17	; 0x07
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	88 23       	and	r24, r24
    1804:	41 f4       	brne	.+16     	; 0x1816 <prvInitialiseNewQueue+0x36>
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	2e 81       	ldd	r18, Y+6	; 0x06
    180c:	3f 81       	ldd	r19, Y+7	; 0x07
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
    1812:	31 83       	std	Z+1, r19	; 0x01
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <prvInitialiseNewQueue+0x44>
    1816:	8e 81       	ldd	r24, Y+6	; 0x06
    1818:	9f 81       	ldd	r25, Y+7	; 0x07
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	29 81       	ldd	r18, Y+1	; 0x01
    182a:	fc 01       	movw	r30, r24
    182c:	27 8f       	std	Z+31, r18	; 0x1f
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	2a 81       	ldd	r18, Y+2	; 0x02
    1834:	fc 01       	movw	r30, r24
    1836:	20 a3       	std	Z+32, r18	; 0x20
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	0e 94 14 0b 	call	0x1628	; 0x1628 <xQueueGenericReset>
    1842:	8e 81       	ldd	r24, Y+6	; 0x06
    1844:	9f 81       	ldd	r25, Y+7	; 0x07
    1846:	2d 81       	ldd	r18, Y+5	; 0x05
    1848:	fc 01       	movw	r30, r24
    184a:	24 a3       	std	Z+36, r18	; 0x24
    184c:	00 00       	nop
    184e:	27 96       	adiw	r28, 0x07	; 7
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <xQueueGenericSend>:
    185e:	0f 93       	push	r16
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	62 97       	sbiw	r28, 0x12	; 18
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	8a 87       	std	Y+10, r24	; 0x0a
    1870:	9b 87       	std	Y+11, r25	; 0x0b
    1872:	6c 87       	std	Y+12, r22	; 0x0c
    1874:	7d 87       	std	Y+13, r23	; 0x0d
    1876:	2e 87       	std	Y+14, r18	; 0x0e
    1878:	3f 87       	std	Y+15, r19	; 0x0f
    187a:	48 8b       	std	Y+16, r20	; 0x10
    187c:	59 8b       	std	Y+17, r21	; 0x11
    187e:	0a 8b       	std	Y+18, r16	; 0x12
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    188e:	ff 93       	push	r31
    1890:	f8 7f       	andi	r31, 0xF8	; 248
    1892:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	fc 01       	movw	r30, r24
    189c:	26 8d       	ldd	r18, Z+30	; 0x1e
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	fc 01       	movw	r30, r24
    18a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    18a6:	28 17       	cp	r18, r24
    18a8:	18 f0       	brcs	.+6      	; 0x18b0 <xQueueGenericSend+0x52>
    18aa:	8a 89       	ldd	r24, Y+18	; 0x12
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	19 f5       	brne	.+70     	; 0x18f6 <xQueueGenericSend+0x98>
    18b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	4a 89       	ldd	r20, Y+18	; 0x12
    18ba:	b9 01       	movw	r22, r18
    18bc:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <prvCopyDataToQueue>
    18c0:	8c 83       	std	Y+4, r24	; 0x04
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	fc 01       	movw	r30, r24
    18c8:	83 89       	ldd	r24, Z+19	; 0x13
    18ca:	88 23       	and	r24, r24
    18cc:	51 f0       	breq	.+20     	; 0x18e2 <xQueueGenericSend+0x84>
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	9b 81       	ldd	r25, Y+3	; 0x03
    18d2:	43 96       	adiw	r24, 0x13	; 19
    18d4:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    18d8:	88 23       	and	r24, r24
    18da:	41 f0       	breq	.+16     	; 0x18ec <xQueueGenericSend+0x8e>
    18dc:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <xQueueGenericSend+0x8e>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	88 23       	and	r24, r24
    18e6:	11 f0       	breq	.+4      	; 0x18ec <xQueueGenericSend+0x8e>
    18e8:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    18ec:	ff 91       	pop	r31
    18ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	6f c0       	rjmp	.+222    	; 0x19d4 <xQueueGenericSend+0x176>
    18f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fa:	a8 89       	ldd	r26, Y+16	; 0x10
    18fc:	b9 89       	ldd	r27, Y+17	; 0x11
    18fe:	89 2b       	or	r24, r25
    1900:	8a 2b       	or	r24, r26
    1902:	8b 2b       	or	r24, r27
    1904:	29 f4       	brne	.+10     	; 0x1910 <xQueueGenericSend+0xb2>
    1906:	ff 91       	pop	r31
    1908:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	62 c0       	rjmp	.+196    	; 0x19d4 <xQueueGenericSend+0x176>
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 23       	and	r24, r24
    1914:	31 f4       	brne	.+12     	; 0x1922 <xQueueGenericSend+0xc4>
    1916:	ce 01       	movw	r24, r28
    1918:	05 96       	adiw	r24, 0x05	; 5
    191a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <vTaskInternalSetTimeOutState>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	ff 91       	pop	r31
    1924:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1928:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
    192c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1930:	ff 93       	push	r31
    1932:	f8 7f       	andi	r31, 0xF8	; 248
    1934:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	fc 01       	movw	r30, r24
    193e:	81 a1       	ldd	r24, Z+33	; 0x21
    1940:	8f 3f       	cpi	r24, 0xFF	; 255
    1942:	21 f4       	brne	.+8      	; 0x194c <xQueueGenericSend+0xee>
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	9b 81       	ldd	r25, Y+3	; 0x03
    1948:	fc 01       	movw	r30, r24
    194a:	11 a2       	std	Z+33, r1	; 0x21
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	9b 81       	ldd	r25, Y+3	; 0x03
    1950:	fc 01       	movw	r30, r24
    1952:	82 a1       	ldd	r24, Z+34	; 0x22
    1954:	8f 3f       	cpi	r24, 0xFF	; 255
    1956:	21 f4       	brne	.+8      	; 0x1960 <xQueueGenericSend+0x102>
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	fc 01       	movw	r30, r24
    195e:	12 a2       	std	Z+34, r1	; 0x22
    1960:	ff 91       	pop	r31
    1962:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1966:	9e 01       	movw	r18, r28
    1968:	22 5f       	subi	r18, 0xF2	; 242
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	ce 01       	movw	r24, r28
    196e:	05 96       	adiw	r24, 0x05	; 5
    1970:	b9 01       	movw	r22, r18
    1972:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskCheckForTimeOut>
    1976:	88 23       	and	r24, r24
    1978:	31 f5       	brne	.+76     	; 0x19c6 <xQueueGenericSend+0x168>
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <prvIsQueueFull>
    1982:	88 23       	and	r24, r24
    1984:	c9 f0       	breq	.+50     	; 0x19b8 <xQueueGenericSend+0x15a>
    1986:	8e 85       	ldd	r24, Y+14	; 0x0e
    1988:	9f 85       	ldd	r25, Y+15	; 0x0f
    198a:	a8 89       	ldd	r26, Y+16	; 0x10
    198c:	b9 89       	ldd	r27, Y+17	; 0x11
    198e:	2a 81       	ldd	r18, Y+2	; 0x02
    1990:	3b 81       	ldd	r19, Y+3	; 0x03
    1992:	28 5f       	subi	r18, 0xF8	; 248
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	ac 01       	movw	r20, r24
    1998:	bd 01       	movw	r22, r26
    199a:	c9 01       	movw	r24, r18
    199c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <vTaskPlaceOnEventList>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    19a8:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <xQueueGenericSend+0x154>
    19b0:	6c cf       	rjmp	.-296    	; 0x188a <xQueueGenericSend+0x2c>
    19b2:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    19b6:	69 cf       	rjmp	.-302    	; 0x188a <xQueueGenericSend+0x2c>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    19c0:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    19c4:	62 cf       	rjmp	.-316    	; 0x188a <xQueueGenericSend+0x2c>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    19ce:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	62 96       	adiw	r28, 0x12	; 18
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <xQueueGenericSendFromISR>:
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	2c 97       	sbiw	r28, 0x0c	; 12
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	8e 83       	std	Y+6, r24	; 0x06
    19f2:	9f 83       	std	Y+7, r25	; 0x07
    19f4:	68 87       	std	Y+8, r22	; 0x08
    19f6:	79 87       	std	Y+9, r23	; 0x09
    19f8:	4a 87       	std	Y+10, r20	; 0x0a
    19fa:	5b 87       	std	Y+11, r21	; 0x0b
    19fc:	2c 87       	std	Y+12, r18	; 0x0c
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	8a 83       	std	Y+2, r24	; 0x02
    1a04:	9b 83       	std	Y+3, r25	; 0x03
    1a06:	0e 94 9c 07 	call	0xf38	; 0xf38 <_portSetInterruptMaskFromIsr>
    1a0a:	8c 83       	std	Y+4, r24	; 0x04
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	fc 01       	movw	r30, r24
    1a12:	26 8d       	ldd	r18, Z+30	; 0x1e
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	9b 81       	ldd	r25, Y+3	; 0x03
    1a18:	fc 01       	movw	r30, r24
    1a1a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a1c:	28 17       	cp	r18, r24
    1a1e:	18 f0       	brcs	.+6      	; 0x1a26 <xQueueGenericSendFromISR+0x44>
    1a20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	89 f5       	brne	.+98     	; 0x1a88 <xQueueGenericSendFromISR+0xa6>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	82 a1       	ldd	r24, Z+34	; 0x22
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	28 85       	ldd	r18, Y+8	; 0x08
    1a32:	39 85       	ldd	r19, Y+9	; 0x09
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <prvCopyDataToQueue>
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	b9 f4       	brne	.+46     	; 0x1a74 <xQueueGenericSendFromISR+0x92>
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	83 89       	ldd	r24, Z+19	; 0x13
    1a4e:	88 23       	and	r24, r24
    1a50:	c1 f0       	breq	.+48     	; 0x1a82 <xQueueGenericSendFromISR+0xa0>
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	9b 81       	ldd	r25, Y+3	; 0x03
    1a56:	43 96       	adiw	r24, 0x13	; 19
    1a58:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    1a5c:	88 23       	and	r24, r24
    1a5e:	89 f0       	breq	.+34     	; 0x1a82 <xQueueGenericSendFromISR+0xa0>
    1a60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a64:	89 2b       	or	r24, r25
    1a66:	69 f0       	breq	.+26     	; 0x1a82 <xQueueGenericSendFromISR+0xa0>
    1a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6c:	21 e0       	ldi	r18, 0x01	; 1
    1a6e:	fc 01       	movw	r30, r24
    1a70:	20 83       	st	Z, r18
    1a72:	07 c0       	rjmp	.+14     	; 0x1a82 <xQueueGenericSendFromISR+0xa0>
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	28 2f       	mov	r18, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	fc 01       	movw	r30, r24
    1a80:	22 a3       	std	Z+34, r18	; 0x22
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <xQueueGenericSendFromISR+0xa8>
    1a88:	19 82       	std	Y+1, r1	; 0x01
    1a8a:	80 ea       	ldi	r24, 0xA0	; 160
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	fc 01       	movw	r30, r24
    1a92:	22 83       	std	Z+2, r18	; 0x02
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	2c 96       	adiw	r28, 0x0c	; 12
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <xQueueReceive>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	61 97       	sbiw	r28, 0x11	; 17
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	8a 87       	std	Y+10, r24	; 0x0a
    1ab2:	9b 87       	std	Y+11, r25	; 0x0b
    1ab4:	6c 87       	std	Y+12, r22	; 0x0c
    1ab6:	7d 87       	std	Y+13, r23	; 0x0d
    1ab8:	2e 87       	std	Y+14, r18	; 0x0e
    1aba:	3f 87       	std	Y+15, r19	; 0x0f
    1abc:	48 8b       	std	Y+16, r20	; 0x10
    1abe:	59 8b       	std	Y+17, r21	; 0x11
    1ac0:	19 82       	std	Y+1, r1	; 0x01
    1ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    1ac8:	9b 83       	std	Y+3, r25	; 0x03
    1aca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ace:	ff 93       	push	r31
    1ad0:	f8 7f       	andi	r31, 0xF8	; 248
    1ad2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ada:	fc 01       	movw	r30, r24
    1adc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ade:	8c 83       	std	Y+4, r24	; 0x04
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	88 23       	and	r24, r24
    1ae4:	11 f1       	breq	.+68     	; 0x1b2a <xQueueReceive+0x88>
    1ae6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	b9 01       	movw	r22, r18
    1af0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <prvCopyDataFromQueue>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	28 0f       	add	r18, r24
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	fc 01       	movw	r30, r24
    1b00:	26 8f       	std	Z+30, r18	; 0x1e
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	fc 01       	movw	r30, r24
    1b08:	80 85       	ldd	r24, Z+8	; 0x08
    1b0a:	88 23       	and	r24, r24
    1b0c:	49 f0       	breq	.+18     	; 0x1b20 <xQueueReceive+0x7e>
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	08 96       	adiw	r24, 0x08	; 8
    1b14:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    1b18:	88 23       	and	r24, r24
    1b1a:	11 f0       	breq	.+4      	; 0x1b20 <xQueueReceive+0x7e>
    1b1c:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    1b20:	ff 91       	pop	r31
    1b22:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	76 c0       	rjmp	.+236    	; 0x1c16 <xQueueReceive+0x174>
    1b2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b2e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b30:	b9 89       	ldd	r27, Y+17	; 0x11
    1b32:	89 2b       	or	r24, r25
    1b34:	8a 2b       	or	r24, r26
    1b36:	8b 2b       	or	r24, r27
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <xQueueReceive+0xa2>
    1b3a:	ff 91       	pop	r31
    1b3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	69 c0       	rjmp	.+210    	; 0x1c16 <xQueueReceive+0x174>
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	88 23       	and	r24, r24
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <xQueueReceive+0xb4>
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	05 96       	adiw	r24, 0x05	; 5
    1b4e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <vTaskInternalSetTimeOutState>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	ff 91       	pop	r31
    1b58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b5c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
    1b60:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b64:	ff 93       	push	r31
    1b66:	f8 7f       	andi	r31, 0xF8	; 248
    1b68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	fc 01       	movw	r30, r24
    1b72:	81 a1       	ldd	r24, Z+33	; 0x21
    1b74:	8f 3f       	cpi	r24, 0xFF	; 255
    1b76:	21 f4       	brne	.+8      	; 0x1b80 <xQueueReceive+0xde>
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	11 a2       	std	Z+33, r1	; 0x21
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	fc 01       	movw	r30, r24
    1b86:	82 a1       	ldd	r24, Z+34	; 0x22
    1b88:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8a:	21 f4       	brne	.+8      	; 0x1b94 <xQueueReceive+0xf2>
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b90:	fc 01       	movw	r30, r24
    1b92:	12 a2       	std	Z+34, r1	; 0x22
    1b94:	ff 91       	pop	r31
    1b96:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1b9a:	9e 01       	movw	r18, r28
    1b9c:	22 5f       	subi	r18, 0xF2	; 242
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	05 96       	adiw	r24, 0x05	; 5
    1ba4:	b9 01       	movw	r22, r18
    1ba6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <xTaskCheckForTimeOut>
    1baa:	88 23       	and	r24, r24
    1bac:	31 f5       	brne	.+76     	; 0x1bfa <xQueueReceive+0x158>
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <prvIsQueueEmpty>
    1bb6:	88 23       	and	r24, r24
    1bb8:	c9 f0       	breq	.+50     	; 0x1bec <xQueueReceive+0x14a>
    1bba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bbe:	a8 89       	ldd	r26, Y+16	; 0x10
    1bc0:	b9 89       	ldd	r27, Y+17	; 0x11
    1bc2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc4:	3b 81       	ldd	r19, Y+3	; 0x03
    1bc6:	2d 5e       	subi	r18, 0xED	; 237
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	ac 01       	movw	r20, r24
    1bcc:	bd 01       	movw	r22, r26
    1bce:	c9 01       	movw	r24, r18
    1bd0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <vTaskPlaceOnEventList>
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    1bdc:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    1be0:	88 23       	and	r24, r24
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <xQueueReceive+0x144>
    1be4:	72 cf       	rjmp	.-284    	; 0x1aca <xQueueReceive+0x28>
    1be6:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    1bea:	6f cf       	rjmp	.-290    	; 0x1aca <xQueueReceive+0x28>
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    1bf4:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    1bf8:	68 cf       	rjmp	.-304    	; 0x1aca <xQueueReceive+0x28>
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfe:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
    1c02:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <prvIsQueueEmpty>
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <xQueueReceive+0x172>
    1c12:	5b cf       	rjmp	.-330    	; 0x1aca <xQueueReceive+0x28>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	61 96       	adiw	r28, 0x11	; 17
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <uxQueueMessagesWaiting>:
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <uxQueueMessagesWaiting+0x6>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	9b 83       	std	Y+3, r25	; 0x03
    1c30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c34:	ff 93       	push	r31
    1c36:	f8 7f       	andi	r31, 0xF8	; 248
    1c38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	fc 01       	movw	r30, r24
    1c42:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	ff 91       	pop	r31
    1c48:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	23 96       	adiw	r28, 0x03	; 3
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <prvCopyDataToQueue>:
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	27 97       	sbiw	r28, 0x07	; 7
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	6d 83       	std	Y+5, r22	; 0x05
    1c6e:	7e 83       	std	Y+6, r23	; 0x06
    1c70:	4f 83       	std	Y+7, r20	; 0x07
    1c72:	1a 82       	std	Y+2, r1	; 0x02
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	fc 01       	movw	r30, r24
    1c7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	fc 01       	movw	r30, r24
    1c84:	80 a1       	ldd	r24, Z+32	; 0x20
    1c86:	88 23       	and	r24, r24
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <prvCopyDataToQueue+0x32>
    1c8a:	8e c0       	rjmp	.+284    	; 0x1da8 <prvCopyDataToQueue+0x14e>
    1c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8e:	88 23       	and	r24, r24
    1c90:	d9 f5       	brne	.+118    	; 0x1d08 <prvCopyDataToQueue+0xae>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	fc 01       	movw	r30, r24
    1c98:	80 a1       	ldd	r24, Z+32	; 0x20
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	84 81       	ldd	r24, Z+4	; 0x04
    1ca6:	95 81       	ldd	r25, Z+5	; 0x05
    1ca8:	2d 81       	ldd	r18, Y+5	; 0x05
    1caa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 c9 2b 	call	0x5792	; 0x5792 <memcpy>
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	24 81       	ldd	r18, Z+4	; 0x04
    1cba:	35 81       	ldd	r19, Z+5	; 0x05
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	80 a1       	ldd	r24, Z+32	; 0x20
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	28 0f       	add	r18, r24
    1cca:	39 1f       	adc	r19, r25
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	24 83       	std	Z+4, r18	; 0x04
    1cd4:	35 83       	std	Z+5, r19	; 0x05
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	fc 01       	movw	r30, r24
    1cdc:	24 81       	ldd	r18, Z+4	; 0x04
    1cde:	35 81       	ldd	r19, Z+5	; 0x05
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <prvCopyDataToQueue+0x98>
    1cf0:	5b c0       	rjmp	.+182    	; 0x1da8 <prvCopyDataToQueue+0x14e>
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	fc 01       	movw	r30, r24
    1d02:	24 83       	std	Z+4, r18	; 0x04
    1d04:	35 83       	std	Z+5, r19	; 0x05
    1d06:	50 c0       	rjmp	.+160    	; 0x1da8 <prvCopyDataToQueue+0x14e>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	80 a1       	ldd	r24, Z+32	; 0x20
    1d10:	48 2f       	mov	r20, r24
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	fc 01       	movw	r30, r24
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	97 81       	ldd	r25, Z+7	; 0x07
    1d1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d20:	3e 81       	ldd	r19, Y+6	; 0x06
    1d22:	b9 01       	movw	r22, r18
    1d24:	0e 94 c9 2b 	call	0x5792	; 0x5792 <memcpy>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	26 81       	ldd	r18, Z+6	; 0x06
    1d30:	37 81       	ldd	r19, Z+7	; 0x07
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	fc 01       	movw	r30, r24
    1d38:	80 a1       	ldd	r24, Z+32	; 0x20
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	91 95       	neg	r25
    1d40:	81 95       	neg	r24
    1d42:	91 09       	sbc	r25, r1
    1d44:	28 0f       	add	r18, r24
    1d46:	39 1f       	adc	r19, r25
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	26 83       	std	Z+6, r18	; 0x06
    1d50:	37 83       	std	Z+7, r19	; 0x07
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	fc 01       	movw	r30, r24
    1d58:	26 81       	ldd	r18, Z+6	; 0x06
    1d5a:	37 81       	ldd	r19, Z+7	; 0x07
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	fc 01       	movw	r30, r24
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	28 17       	cp	r18, r24
    1d68:	39 07       	cpc	r19, r25
    1d6a:	a8 f4       	brcc	.+42     	; 0x1d96 <prvCopyDataToQueue+0x13c>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	fc 01       	movw	r30, r24
    1d72:	22 81       	ldd	r18, Z+2	; 0x02
    1d74:	33 81       	ldd	r19, Z+3	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	80 a1       	ldd	r24, Z+32	; 0x20
    1d7e:	88 2f       	mov	r24, r24
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	91 95       	neg	r25
    1d84:	81 95       	neg	r24
    1d86:	91 09       	sbc	r25, r1
    1d88:	28 0f       	add	r18, r24
    1d8a:	39 1f       	adc	r19, r25
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	fc 01       	movw	r30, r24
    1d92:	26 83       	std	Z+6, r18	; 0x06
    1d94:	37 83       	std	Z+7, r19	; 0x07
    1d96:	8f 81       	ldd	r24, Y+7	; 0x07
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	31 f4       	brne	.+12     	; 0x1da8 <prvCopyDataToQueue+0x14e>
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	88 23       	and	r24, r24
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <prvCopyDataToQueue+0x14e>
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	21 e0       	ldi	r18, 0x01	; 1
    1dac:	28 0f       	add	r18, r24
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	fc 01       	movw	r30, r24
    1db4:	26 8f       	std	Z+30, r18	; 0x1e
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	27 96       	adiw	r28, 0x07	; 7
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <prvCopyDataFromQueue>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <prvCopyDataFromQueue+0x6>
    1dca:	1f 92       	push	r1
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	6b 83       	std	Y+3, r22	; 0x03
    1dd6:	7c 83       	std	Y+4, r23	; 0x04
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	fc 01       	movw	r30, r24
    1dde:	80 a1       	ldd	r24, Z+32	; 0x20
    1de0:	88 23       	and	r24, r24
    1de2:	c9 f1       	breq	.+114    	; 0x1e56 <prvCopyDataFromQueue+0x92>
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	26 81       	ldd	r18, Z+6	; 0x06
    1dec:	37 81       	ldd	r19, Z+7	; 0x07
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 a1       	ldd	r24, Z+32	; 0x20
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	28 0f       	add	r18, r24
    1dfc:	39 1f       	adc	r19, r25
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	fc 01       	movw	r30, r24
    1e04:	26 83       	std	Z+6, r18	; 0x06
    1e06:	37 83       	std	Z+7, r19	; 0x07
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	26 81       	ldd	r18, Z+6	; 0x06
    1e10:	37 81       	ldd	r19, Z+7	; 0x07
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	fc 01       	movw	r30, r24
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	28 17       	cp	r18, r24
    1e1e:	39 07       	cpc	r19, r25
    1e20:	50 f0       	brcs	.+20     	; 0x1e36 <prvCopyDataFromQueue+0x72>
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 81       	ld	r18, Z
    1e2a:	31 81       	ldd	r19, Z+1	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	fc 01       	movw	r30, r24
    1e32:	26 83       	std	Z+6, r18	; 0x06
    1e34:	37 83       	std	Z+7, r19	; 0x07
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	80 a1       	ldd	r24, Z+32	; 0x20
    1e3e:	48 2f       	mov	r20, r24
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	fc 01       	movw	r30, r24
    1e48:	26 81       	ldd	r18, Z+6	; 0x06
    1e4a:	37 81       	ldd	r19, Z+7	; 0x07
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	b9 01       	movw	r22, r18
    1e52:	0e 94 c9 2b 	call	0x5792	; 0x5792 <memcpy>
    1e56:	00 00       	nop
    1e58:	24 96       	adiw	r28, 0x04	; 4
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <prvUnlockQueue>:
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <prvUnlockQueue+0x6>
    1e6a:	1f 92       	push	r1
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e78:	ff 93       	push	r31
    1e7a:	f8 7f       	andi	r31, 0xF8	; 248
    1e7c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	fc 01       	movw	r30, r24
    1e86:	82 a1       	ldd	r24, Z+34	; 0x22
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	12 c0       	rjmp	.+36     	; 0x1eb0 <prvUnlockQueue+0x4c>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	fc 01       	movw	r30, r24
    1e92:	83 89       	ldd	r24, Z+19	; 0x13
    1e94:	88 23       	and	r24, r24
    1e96:	81 f0       	breq	.+32     	; 0x1eb8 <prvUnlockQueue+0x54>
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	43 96       	adiw	r24, 0x13	; 19
    1e9e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    1ea2:	88 23       	and	r24, r24
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <prvUnlockQueue+0x46>
    1ea6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vTaskMissedYield>
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	81 50       	subi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	18 16       	cp	r1, r24
    1eb4:	5c f3       	brlt	.-42     	; 0x1e8c <prvUnlockQueue+0x28>
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <prvUnlockQueue+0x56>
    1eb8:	00 00       	nop
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	2f ef       	ldi	r18, 0xFF	; 255
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	22 a3       	std	Z+34, r18	; 0x22
    1ec4:	ff 91       	pop	r31
    1ec6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eca:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ece:	ff 93       	push	r31
    1ed0:	f8 7f       	andi	r31, 0xF8	; 248
    1ed2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	fc 01       	movw	r30, r24
    1edc:	81 a1       	ldd	r24, Z+33	; 0x21
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	12 c0       	rjmp	.+36     	; 0x1f06 <prvUnlockQueue+0xa2>
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	80 85       	ldd	r24, Z+8	; 0x08
    1eea:	88 23       	and	r24, r24
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <prvUnlockQueue+0xaa>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	08 96       	adiw	r24, 0x08	; 8
    1ef4:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <xTaskRemoveFromEventList>
    1ef8:	88 23       	and	r24, r24
    1efa:	11 f0       	breq	.+4      	; 0x1f00 <prvUnlockQueue+0x9c>
    1efc:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vTaskMissedYield>
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	81 50       	subi	r24, 0x01	; 1
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	18 16       	cp	r1, r24
    1f0a:	5c f3       	brlt	.-42     	; 0x1ee2 <prvUnlockQueue+0x7e>
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <prvUnlockQueue+0xac>
    1f0e:	00 00       	nop
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	2f ef       	ldi	r18, 0xFF	; 255
    1f16:	fc 01       	movw	r30, r24
    1f18:	21 a3       	std	Z+33, r18	; 0x21
    1f1a:	ff 91       	pop	r31
    1f1c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f20:	00 00       	nop
    1f22:	24 96       	adiw	r28, 0x04	; 4
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	08 95       	ret

00001f2e <prvIsQueueEmpty>:
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <prvIsQueueEmpty+0x6>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
    1f3c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f40:	ff 93       	push	r31
    1f42:	f8 7f       	andi	r31, 0xF8	; 248
    1f44:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f50:	88 23       	and	r24, r24
    1f52:	19 f4       	brne	.+6      	; 0x1f5a <prvIsQueueEmpty+0x2c>
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <prvIsQueueEmpty+0x2e>
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	ff 91       	pop	r31
    1f5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	23 96       	adiw	r28, 0x03	; 3
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <prvIsQueueFull>:
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <prvIsQueueFull+0x6>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f82:	ff 93       	push	r31
    1f84:	f8 7f       	andi	r31, 0xF8	; 248
    1f86:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	fc 01       	movw	r30, r24
    1f90:	26 8d       	ldd	r18, Z+30	; 0x1e
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	fc 01       	movw	r30, r24
    1f98:	87 8d       	ldd	r24, Z+31	; 0x1f
    1f9a:	28 17       	cp	r18, r24
    1f9c:	19 f4       	brne	.+6      	; 0x1fa4 <prvIsQueueFull+0x34>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <prvIsQueueFull+0x36>
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	ff 91       	pop	r31
    1fa8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	23 96       	adiw	r28, 0x03	; 3
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	29 97       	sbiw	r28, 0x09	; 9
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	4d 83       	std	Y+5, r20	; 0x05
    1fce:	5e 83       	std	Y+6, r21	; 0x06
    1fd0:	6f 83       	std	Y+7, r22	; 0x07
    1fd2:	78 87       	std	Y+8, r23	; 0x08
    1fd4:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1fde:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fe2:	ff 93       	push	r31
    1fe4:	f8 7f       	andi	r31, 0xF8	; 248
    1fe6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	fc 01       	movw	r30, r24
    1ff0:	81 a1       	ldd	r24, Z+33	; 0x21
    1ff2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff4:	21 f4       	brne	.+8      	; 0x1ffe <vQueueWaitForMessageRestricted+0x44>
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	11 a2       	std	Z+33, r1	; 0x21
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	fc 01       	movw	r30, r24
    2004:	82 a1       	ldd	r24, Z+34	; 0x22
    2006:	8f 3f       	cpi	r24, 0xFF	; 255
    2008:	21 f4       	brne	.+8      	; 0x2012 <vQueueWaitForMessageRestricted+0x58>
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	fc 01       	movw	r30, r24
    2010:	12 a2       	std	Z+34, r1	; 0x22
    2012:	ff 91       	pop	r31
    2014:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	fc 01       	movw	r30, r24
    201e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2020:	88 23       	and	r24, r24
    2022:	71 f4       	brne	.+28     	; 0x2040 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	fc 01       	movw	r30, r24
    202a:	73 96       	adiw	r30, 0x13	; 19
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	af 81       	ldd	r26, Y+7	; 0x07
    2032:	b8 85       	ldd	r27, Y+8	; 0x08
    2034:	29 85       	ldd	r18, Y+9	; 0x09
    2036:	ac 01       	movw	r20, r24
    2038:	bd 01       	movw	r22, r26
    203a:	cf 01       	movw	r24, r30
    203c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <prvUnlockQueue>
	}
    2048:	00 00       	nop
    204a:	29 96       	adiw	r28, 0x09	; 9
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2056:	8f 92       	push	r8
    2058:	9f 92       	push	r9
    205a:	af 92       	push	r10
    205c:	bf 92       	push	r11
    205e:	cf 92       	push	r12
    2060:	df 92       	push	r13
    2062:	ef 92       	push	r14
    2064:	ff 92       	push	r15
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	60 97       	sbiw	r28, 0x10	; 16
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	8e 83       	std	Y+6, r24	; 0x06
    207a:	9f 83       	std	Y+7, r25	; 0x07
    207c:	68 87       	std	Y+8, r22	; 0x08
    207e:	79 87       	std	Y+9, r23	; 0x09
    2080:	4a 87       	std	Y+10, r20	; 0x0a
    2082:	5b 87       	std	Y+11, r21	; 0x0b
    2084:	2c 87       	std	Y+12, r18	; 0x0c
    2086:	3d 87       	std	Y+13, r19	; 0x0d
    2088:	0e 87       	std	Y+14, r16	; 0x0e
    208a:	ef 86       	std	Y+15, r14	; 0x0f
    208c:	f8 8a       	std	Y+16, r15	; 0x10
    208e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2090:	9b 85       	ldd	r25, Y+11	; 0x0b
    2092:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pvPortMalloc>
    2096:	8c 83       	std	Y+4, r24	; 0x04
    2098:	9d 83       	std	Y+5, r25	; 0x05
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	89 2b       	or	r24, r25
    20a0:	b9 f0       	breq	.+46     	; 0x20d0 <xTaskCreate+0x7a>
    20a2:	8c e2       	ldi	r24, 0x2C	; 44
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pvPortMalloc>
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	89 2b       	or	r24, r25
    20b4:	41 f0       	breq	.+16     	; 0x20c6 <xTaskCreate+0x70>
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	fc 01       	movw	r30, r24
    20c0:	23 8f       	std	Z+27, r18	; 0x1b
    20c2:	34 8f       	std	Z+28, r19	; 0x1c
    20c4:	07 c0       	rjmp	.+14     	; 0x20d4 <xTaskCreate+0x7e>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vPortFree>
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <xTaskCreate+0x7e>
    20d0:	19 82       	std	Y+1, r1	; 0x01
    20d2:	1a 82       	std	Y+2, r1	; 0x02
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	89 2b       	or	r24, r25
    20da:	09 f1       	breq	.+66     	; 0x211e <xTaskCreate+0xc8>
    20dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20de:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e0:	cc 01       	movw	r24, r24
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	09 81       	ldd	r16, Y+1	; 0x01
    20e8:	1a 81       	ldd	r17, Y+2	; 0x02
    20ea:	4f 85       	ldd	r20, Y+15	; 0x0f
    20ec:	58 89       	ldd	r21, Y+16	; 0x10
    20ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    20f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    20f2:	68 85       	ldd	r22, Y+8	; 0x08
    20f4:	79 85       	ldd	r23, Y+9	; 0x09
    20f6:	ee 81       	ldd	r30, Y+6	; 0x06
    20f8:	ff 81       	ldd	r31, Y+7	; 0x07
    20fa:	81 2c       	mov	r8, r1
    20fc:	91 2c       	mov	r9, r1
    20fe:	58 01       	movw	r10, r16
    2100:	6a 01       	movw	r12, r20
    2102:	ee 84       	ldd	r14, Y+14	; 0x0e
    2104:	89 01       	movw	r16, r18
    2106:	9c 01       	movw	r18, r24
    2108:	ad 01       	movw	r20, r26
    210a:	cf 01       	movw	r24, r30
    210c:	0e 94 a2 10 	call	0x2144	; 0x2144 <prvInitialiseNewTask>
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	0e 94 78 11 	call	0x22f0	; 0x22f0 <prvAddNewTaskToReadyList>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <xTaskCreate+0xcc>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	8b 83       	std	Y+3, r24	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	60 96       	adiw	r28, 0x10	; 16
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	cf 90       	pop	r12
    213a:	bf 90       	pop	r11
    213c:	af 90       	pop	r10
    213e:	9f 90       	pop	r9
    2140:	8f 90       	pop	r8
    2142:	08 95       	ret

00002144 <prvInitialiseNewTask>:
    2144:	8f 92       	push	r8
    2146:	9f 92       	push	r9
    2148:	af 92       	push	r10
    214a:	bf 92       	push	r11
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	64 97       	sbiw	r28, 0x14	; 20
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	8c 83       	std	Y+4, r24	; 0x04
    2168:	9d 83       	std	Y+5, r25	; 0x05
    216a:	6e 83       	std	Y+6, r22	; 0x06
    216c:	7f 83       	std	Y+7, r23	; 0x07
    216e:	28 87       	std	Y+8, r18	; 0x08
    2170:	39 87       	std	Y+9, r19	; 0x09
    2172:	4a 87       	std	Y+10, r20	; 0x0a
    2174:	5b 87       	std	Y+11, r21	; 0x0b
    2176:	0c 87       	std	Y+12, r16	; 0x0c
    2178:	1d 87       	std	Y+13, r17	; 0x0d
    217a:	ee 86       	std	Y+14, r14	; 0x0e
    217c:	cf 86       	std	Y+15, r12	; 0x0f
    217e:	d8 8a       	std	Y+16, r13	; 0x10
    2180:	a9 8a       	std	Y+17, r10	; 0x11
    2182:	ba 8a       	std	Y+18, r11	; 0x12
    2184:	8b 8a       	std	Y+19, r8	; 0x13
    2186:	9c 8a       	std	Y+20, r9	; 0x14
    2188:	28 85       	ldd	r18, Y+8	; 0x08
    218a:	39 85       	ldd	r19, Y+9	; 0x09
    218c:	89 89       	ldd	r24, Y+17	; 0x11
    218e:	9a 89       	ldd	r25, Y+18	; 0x12
    2190:	fc 01       	movw	r30, r24
    2192:	83 8d       	ldd	r24, Z+27	; 0x1b
    2194:	94 8d       	ldd	r25, Z+28	; 0x1c
    2196:	a9 01       	movw	r20, r18
    2198:	65 ea       	ldi	r22, 0xA5	; 165
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	0e 94 d2 2b 	call	0x57a4	; 0x57a4 <memset>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	9a 89       	ldd	r25, Y+18	; 0x12
    21a4:	fc 01       	movw	r30, r24
    21a6:	23 8d       	ldd	r18, Z+27	; 0x1b
    21a8:	34 8d       	ldd	r19, Z+28	; 0x1c
    21aa:	88 85       	ldd	r24, Y+8	; 0x08
    21ac:	99 85       	ldd	r25, Y+9	; 0x09
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	82 0f       	add	r24, r18
    21b2:	93 1f       	adc	r25, r19
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	9b 83       	std	Y+3, r25	; 0x03
    21b8:	19 82       	std	Y+1, r1	; 0x01
    21ba:	21 c0       	rjmp	.+66     	; 0x21fe <prvInitialiseNewTask+0xba>
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	29 81       	ldd	r18, Y+1	; 0x01
    21c4:	22 2f       	mov	r18, r18
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4e 81       	ldd	r20, Y+6	; 0x06
    21ca:	5f 81       	ldd	r21, Y+7	; 0x07
    21cc:	24 0f       	add	r18, r20
    21ce:	35 1f       	adc	r19, r21
    21d0:	f9 01       	movw	r30, r18
    21d2:	40 81       	ld	r20, Z
    21d4:	29 89       	ldd	r18, Y+17	; 0x11
    21d6:	3a 89       	ldd	r19, Y+18	; 0x12
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	4d 96       	adiw	r24, 0x1d	; 29
    21de:	fc 01       	movw	r30, r24
    21e0:	40 83       	st	Z, r20
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	2e 81       	ldd	r18, Y+6	; 0x06
    21ea:	3f 81       	ldd	r19, Y+7	; 0x07
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	fc 01       	movw	r30, r24
    21f2:	80 81       	ld	r24, Z
    21f4:	88 23       	and	r24, r24
    21f6:	39 f0       	breq	.+14     	; 0x2206 <prvInitialiseNewTask+0xc2>
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	88 30       	cpi	r24, 0x08	; 8
    2202:	e0 f2       	brcs	.-72     	; 0x21bc <prvInitialiseNewTask+0x78>
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <prvInitialiseNewTask+0xc4>
    2206:	00 00       	nop
    2208:	89 89       	ldd	r24, Y+17	; 0x11
    220a:	9a 89       	ldd	r25, Y+18	; 0x12
    220c:	fc 01       	movw	r30, r24
    220e:	14 a2       	std	Z+36, r1	; 0x24
    2210:	8e 85       	ldd	r24, Y+14	; 0x0e
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	10 f0       	brcs	.+4      	; 0x221a <prvInitialiseNewTask+0xd6>
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	8e 87       	std	Y+14, r24	; 0x0e
    221a:	89 89       	ldd	r24, Y+17	; 0x11
    221c:	9a 89       	ldd	r25, Y+18	; 0x12
    221e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2220:	fc 01       	movw	r30, r24
    2222:	22 8f       	std	Z+26, r18	; 0x1a
    2224:	89 89       	ldd	r24, Y+17	; 0x11
    2226:	9a 89       	ldd	r25, Y+18	; 0x12
    2228:	02 96       	adiw	r24, 0x02	; 2
    222a:	0e 94 67 06 	call	0xcce	; 0xcce <vListInitialiseItem>
    222e:	89 89       	ldd	r24, Y+17	; 0x11
    2230:	9a 89       	ldd	r25, Y+18	; 0x12
    2232:	0e 96       	adiw	r24, 0x0e	; 14
    2234:	0e 94 67 06 	call	0xcce	; 0xcce <vListInitialiseItem>
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	9a 89       	ldd	r25, Y+18	; 0x12
    223c:	29 89       	ldd	r18, Y+17	; 0x11
    223e:	3a 89       	ldd	r19, Y+18	; 0x12
    2240:	fc 01       	movw	r30, r24
    2242:	22 87       	std	Z+10, r18	; 0x0a
    2244:	33 87       	std	Z+11, r19	; 0x0b
    2246:	8e 85       	ldd	r24, Y+14	; 0x0e
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	a0 e0       	ldi	r26, 0x00	; 0
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	24 e0       	ldi	r18, 0x04	; 4
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	79 01       	movw	r14, r18
    225a:	8a 01       	movw	r16, r20
    225c:	e8 1a       	sub	r14, r24
    225e:	f9 0a       	sbc	r15, r25
    2260:	0a 0b       	sbc	r16, r26
    2262:	1b 0b       	sbc	r17, r27
    2264:	d8 01       	movw	r26, r16
    2266:	c7 01       	movw	r24, r14
    2268:	29 89       	ldd	r18, Y+17	; 0x11
    226a:	3a 89       	ldd	r19, Y+18	; 0x12
    226c:	f9 01       	movw	r30, r18
    226e:	86 87       	std	Z+14, r24	; 0x0e
    2270:	97 87       	std	Z+15, r25	; 0x0f
    2272:	a0 8b       	std	Z+16, r26	; 0x10
    2274:	b1 8b       	std	Z+17, r27	; 0x11
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	9a 89       	ldd	r25, Y+18	; 0x12
    227a:	29 89       	ldd	r18, Y+17	; 0x11
    227c:	3a 89       	ldd	r19, Y+18	; 0x12
    227e:	fc 01       	movw	r30, r24
    2280:	26 8b       	std	Z+22, r18	; 0x16
    2282:	37 8b       	std	Z+23, r19	; 0x17
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	fc 01       	movw	r30, r24
    228a:	17 a2       	std	Z+39, r1	; 0x27
    228c:	10 a6       	std	Z+40, r1	; 0x28
    228e:	11 a6       	std	Z+41, r1	; 0x29
    2290:	12 a6       	std	Z+42, r1	; 0x2a
    2292:	89 89       	ldd	r24, Y+17	; 0x11
    2294:	9a 89       	ldd	r25, Y+18	; 0x12
    2296:	fc 01       	movw	r30, r24
    2298:	13 a6       	std	Z+43, r1	; 0x2b
    229a:	4c 85       	ldd	r20, Y+12	; 0x0c
    229c:	5d 85       	ldd	r21, Y+13	; 0x0d
    229e:	2c 81       	ldd	r18, Y+4	; 0x04
    22a0:	3d 81       	ldd	r19, Y+5	; 0x05
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	b9 01       	movw	r22, r18
    22a8:	0e 94 b3 07 	call	0xf66	; 0xf66 <pxPortInitialiseStack>
    22ac:	9c 01       	movw	r18, r24
    22ae:	89 89       	ldd	r24, Y+17	; 0x11
    22b0:	9a 89       	ldd	r25, Y+18	; 0x12
    22b2:	fc 01       	movw	r30, r24
    22b4:	20 83       	st	Z, r18
    22b6:	31 83       	std	Z+1, r19	; 0x01
    22b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ba:	98 89       	ldd	r25, Y+16	; 0x10
    22bc:	89 2b       	or	r24, r25
    22be:	39 f0       	breq	.+14     	; 0x22ce <prvInitialiseNewTask+0x18a>
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	29 89       	ldd	r18, Y+17	; 0x11
    22c6:	3a 89       	ldd	r19, Y+18	; 0x12
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
    22cc:	31 83       	std	Z+1, r19	; 0x01
    22ce:	00 00       	nop
    22d0:	64 96       	adiw	r28, 0x14	; 20
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	bf 90       	pop	r11
    22e8:	af 90       	pop	r10
    22ea:	9f 90       	pop	r9
    22ec:	8f 90       	pop	r8
    22ee:	08 95       	ret

000022f0 <prvAddNewTaskToReadyList>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	1f 92       	push	r1
    22f6:	1f 92       	push	r1
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2304:	ff 93       	push	r31
    2306:	f8 7f       	andi	r31, 0xF8	; 248
    2308:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    230c:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <uxCurrentNumberOfTasks>
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	80 93 be 2c 	sts	0x2CBE, r24	; 0x802cbe <uxCurrentNumberOfTasks>
    2316:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    231a:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    231e:	89 2b       	or	r24, r25
    2320:	69 f4       	brne	.+26     	; 0x233c <prvAddNewTaskToReadyList+0x4c>
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <pxCurrentTCB>
    232a:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <pxCurrentTCB+0x1>
    232e:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <uxCurrentNumberOfTasks>
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	c9 f4       	brne	.+50     	; 0x2368 <prvAddNewTaskToReadyList+0x78>
    2336:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <prvInitialiseTaskLists>
    233a:	16 c0       	rjmp	.+44     	; 0x2368 <prvAddNewTaskToReadyList+0x78>
    233c:	80 91 c4 2c 	lds	r24, 0x2CC4	; 0x802cc4 <xSchedulerRunning>
    2340:	88 23       	and	r24, r24
    2342:	91 f4       	brne	.+36     	; 0x2368 <prvAddNewTaskToReadyList+0x78>
    2344:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2348:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    234c:	fc 01       	movw	r30, r24
    234e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	fc 01       	movw	r30, r24
    2356:	82 8d       	ldd	r24, Z+26	; 0x1a
    2358:	82 17       	cp	r24, r18
    235a:	30 f0       	brcs	.+12     	; 0x2368 <prvAddNewTaskToReadyList+0x78>
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <pxCurrentTCB>
    2364:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <pxCurrentTCB+0x1>
    2368:	80 91 c8 2c 	lds	r24, 0x2CC8	; 0x802cc8 <uxTaskNumber>
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	80 93 c8 2c 	sts	0x2CC8, r24	; 0x802cc8 <uxTaskNumber>
    2372:	20 91 c8 2c 	lds	r18, 0x2CC8	; 0x802cc8 <uxTaskNumber>
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	fc 01       	movw	r30, r24
    237c:	25 a3       	std	Z+37, r18	; 0x25
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	fc 01       	movw	r30, r24
    2384:	92 8d       	ldd	r25, Z+26	; 0x1a
    2386:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    238a:	89 17       	cp	r24, r25
    238c:	30 f4       	brcc	.+12     	; 0x239a <prvAddNewTaskToReadyList+0xaa>
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	fc 01       	movw	r30, r24
    2394:	82 8d       	ldd	r24, Z+26	; 0x1a
    2396:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	ac 01       	movw	r20, r24
    23a0:	4e 5f       	subi	r20, 0xFE	; 254
    23a2:	5f 4f       	sbci	r21, 0xFF	; 255
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	fc 01       	movw	r30, r24
    23aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	6b e0       	ldi	r22, 0x0B	; 11
    23b2:	62 9f       	mul	r22, r18
    23b4:	c0 01       	movw	r24, r0
    23b6:	63 9f       	mul	r22, r19
    23b8:	90 0d       	add	r25, r0
    23ba:	11 24       	eor	r1, r1
    23bc:	8e 59       	subi	r24, 0x9E	; 158
    23be:	93 4d       	sbci	r25, 0xD3	; 211
    23c0:	ba 01       	movw	r22, r20
    23c2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    23c6:	ff 91       	pop	r31
    23c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    23cc:	80 91 c4 2c 	lds	r24, 0x2CC4	; 0x802cc4 <xSchedulerRunning>
    23d0:	88 23       	and	r24, r24
    23d2:	71 f0       	breq	.+28     	; 0x23f0 <prvAddNewTaskToReadyList+0x100>
    23d4:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    23d8:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    23dc:	fc 01       	movw	r30, r24
    23de:	22 8d       	ldd	r18, Z+26	; 0x1a
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	fc 01       	movw	r30, r24
    23e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e8:	28 17       	cp	r18, r24
    23ea:	10 f4       	brcc	.+4      	; 0x23f0 <prvAddNewTaskToReadyList+0x100>
    23ec:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    23f0:	00 00       	nop
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <vTaskDelay>:
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	25 97       	sbiw	r28, 0x05	; 5
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	6a 83       	std	Y+2, r22	; 0x02
    240c:	7b 83       	std	Y+3, r23	; 0x03
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9d 83       	std	Y+5, r25	; 0x05
    2412:	19 82       	std	Y+1, r1	; 0x01
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	9b 81       	ldd	r25, Y+3	; 0x03
    2418:	ac 81       	ldd	r26, Y+4	; 0x04
    241a:	bd 81       	ldd	r27, Y+5	; 0x05
    241c:	89 2b       	or	r24, r25
    241e:	8a 2b       	or	r24, r26
    2420:	8b 2b       	or	r24, r27
    2422:	71 f0       	breq	.+28     	; 0x2440 <vTaskDelay+0x44>
    2424:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	ac 81       	ldd	r26, Y+4	; 0x04
    242e:	bd 81       	ldd	r27, Y+5	; 0x05
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 4f 18 	call	0x309e	; 0x309e <prvAddCurrentTaskToDelayedList>
    243a:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	88 23       	and	r24, r24
    2444:	11 f4       	brne	.+4      	; 0x244a <vTaskDelay+0x4e>
    2446:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    244a:	00 00       	nop
    244c:	25 96       	adiw	r28, 0x05	; 5
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <vTaskStartScheduler>:
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	1f 92       	push	r1
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	0f 2e       	mov	r0, r31
    246a:	fd ec       	ldi	r31, 0xCD	; 205
    246c:	ef 2e       	mov	r14, r31
    246e:	fc e2       	ldi	r31, 0x2C	; 44
    2470:	ff 2e       	mov	r15, r31
    2472:	f0 2d       	mov	r31, r0
    2474:	00 e0       	ldi	r16, 0x00	; 0
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	48 ec       	ldi	r20, 0xC8	; 200
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	60 e4       	ldi	r22, 0x40	; 64
    2480:	70 e2       	ldi	r23, 0x20	; 32
    2482:	8f e5       	ldi	r24, 0x5F	; 95
    2484:	97 e1       	ldi	r25, 0x17	; 23
    2486:	0e 94 2b 10 	call	0x2056	; 0x2056 <xTaskCreate>
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	19 f4       	brne	.+6      	; 0x2498 <vTaskStartScheduler+0x40>
    2492:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <xTimerCreateTimerTask>
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	09 f5       	brne	.+66     	; 0x24e0 <vTaskStartScheduler+0x88>
    249e:	80 ea       	ldi	r24, 0xA0	; 160
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	20 ea       	ldi	r18, 0xA0	; 160
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	f9 01       	movw	r30, r18
    24a8:	22 81       	ldd	r18, Z+2	; 0x02
    24aa:	28 7f       	andi	r18, 0xF8	; 248
    24ac:	fc 01       	movw	r30, r24
    24ae:	22 83       	std	Z+2, r18	; 0x02
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	dc 01       	movw	r26, r24
    24b6:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    24ba:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    24be:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    24c2:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	80 93 c4 2c 	sts	0x2CC4, r24	; 0x802cc4 <xSchedulerRunning>
    24cc:	10 92 bf 2c 	sts	0x2CBF, r1	; 0x802cbf <xTickCount>
    24d0:	10 92 c0 2c 	sts	0x2CC0, r1	; 0x802cc0 <xTickCount+0x1>
    24d4:	10 92 c1 2c 	sts	0x2CC1, r1	; 0x802cc1 <xTickCount+0x2>
    24d8:	10 92 c2 2c 	sts	0x2CC2, r1	; 0x802cc2 <xTickCount+0x3>
    24dc:	0e 94 8c 09 	call	0x1318	; 0x1318 <xPortStartScheduler>
    24e0:	00 00       	nop
    24e2:	0f 90       	pop	r0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	08 95       	ret

000024f0 <vTaskSuspendAll>:
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    24fc:	8f 5f       	subi	r24, 0xFF	; 255
    24fe:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <uxSchedulerSuspended>
    2502:	00 00       	nop
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <xTaskResumeAll>:
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	00 d0       	rcall	.+0      	; 0x2510 <xTaskResumeAll+0x6>
    2510:	1f 92       	push	r1
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	19 82       	std	Y+1, r1	; 0x01
    2518:	1a 82       	std	Y+2, r1	; 0x02
    251a:	1b 82       	std	Y+3, r1	; 0x03
    251c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2520:	ff 93       	push	r31
    2522:	f8 7f       	andi	r31, 0xF8	; 248
    2524:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2528:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    252c:	81 50       	subi	r24, 0x01	; 1
    252e:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <uxSchedulerSuspended>
    2532:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    2536:	88 23       	and	r24, r24
    2538:	09 f0       	breq	.+2      	; 0x253c <xTaskResumeAll+0x32>
    253a:	74 c0       	rjmp	.+232    	; 0x2624 <xTaskResumeAll+0x11a>
    253c:	80 91 be 2c 	lds	r24, 0x2CBE	; 0x802cbe <uxCurrentNumberOfTasks>
    2540:	88 23       	and	r24, r24
    2542:	09 f4       	brne	.+2      	; 0x2546 <xTaskResumeAll+0x3c>
    2544:	6f c0       	rjmp	.+222    	; 0x2624 <xTaskResumeAll+0x11a>
    2546:	46 c0       	rjmp	.+140    	; 0x25d4 <xTaskResumeAll+0xca>
    2548:	80 91 af 2c 	lds	r24, 0x2CAF	; 0x802caf <xPendingReadyList+0x7>
    254c:	90 91 b0 2c 	lds	r25, 0x2CB0	; 0x802cb0 <xPendingReadyList+0x8>
    2550:	fc 01       	movw	r30, r24
    2552:	80 85       	ldd	r24, Z+8	; 0x08
    2554:	91 85       	ldd	r25, Z+9	; 0x09
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	0e 96       	adiw	r24, 0x0e	; 14
    2560:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	02 96       	adiw	r24, 0x02	; 2
    256a:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	fc 01       	movw	r30, r24
    2574:	92 8d       	ldd	r25, Z+26	; 0x1a
    2576:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    257a:	89 17       	cp	r24, r25
    257c:	30 f4       	brcc	.+12     	; 0x258a <xTaskResumeAll+0x80>
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	fc 01       	movw	r30, r24
    2584:	82 8d       	ldd	r24, Z+26	; 0x1a
    2586:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	ac 01       	movw	r20, r24
    2590:	4e 5f       	subi	r20, 0xFE	; 254
    2592:	5f 4f       	sbci	r21, 0xFF	; 255
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	fc 01       	movw	r30, r24
    259a:	82 8d       	ldd	r24, Z+26	; 0x1a
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	6b e0       	ldi	r22, 0x0B	; 11
    25a2:	62 9f       	mul	r22, r18
    25a4:	c0 01       	movw	r24, r0
    25a6:	63 9f       	mul	r22, r19
    25a8:	90 0d       	add	r25, r0
    25aa:	11 24       	eor	r1, r1
    25ac:	8e 59       	subi	r24, 0x9E	; 158
    25ae:	93 4d       	sbci	r25, 0xD3	; 211
    25b0:	ba 01       	movw	r22, r20
    25b2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	fc 01       	movw	r30, r24
    25bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    25be:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    25c2:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    25c6:	fc 01       	movw	r30, r24
    25c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ca:	28 17       	cp	r18, r24
    25cc:	18 f0       	brcs	.+6      	; 0x25d4 <xTaskResumeAll+0xca>
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    25d4:	80 91 a8 2c 	lds	r24, 0x2CA8	; 0x802ca8 <xPendingReadyList>
    25d8:	88 23       	and	r24, r24
    25da:	09 f0       	breq	.+2      	; 0x25de <xTaskResumeAll+0xd4>
    25dc:	b5 cf       	rjmp	.-150    	; 0x2548 <xTaskResumeAll+0x3e>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	89 2b       	or	r24, r25
    25e4:	11 f0       	breq	.+4      	; 0x25ea <xTaskResumeAll+0xe0>
    25e6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <prvResetNextTaskUnblockTime>
    25ea:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <uxPendedTicks>
    25ee:	8c 83       	std	Y+4, r24	; 0x04
    25f0:	8c 81       	ldd	r24, Y+4	; 0x04
    25f2:	88 23       	and	r24, r24
    25f4:	79 f0       	breq	.+30     	; 0x2614 <xTaskResumeAll+0x10a>
    25f6:	0e 94 43 13 	call	0x2686	; 0x2686 <xTaskIncrementTick>
    25fa:	88 23       	and	r24, r24
    25fc:	19 f0       	breq	.+6      	; 0x2604 <xTaskResumeAll+0xfa>
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	81 50       	subi	r24, 0x01	; 1
    2608:	8c 83       	std	Y+4, r24	; 0x04
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	88 23       	and	r24, r24
    260e:	99 f7       	brne	.-26     	; 0x25f6 <xTaskResumeAll+0xec>
    2610:	10 92 c5 2c 	sts	0x2CC5, r1	; 0x802cc5 <uxPendedTicks>
    2614:	80 91 c6 2c 	lds	r24, 0x2CC6	; 0x802cc6 <xYieldPending>
    2618:	88 23       	and	r24, r24
    261a:	21 f0       	breq	.+8      	; 0x2624 <xTaskResumeAll+0x11a>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    2624:	ff 91       	pop	r31
    2626:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	24 96       	adiw	r28, 0x04	; 4
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <xTaskGetTickCount>:
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	00 d0       	rcall	.+0      	; 0x263e <xTaskGetTickCount+0x6>
    263e:	1f 92       	push	r1
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2648:	ff 93       	push	r31
    264a:	f8 7f       	andi	r31, 0xF8	; 248
    264c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2650:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <xTickCount>
    2654:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <xTickCount+0x1>
    2658:	a0 91 c1 2c 	lds	r26, 0x2CC1	; 0x802cc1 <xTickCount+0x2>
    265c:	b0 91 c2 2c 	lds	r27, 0x2CC2	; 0x802cc2 <xTickCount+0x3>
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	ab 83       	std	Y+3, r26	; 0x03
    2666:	bc 83       	std	Y+4, r27	; 0x04
    2668:	ff 91       	pop	r31
    266a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	9a 81       	ldd	r25, Y+2	; 0x02
    2672:	ab 81       	ldd	r26, Y+3	; 0x03
    2674:	bc 81       	ldd	r27, Y+4	; 0x04
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	24 96       	adiw	r28, 0x04	; 4
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	08 95       	ret

00002686 <xTaskIncrementTick>:
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	2d 97       	sbiw	r28, 0x0d	; 13
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	19 82       	std	Y+1, r1	; 0x01
    2696:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    269a:	88 23       	and	r24, r24
    269c:	09 f0       	breq	.+2      	; 0x26a0 <xTaskIncrementTick+0x1a>
    269e:	f1 c0       	rjmp	.+482    	; 0x2882 <xTaskIncrementTick+0x1fc>
    26a0:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <xTickCount>
    26a4:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <xTickCount+0x1>
    26a8:	a0 91 c1 2c 	lds	r26, 0x2CC1	; 0x802cc1 <xTickCount+0x2>
    26ac:	b0 91 c2 2c 	lds	r27, 0x2CC2	; 0x802cc2 <xTickCount+0x3>
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	a1 1d       	adc	r26, r1
    26b4:	b1 1d       	adc	r27, r1
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	ac 83       	std	Y+4, r26	; 0x04
    26bc:	bd 83       	std	Y+5, r27	; 0x05
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	ac 81       	ldd	r26, Y+4	; 0x04
    26c4:	bd 81       	ldd	r27, Y+5	; 0x05
    26c6:	80 93 bf 2c 	sts	0x2CBF, r24	; 0x802cbf <xTickCount>
    26ca:	90 93 c0 2c 	sts	0x2CC0, r25	; 0x802cc0 <xTickCount+0x1>
    26ce:	a0 93 c1 2c 	sts	0x2CC1, r26	; 0x802cc1 <xTickCount+0x2>
    26d2:	b0 93 c2 2c 	sts	0x2CC2, r27	; 0x802cc2 <xTickCount+0x3>
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	ac 81       	ldd	r26, Y+4	; 0x04
    26dc:	bd 81       	ldd	r27, Y+5	; 0x05
    26de:	89 2b       	or	r24, r25
    26e0:	8a 2b       	or	r24, r26
    26e2:	8b 2b       	or	r24, r27
    26e4:	d9 f4       	brne	.+54     	; 0x271c <xTaskIncrementTick+0x96>
    26e6:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    26ea:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    26ee:	8e 83       	std	Y+6, r24	; 0x06
    26f0:	9f 83       	std	Y+7, r25	; 0x07
    26f2:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxOverflowDelayedTaskList>
    26f6:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxOverflowDelayedTaskList+0x1>
    26fa:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <pxDelayedTaskList>
    26fe:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <pxDelayedTaskList+0x1>
    2702:	8e 81       	ldd	r24, Y+6	; 0x06
    2704:	9f 81       	ldd	r25, Y+7	; 0x07
    2706:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxOverflowDelayedTaskList>
    270a:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxOverflowDelayedTaskList+0x1>
    270e:	80 91 c7 2c 	lds	r24, 0x2CC7	; 0x802cc7 <xNumOfOverflows>
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	80 93 c7 2c 	sts	0x2CC7, r24	; 0x802cc7 <xNumOfOverflows>
    2718:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <prvResetNextTaskUnblockTime>
    271c:	80 91 c9 2c 	lds	r24, 0x2CC9	; 0x802cc9 <xNextTaskUnblockTime>
    2720:	90 91 ca 2c 	lds	r25, 0x2CCA	; 0x802cca <xNextTaskUnblockTime+0x1>
    2724:	a0 91 cb 2c 	lds	r26, 0x2CCB	; 0x802ccb <xNextTaskUnblockTime+0x2>
    2728:	b0 91 cc 2c 	lds	r27, 0x2CCC	; 0x802ccc <xNextTaskUnblockTime+0x3>
    272c:	2a 81       	ldd	r18, Y+2	; 0x02
    272e:	3b 81       	ldd	r19, Y+3	; 0x03
    2730:	4c 81       	ldd	r20, Y+4	; 0x04
    2732:	5d 81       	ldd	r21, Y+5	; 0x05
    2734:	28 17       	cp	r18, r24
    2736:	39 07       	cpc	r19, r25
    2738:	4a 07       	cpc	r20, r26
    273a:	5b 07       	cpc	r21, r27
    273c:	08 f4       	brcc	.+2      	; 0x2740 <xTaskIncrementTick+0xba>
    273e:	8a c0       	rjmp	.+276    	; 0x2854 <xTaskIncrementTick+0x1ce>
    2740:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    2744:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    2748:	fc 01       	movw	r30, r24
    274a:	80 81       	ld	r24, Z
    274c:	88 23       	and	r24, r24
    274e:	61 f4       	brne	.+24     	; 0x2768 <xTaskIncrementTick+0xe2>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	dc 01       	movw	r26, r24
    2756:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    275a:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    275e:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    2762:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>
    2766:	76 c0       	rjmp	.+236    	; 0x2854 <xTaskIncrementTick+0x1ce>
    2768:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    276c:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    2770:	fc 01       	movw	r30, r24
    2772:	87 81       	ldd	r24, Z+7	; 0x07
    2774:	90 85       	ldd	r25, Z+8	; 0x08
    2776:	fc 01       	movw	r30, r24
    2778:	80 85       	ldd	r24, Z+8	; 0x08
    277a:	91 85       	ldd	r25, Z+9	; 0x09
    277c:	88 87       	std	Y+8, r24	; 0x08
    277e:	99 87       	std	Y+9, r25	; 0x09
    2780:	88 85       	ldd	r24, Y+8	; 0x08
    2782:	99 85       	ldd	r25, Y+9	; 0x09
    2784:	fc 01       	movw	r30, r24
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	a4 81       	ldd	r26, Z+4	; 0x04
    278c:	b5 81       	ldd	r27, Z+5	; 0x05
    278e:	8a 87       	std	Y+10, r24	; 0x0a
    2790:	9b 87       	std	Y+11, r25	; 0x0b
    2792:	ac 87       	std	Y+12, r26	; 0x0c
    2794:	bd 87       	std	Y+13, r27	; 0x0d
    2796:	2a 81       	ldd	r18, Y+2	; 0x02
    2798:	3b 81       	ldd	r19, Y+3	; 0x03
    279a:	4c 81       	ldd	r20, Y+4	; 0x04
    279c:	5d 81       	ldd	r21, Y+5	; 0x05
    279e:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    27a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    27a6:	28 17       	cp	r18, r24
    27a8:	39 07       	cpc	r19, r25
    27aa:	4a 07       	cpc	r20, r26
    27ac:	5b 07       	cpc	r21, r27
    27ae:	68 f4       	brcc	.+26     	; 0x27ca <xTaskIncrementTick+0x144>
    27b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    27b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    27b8:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    27bc:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    27c0:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    27c4:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>
    27c8:	45 c0       	rjmp	.+138    	; 0x2854 <xTaskIncrementTick+0x1ce>
    27ca:	88 85       	ldd	r24, Y+8	; 0x08
    27cc:	99 85       	ldd	r25, Y+9	; 0x09
    27ce:	02 96       	adiw	r24, 0x02	; 2
    27d0:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    27d4:	88 85       	ldd	r24, Y+8	; 0x08
    27d6:	99 85       	ldd	r25, Y+9	; 0x09
    27d8:	fc 01       	movw	r30, r24
    27da:	80 8d       	ldd	r24, Z+24	; 0x18
    27dc:	91 8d       	ldd	r25, Z+25	; 0x19
    27de:	89 2b       	or	r24, r25
    27e0:	29 f0       	breq	.+10     	; 0x27ec <xTaskIncrementTick+0x166>
    27e2:	88 85       	ldd	r24, Y+8	; 0x08
    27e4:	99 85       	ldd	r25, Y+9	; 0x09
    27e6:	0e 96       	adiw	r24, 0x0e	; 14
    27e8:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    27ec:	88 85       	ldd	r24, Y+8	; 0x08
    27ee:	99 85       	ldd	r25, Y+9	; 0x09
    27f0:	fc 01       	movw	r30, r24
    27f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    27f4:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    27f8:	89 17       	cp	r24, r25
    27fa:	30 f4       	brcc	.+12     	; 0x2808 <xTaskIncrementTick+0x182>
    27fc:	88 85       	ldd	r24, Y+8	; 0x08
    27fe:	99 85       	ldd	r25, Y+9	; 0x09
    2800:	fc 01       	movw	r30, r24
    2802:	82 8d       	ldd	r24, Z+26	; 0x1a
    2804:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    2808:	88 85       	ldd	r24, Y+8	; 0x08
    280a:	99 85       	ldd	r25, Y+9	; 0x09
    280c:	ac 01       	movw	r20, r24
    280e:	4e 5f       	subi	r20, 0xFE	; 254
    2810:	5f 4f       	sbci	r21, 0xFF	; 255
    2812:	88 85       	ldd	r24, Y+8	; 0x08
    2814:	99 85       	ldd	r25, Y+9	; 0x09
    2816:	fc 01       	movw	r30, r24
    2818:	82 8d       	ldd	r24, Z+26	; 0x1a
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	6b e0       	ldi	r22, 0x0B	; 11
    2820:	62 9f       	mul	r22, r18
    2822:	c0 01       	movw	r24, r0
    2824:	63 9f       	mul	r22, r19
    2826:	90 0d       	add	r25, r0
    2828:	11 24       	eor	r1, r1
    282a:	8e 59       	subi	r24, 0x9E	; 158
    282c:	93 4d       	sbci	r25, 0xD3	; 211
    282e:	ba 01       	movw	r22, r20
    2830:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2834:	88 85       	ldd	r24, Y+8	; 0x08
    2836:	99 85       	ldd	r25, Y+9	; 0x09
    2838:	fc 01       	movw	r30, r24
    283a:	22 8d       	ldd	r18, Z+26	; 0x1a
    283c:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2840:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2844:	fc 01       	movw	r30, r24
    2846:	82 8d       	ldd	r24, Z+26	; 0x1a
    2848:	28 17       	cp	r18, r24
    284a:	08 f4       	brcc	.+2      	; 0x284e <xTaskIncrementTick+0x1c8>
    284c:	79 cf       	rjmp	.-270    	; 0x2740 <xTaskIncrementTick+0xba>
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	76 cf       	rjmp	.-276    	; 0x2740 <xTaskIncrementTick+0xba>
    2854:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2858:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    285c:	fc 01       	movw	r30, r24
    285e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4b e0       	ldi	r20, 0x0B	; 11
    2866:	42 9f       	mul	r20, r18
    2868:	c0 01       	movw	r24, r0
    286a:	43 9f       	mul	r20, r19
    286c:	90 0d       	add	r25, r0
    286e:	11 24       	eor	r1, r1
    2870:	8e 59       	subi	r24, 0x9E	; 158
    2872:	93 4d       	sbci	r25, 0xD3	; 211
    2874:	fc 01       	movw	r30, r24
    2876:	80 81       	ld	r24, Z
    2878:	82 30       	cpi	r24, 0x02	; 2
    287a:	40 f0       	brcs	.+16     	; 0x288c <xTaskIncrementTick+0x206>
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	05 c0       	rjmp	.+10     	; 0x288c <xTaskIncrementTick+0x206>
    2882:	80 91 c5 2c 	lds	r24, 0x2CC5	; 0x802cc5 <uxPendedTicks>
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	80 93 c5 2c 	sts	0x2CC5, r24	; 0x802cc5 <uxPendedTicks>
    288c:	80 91 c6 2c 	lds	r24, 0x2CC6	; 0x802cc6 <xYieldPending>
    2890:	88 23       	and	r24, r24
    2892:	11 f0       	breq	.+4      	; 0x2898 <xTaskIncrementTick+0x212>
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	2d 96       	adiw	r28, 0x0d	; 13
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <vTaskSwitchContext>:
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	29 97       	sbiw	r28, 0x09	; 9
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    28b8:	88 23       	and	r24, r24
    28ba:	21 f0       	breq	.+8      	; 0x28c4 <vTaskSwitchContext+0x1e>
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    28c2:	ba c0       	rjmp	.+372    	; 0x2a38 <vTaskSwitchContext+0x192>
    28c4:	10 92 c6 2c 	sts	0x2CC6, r1	; 0x802cc6 <xYieldPending>
    28c8:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    28cc:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    28d0:	fc 01       	movw	r30, r24
    28d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    28d4:	94 8d       	ldd	r25, Z+28	; 0x1c
    28d6:	8a 83       	std	Y+2, r24	; 0x02
    28d8:	9b 83       	std	Y+3, r25	; 0x03
    28da:	85 ea       	ldi	r24, 0xA5	; 165
    28dc:	95 ea       	ldi	r25, 0xA5	; 165
    28de:	dc 01       	movw	r26, r24
    28e0:	8c 83       	std	Y+4, r24	; 0x04
    28e2:	9d 83       	std	Y+5, r25	; 0x05
    28e4:	ae 83       	std	Y+6, r26	; 0x06
    28e6:	bf 83       	std	Y+7, r27	; 0x07
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	fc 01       	movw	r30, r24
    28ee:	20 81       	ld	r18, Z
    28f0:	31 81       	ldd	r19, Z+1	; 0x01
    28f2:	42 81       	ldd	r20, Z+2	; 0x02
    28f4:	53 81       	ldd	r21, Z+3	; 0x03
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	9d 81       	ldd	r25, Y+5	; 0x05
    28fa:	ae 81       	ldd	r26, Y+6	; 0x06
    28fc:	bf 81       	ldd	r27, Y+7	; 0x07
    28fe:	28 17       	cp	r18, r24
    2900:	39 07       	cpc	r19, r25
    2902:	4a 07       	cpc	r20, r26
    2904:	5b 07       	cpc	r21, r27
    2906:	99 f5       	brne	.+102    	; 0x296e <vTaskSwitchContext+0xc8>
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	04 96       	adiw	r24, 0x04	; 4
    290e:	fc 01       	movw	r30, r24
    2910:	20 81       	ld	r18, Z
    2912:	31 81       	ldd	r19, Z+1	; 0x01
    2914:	42 81       	ldd	r20, Z+2	; 0x02
    2916:	53 81       	ldd	r21, Z+3	; 0x03
    2918:	8c 81       	ldd	r24, Y+4	; 0x04
    291a:	9d 81       	ldd	r25, Y+5	; 0x05
    291c:	ae 81       	ldd	r26, Y+6	; 0x06
    291e:	bf 81       	ldd	r27, Y+7	; 0x07
    2920:	28 17       	cp	r18, r24
    2922:	39 07       	cpc	r19, r25
    2924:	4a 07       	cpc	r20, r26
    2926:	5b 07       	cpc	r21, r27
    2928:	11 f5       	brne	.+68     	; 0x296e <vTaskSwitchContext+0xc8>
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	08 96       	adiw	r24, 0x08	; 8
    2930:	fc 01       	movw	r30, r24
    2932:	20 81       	ld	r18, Z
    2934:	31 81       	ldd	r19, Z+1	; 0x01
    2936:	42 81       	ldd	r20, Z+2	; 0x02
    2938:	53 81       	ldd	r21, Z+3	; 0x03
    293a:	8c 81       	ldd	r24, Y+4	; 0x04
    293c:	9d 81       	ldd	r25, Y+5	; 0x05
    293e:	ae 81       	ldd	r26, Y+6	; 0x06
    2940:	bf 81       	ldd	r27, Y+7	; 0x07
    2942:	28 17       	cp	r18, r24
    2944:	39 07       	cpc	r19, r25
    2946:	4a 07       	cpc	r20, r26
    2948:	5b 07       	cpc	r21, r27
    294a:	89 f4       	brne	.+34     	; 0x296e <vTaskSwitchContext+0xc8>
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	9b 81       	ldd	r25, Y+3	; 0x03
    2950:	0c 96       	adiw	r24, 0x0c	; 12
    2952:	fc 01       	movw	r30, r24
    2954:	20 81       	ld	r18, Z
    2956:	31 81       	ldd	r19, Z+1	; 0x01
    2958:	42 81       	ldd	r20, Z+2	; 0x02
    295a:	53 81       	ldd	r21, Z+3	; 0x03
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	9d 81       	ldd	r25, Y+5	; 0x05
    2960:	ae 81       	ldd	r26, Y+6	; 0x06
    2962:	bf 81       	ldd	r27, Y+7	; 0x07
    2964:	28 17       	cp	r18, r24
    2966:	39 07       	cpc	r19, r25
    2968:	4a 07       	cpc	r20, r26
    296a:	5b 07       	cpc	r21, r27
    296c:	71 f0       	breq	.+28     	; 0x298a <vTaskSwitchContext+0xe4>
    296e:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2972:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2976:	9c 01       	movw	r18, r24
    2978:	23 5e       	subi	r18, 0xE3	; 227
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2980:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2984:	b9 01       	movw	r22, r18
    2986:	0e 94 54 02 	call	0x4a8	; 0x4a8 <vApplicationStackOverflowHook>
    298a:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	03 c0       	rjmp	.+6      	; 0x2998 <vTaskSwitchContext+0xf2>
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	81 50       	subi	r24, 0x01	; 1
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	4b e0       	ldi	r20, 0x0B	; 11
    29a0:	42 9f       	mul	r20, r18
    29a2:	c0 01       	movw	r24, r0
    29a4:	43 9f       	mul	r20, r19
    29a6:	90 0d       	add	r25, r0
    29a8:	11 24       	eor	r1, r1
    29aa:	8e 59       	subi	r24, 0x9E	; 158
    29ac:	93 4d       	sbci	r25, 0xD3	; 211
    29ae:	fc 01       	movw	r30, r24
    29b0:	80 81       	ld	r24, Z
    29b2:	88 23       	and	r24, r24
    29b4:	71 f3       	breq	.-36     	; 0x2992 <vTaskSwitchContext+0xec>
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	4b e0       	ldi	r20, 0x0B	; 11
    29be:	42 9f       	mul	r20, r18
    29c0:	c0 01       	movw	r24, r0
    29c2:	43 9f       	mul	r20, r19
    29c4:	90 0d       	add	r25, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	8e 59       	subi	r24, 0x9E	; 158
    29ca:	93 4d       	sbci	r25, 0xD3	; 211
    29cc:	88 87       	std	Y+8, r24	; 0x08
    29ce:	99 87       	std	Y+9, r25	; 0x09
    29d0:	88 85       	ldd	r24, Y+8	; 0x08
    29d2:	99 85       	ldd	r25, Y+9	; 0x09
    29d4:	fc 01       	movw	r30, r24
    29d6:	81 81       	ldd	r24, Z+1	; 0x01
    29d8:	92 81       	ldd	r25, Z+2	; 0x02
    29da:	fc 01       	movw	r30, r24
    29dc:	24 81       	ldd	r18, Z+4	; 0x04
    29de:	35 81       	ldd	r19, Z+5	; 0x05
    29e0:	88 85       	ldd	r24, Y+8	; 0x08
    29e2:	99 85       	ldd	r25, Y+9	; 0x09
    29e4:	fc 01       	movw	r30, r24
    29e6:	21 83       	std	Z+1, r18	; 0x01
    29e8:	32 83       	std	Z+2, r19	; 0x02
    29ea:	88 85       	ldd	r24, Y+8	; 0x08
    29ec:	99 85       	ldd	r25, Y+9	; 0x09
    29ee:	fc 01       	movw	r30, r24
    29f0:	21 81       	ldd	r18, Z+1	; 0x01
    29f2:	32 81       	ldd	r19, Z+2	; 0x02
    29f4:	88 85       	ldd	r24, Y+8	; 0x08
    29f6:	99 85       	ldd	r25, Y+9	; 0x09
    29f8:	03 96       	adiw	r24, 0x03	; 3
    29fa:	28 17       	cp	r18, r24
    29fc:	39 07       	cpc	r19, r25
    29fe:	69 f4       	brne	.+26     	; 0x2a1a <vTaskSwitchContext+0x174>
    2a00:	88 85       	ldd	r24, Y+8	; 0x08
    2a02:	99 85       	ldd	r25, Y+9	; 0x09
    2a04:	fc 01       	movw	r30, r24
    2a06:	81 81       	ldd	r24, Z+1	; 0x01
    2a08:	92 81       	ldd	r25, Z+2	; 0x02
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	24 81       	ldd	r18, Z+4	; 0x04
    2a0e:	35 81       	ldd	r19, Z+5	; 0x05
    2a10:	88 85       	ldd	r24, Y+8	; 0x08
    2a12:	99 85       	ldd	r25, Y+9	; 0x09
    2a14:	fc 01       	movw	r30, r24
    2a16:	21 83       	std	Z+1, r18	; 0x01
    2a18:	32 83       	std	Z+2, r19	; 0x02
    2a1a:	88 85       	ldd	r24, Y+8	; 0x08
    2a1c:	99 85       	ldd	r25, Y+9	; 0x09
    2a1e:	fc 01       	movw	r30, r24
    2a20:	81 81       	ldd	r24, Z+1	; 0x01
    2a22:	92 81       	ldd	r25, Z+2	; 0x02
    2a24:	fc 01       	movw	r30, r24
    2a26:	80 85       	ldd	r24, Z+8	; 0x08
    2a28:	91 85       	ldd	r25, Z+9	; 0x09
    2a2a:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <pxCurrentTCB>
    2a2e:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <pxCurrentTCB+0x1>
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    2a38:	00 00       	nop
    2a3a:	29 96       	adiw	r28, 0x09	; 9
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	de bf       	out	0x3e, r29	; 62
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <vTaskPlaceOnEventList>:
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <vTaskPlaceOnEventList+0x6>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <vTaskPlaceOnEventList+0x8>
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	4b 83       	std	Y+3, r20	; 0x03
    2a58:	5c 83       	std	Y+4, r21	; 0x04
    2a5a:	6d 83       	std	Y+5, r22	; 0x05
    2a5c:	7e 83       	std	Y+6, r23	; 0x06
    2a5e:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2a62:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2a66:	9c 01       	movw	r18, r24
    2a68:	22 5f       	subi	r18, 0xF2	; 242
    2a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	b9 01       	movw	r22, r18
    2a72:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	ad 81       	ldd	r26, Y+5	; 0x05
    2a7c:	be 81       	ldd	r27, Y+6	; 0x06
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 4f 18 	call	0x309e	; 0x309e <prvAddCurrentTaskToDelayedList>
    2a88:	00 00       	nop
    2a8a:	26 96       	adiw	r28, 0x06	; 6
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <vTaskPlaceOnUnorderedEventList>:
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	2a 97       	sbiw	r28, 0x0a	; 10
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	4b 83       	std	Y+3, r20	; 0x03
    2aae:	5c 83       	std	Y+4, r21	; 0x04
    2ab0:	6d 83       	std	Y+5, r22	; 0x05
    2ab2:	7e 83       	std	Y+6, r23	; 0x06
    2ab4:	0f 83       	std	Y+7, r16	; 0x07
    2ab6:	18 87       	std	Y+8, r17	; 0x08
    2ab8:	29 87       	std	Y+9, r18	; 0x09
    2aba:	3a 87       	std	Y+10, r19	; 0x0a
    2abc:	20 91 60 2c 	lds	r18, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2ac0:	30 91 61 2c 	lds	r19, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac8:	ad 81       	ldd	r26, Y+5	; 0x05
    2aca:	be 81       	ldd	r27, Y+6	; 0x06
    2acc:	b0 68       	ori	r27, 0x80	; 128
    2ace:	f9 01       	movw	r30, r18
    2ad0:	86 87       	std	Z+14, r24	; 0x0e
    2ad2:	97 87       	std	Z+15, r25	; 0x0f
    2ad4:	a0 8b       	std	Z+16, r26	; 0x10
    2ad6:	b1 8b       	std	Z+17, r27	; 0x11
    2ad8:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2adc:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	22 5f       	subi	r18, 0xF2	; 242
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aea:	b9 01       	movw	r22, r18
    2aec:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2af0:	8f 81       	ldd	r24, Y+7	; 0x07
    2af2:	98 85       	ldd	r25, Y+8	; 0x08
    2af4:	a9 85       	ldd	r26, Y+9	; 0x09
    2af6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 4f 18 	call	0x309e	; 0x309e <prvAddCurrentTaskToDelayedList>
    2b02:	00 00       	nop
    2b04:	2a 96       	adiw	r28, 0x0a	; 10
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	08 95       	ret

00002b14 <vTaskPlaceOnEventListRestricted>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	27 97       	sbiw	r28, 0x07	; 7
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	4b 83       	std	Y+3, r20	; 0x03
    2b28:	5c 83       	std	Y+4, r21	; 0x04
    2b2a:	6d 83       	std	Y+5, r22	; 0x05
    2b2c:	7e 83       	std	Y+6, r23	; 0x06
    2b2e:	2f 83       	std	Y+7, r18	; 0x07
    2b30:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2b34:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2b38:	9c 01       	movw	r18, r24
    2b3a:	22 5f       	subi	r18, 0xF2	; 242
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	b9 01       	movw	r22, r18
    2b44:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2b48:	8f 81       	ldd	r24, Y+7	; 0x07
    2b4a:	88 23       	and	r24, r24
    2b4c:	39 f0       	breq	.+14     	; 0x2b5c <vTaskPlaceOnEventListRestricted+0x48>
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	9f ef       	ldi	r25, 0xFF	; 255
    2b52:	dc 01       	movw	r26, r24
    2b54:	8b 83       	std	Y+3, r24	; 0x03
    2b56:	9c 83       	std	Y+4, r25	; 0x04
    2b58:	ad 83       	std	Y+5, r26	; 0x05
    2b5a:	be 83       	std	Y+6, r27	; 0x06
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	ad 81       	ldd	r26, Y+5	; 0x05
    2b62:	be 81       	ldd	r27, Y+6	; 0x06
    2b64:	4f 81       	ldd	r20, Y+7	; 0x07
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 4f 18 	call	0x309e	; 0x309e <prvAddCurrentTaskToDelayedList>
    2b6e:	00 00       	nop
    2b70:	27 96       	adiw	r28, 0x07	; 7
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

00002b7c <xTaskRemoveFromEventList>:
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	25 97       	sbiw	r28, 0x05	; 5
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	8c 83       	std	Y+4, r24	; 0x04
    2b8c:	9d 83       	std	Y+5, r25	; 0x05
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	fc 01       	movw	r30, r24
    2b94:	87 81       	ldd	r24, Z+7	; 0x07
    2b96:	90 85       	ldd	r25, Z+8	; 0x08
    2b98:	fc 01       	movw	r30, r24
    2b9a:	80 85       	ldd	r24, Z+8	; 0x08
    2b9c:	91 85       	ldd	r25, Z+9	; 0x09
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	0e 96       	adiw	r24, 0x0e	; 14
    2ba8:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    2bac:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    2bb0:	88 23       	and	r24, r24
    2bb2:	51 f5       	brne	.+84     	; 0x2c08 <xTaskRemoveFromEventList+0x8c>
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb8:	02 96       	adiw	r24, 0x02	; 2
    2bba:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2bc6:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    2bca:	89 17       	cp	r24, r25
    2bcc:	30 f4       	brcc	.+12     	; 0x2bda <xTaskRemoveFromEventList+0x5e>
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bd6:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	ac 01       	movw	r20, r24
    2be0:	4e 5f       	subi	r20, 0xFE	; 254
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	fc 01       	movw	r30, r24
    2bea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	6b e0       	ldi	r22, 0x0B	; 11
    2bf2:	62 9f       	mul	r22, r18
    2bf4:	c0 01       	movw	r24, r0
    2bf6:	63 9f       	mul	r22, r19
    2bf8:	90 0d       	add	r25, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	8e 59       	subi	r24, 0x9E	; 158
    2bfe:	93 4d       	sbci	r25, 0xD3	; 211
    2c00:	ba 01       	movw	r22, r20
    2c02:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2c06:	08 c0       	rjmp	.+16     	; 0x2c18 <xTaskRemoveFromEventList+0x9c>
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0c:	0e 96       	adiw	r24, 0x0e	; 14
    2c0e:	bc 01       	movw	r22, r24
    2c10:	88 ea       	ldi	r24, 0xA8	; 168
    2c12:	9c e2       	ldi	r25, 0x2C	; 44
    2c14:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c20:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2c24:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2c28:	fc 01       	movw	r30, r24
    2c2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c2c:	82 17       	cp	r24, r18
    2c2e:	30 f4       	brcc	.+12     	; 0x2c3c <xTaskRemoveFromEventList+0xc0>
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	89 83       	std	Y+1, r24	; 0x01
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <xTaskRemoveFromEventList+0xc2>
    2c3c:	19 82       	std	Y+1, r1	; 0x01
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	25 96       	adiw	r28, 0x05	; 5
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <vTaskRemoveFromUnorderedEventList>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	28 97       	sbiw	r28, 0x08	; 8
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	4d 83       	std	Y+5, r20	; 0x05
    2c60:	5e 83       	std	Y+6, r21	; 0x06
    2c62:	6f 83       	std	Y+7, r22	; 0x07
    2c64:	78 87       	std	Y+8, r23	; 0x08
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6a:	af 81       	ldd	r26, Y+7	; 0x07
    2c6c:	b8 85       	ldd	r27, Y+8	; 0x08
    2c6e:	b0 68       	ori	r27, 0x80	; 128
    2c70:	2b 81       	ldd	r18, Y+3	; 0x03
    2c72:	3c 81       	ldd	r19, Y+4	; 0x04
    2c74:	f9 01       	movw	r30, r18
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	fc 01       	movw	r30, r24
    2c84:	80 85       	ldd	r24, Z+8	; 0x08
    2c86:	91 85       	ldd	r25, Z+9	; 0x09
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	02 96       	adiw	r24, 0x02	; 2
    2c9a:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ca6:	80 91 c3 2c 	lds	r24, 0x2CC3	; 0x802cc3 <uxTopReadyPriority>
    2caa:	89 17       	cp	r24, r25
    2cac:	30 f4       	brcc	.+12     	; 0x2cba <vTaskRemoveFromUnorderedEventList+0x6e>
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cb6:	80 93 c3 2c 	sts	0x2CC3, r24	; 0x802cc3 <uxTopReadyPriority>
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	ac 01       	movw	r20, r24
    2cc0:	4e 5f       	subi	r20, 0xFE	; 254
    2cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	fc 01       	movw	r30, r24
    2cca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	6b e0       	ldi	r22, 0x0B	; 11
    2cd2:	62 9f       	mul	r22, r18
    2cd4:	c0 01       	movw	r24, r0
    2cd6:	63 9f       	mul	r22, r19
    2cd8:	90 0d       	add	r25, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	8e 59       	subi	r24, 0x9E	; 158
    2cde:	93 4d       	sbci	r25, 0xD3	; 211
    2ce0:	ba 01       	movw	r22, r20
    2ce2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cea:	fc 01       	movw	r30, r24
    2cec:	22 8d       	ldd	r18, Z+26	; 0x1a
    2cee:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    2cf2:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cfa:	82 17       	cp	r24, r18
    2cfc:	18 f4       	brcc	.+6      	; 0x2d04 <vTaskRemoveFromUnorderedEventList+0xb8>
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    2d04:	00 00       	nop
    2d06:	28 96       	adiw	r28, 0x08	; 8
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <vTaskInternalSetTimeOutState>:
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	1f 92       	push	r1
    2d18:	1f 92       	push	r1
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	20 91 c7 2c 	lds	r18, 0x2CC7	; 0x802cc7 <xNumOfOverflows>
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	20 83       	st	Z, r18
    2d2e:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <xTickCount>
    2d32:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <xTickCount+0x1>
    2d36:	a0 91 c1 2c 	lds	r26, 0x2CC1	; 0x802cc1 <xTickCount+0x2>
    2d3a:	b0 91 c2 2c 	lds	r27, 0x2CC2	; 0x802cc2 <xTickCount+0x3>
    2d3e:	29 81       	ldd	r18, Y+1	; 0x01
    2d40:	3a 81       	ldd	r19, Y+2	; 0x02
    2d42:	f9 01       	movw	r30, r18
    2d44:	81 83       	std	Z+1, r24	; 0x01
    2d46:	92 83       	std	Z+2, r25	; 0x02
    2d48:	a3 83       	std	Z+3, r26	; 0x03
    2d4a:	b4 83       	std	Z+4, r27	; 0x04
    2d4c:	00 00       	nop
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <xTaskCheckForTimeOut>:
    2d58:	ef 92       	push	r14
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	2d 97       	sbiw	r28, 0x0d	; 13
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	8a 87       	std	Y+10, r24	; 0x0a
    2d70:	9b 87       	std	Y+11, r25	; 0x0b
    2d72:	6c 87       	std	Y+12, r22	; 0x0c
    2d74:	7d 87       	std	Y+13, r23	; 0x0d
    2d76:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2d7a:	ff 93       	push	r31
    2d7c:	f8 7f       	andi	r31, 0xF8	; 248
    2d7e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2d82:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <xTickCount>
    2d86:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <xTickCount+0x1>
    2d8a:	a0 91 c1 2c 	lds	r26, 0x2CC1	; 0x802cc1 <xTickCount+0x2>
    2d8e:	b0 91 c2 2c 	lds	r27, 0x2CC2	; 0x802cc2 <xTickCount+0x3>
    2d92:	8a 83       	std	Y+2, r24	; 0x02
    2d94:	9b 83       	std	Y+3, r25	; 0x03
    2d96:	ac 83       	std	Y+4, r26	; 0x04
    2d98:	bd 83       	std	Y+5, r27	; 0x05
    2d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d9e:	fc 01       	movw	r30, r24
    2da0:	81 81       	ldd	r24, Z+1	; 0x01
    2da2:	92 81       	ldd	r25, Z+2	; 0x02
    2da4:	a3 81       	ldd	r26, Z+3	; 0x03
    2da6:	b4 81       	ldd	r27, Z+4	; 0x04
    2da8:	2a 81       	ldd	r18, Y+2	; 0x02
    2daa:	3b 81       	ldd	r19, Y+3	; 0x03
    2dac:	4c 81       	ldd	r20, Y+4	; 0x04
    2dae:	5d 81       	ldd	r21, Y+5	; 0x05
    2db0:	79 01       	movw	r14, r18
    2db2:	8a 01       	movw	r16, r20
    2db4:	e8 1a       	sub	r14, r24
    2db6:	f9 0a       	sbc	r15, r25
    2db8:	0a 0b       	sbc	r16, r26
    2dba:	1b 0b       	sbc	r17, r27
    2dbc:	d8 01       	movw	r26, r16
    2dbe:	c7 01       	movw	r24, r14
    2dc0:	8e 83       	std	Y+6, r24	; 0x06
    2dc2:	9f 83       	std	Y+7, r25	; 0x07
    2dc4:	a8 87       	std	Y+8, r26	; 0x08
    2dc6:	b9 87       	std	Y+9, r27	; 0x09
    2dc8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dcc:	fc 01       	movw	r30, r24
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	a2 81       	ldd	r26, Z+2	; 0x02
    2dd4:	b3 81       	ldd	r27, Z+3	; 0x03
    2dd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dda:	af 4f       	sbci	r26, 0xFF	; 255
    2ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dde:	11 f4       	brne	.+4      	; 0x2de4 <xTaskCheckForTimeOut+0x8c>
    2de0:	19 82       	std	Y+1, r1	; 0x01
    2de2:	54 c0       	rjmp	.+168    	; 0x2e8c <xTaskCheckForTimeOut+0x134>
    2de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de8:	fc 01       	movw	r30, r24
    2dea:	90 81       	ld	r25, Z
    2dec:	80 91 c7 2c 	lds	r24, 0x2CC7	; 0x802cc7 <xNumOfOverflows>
    2df0:	98 17       	cp	r25, r24
    2df2:	99 f0       	breq	.+38     	; 0x2e1a <xTaskCheckForTimeOut+0xc2>
    2df4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2df8:	fc 01       	movw	r30, r24
    2dfa:	21 81       	ldd	r18, Z+1	; 0x01
    2dfc:	32 81       	ldd	r19, Z+2	; 0x02
    2dfe:	43 81       	ldd	r20, Z+3	; 0x03
    2e00:	54 81       	ldd	r21, Z+4	; 0x04
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	9b 81       	ldd	r25, Y+3	; 0x03
    2e06:	ac 81       	ldd	r26, Y+4	; 0x04
    2e08:	bd 81       	ldd	r27, Y+5	; 0x05
    2e0a:	82 17       	cp	r24, r18
    2e0c:	93 07       	cpc	r25, r19
    2e0e:	a4 07       	cpc	r26, r20
    2e10:	b5 07       	cpc	r27, r21
    2e12:	18 f0       	brcs	.+6      	; 0x2e1a <xTaskCheckForTimeOut+0xc2>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	39 c0       	rjmp	.+114    	; 0x2e8c <xTaskCheckForTimeOut+0x134>
    2e1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 81       	ld	r18, Z
    2e22:	31 81       	ldd	r19, Z+1	; 0x01
    2e24:	42 81       	ldd	r20, Z+2	; 0x02
    2e26:	53 81       	ldd	r21, Z+3	; 0x03
    2e28:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2c:	a8 85       	ldd	r26, Y+8	; 0x08
    2e2e:	b9 85       	ldd	r27, Y+9	; 0x09
    2e30:	82 17       	cp	r24, r18
    2e32:	93 07       	cpc	r25, r19
    2e34:	a4 07       	cpc	r26, r20
    2e36:	b5 07       	cpc	r27, r21
    2e38:	00 f5       	brcc	.+64     	; 0x2e7a <xTaskCheckForTimeOut+0x122>
    2e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e3e:	fc 01       	movw	r30, r24
    2e40:	20 81       	ld	r18, Z
    2e42:	31 81       	ldd	r19, Z+1	; 0x01
    2e44:	42 81       	ldd	r20, Z+2	; 0x02
    2e46:	53 81       	ldd	r21, Z+3	; 0x03
    2e48:	8e 81       	ldd	r24, Y+6	; 0x06
    2e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4c:	a8 85       	ldd	r26, Y+8	; 0x08
    2e4e:	b9 85       	ldd	r27, Y+9	; 0x09
    2e50:	79 01       	movw	r14, r18
    2e52:	8a 01       	movw	r16, r20
    2e54:	e8 1a       	sub	r14, r24
    2e56:	f9 0a       	sbc	r15, r25
    2e58:	0a 0b       	sbc	r16, r26
    2e5a:	1b 0b       	sbc	r17, r27
    2e5c:	d8 01       	movw	r26, r16
    2e5e:	c7 01       	movw	r24, r14
    2e60:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e62:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e64:	f9 01       	movw	r30, r18
    2e66:	80 83       	st	Z, r24
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	a2 83       	std	Z+2, r26	; 0x02
    2e6c:	b3 83       	std	Z+3, r27	; 0x03
    2e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e72:	0e 94 89 16 	call	0x2d12	; 0x2d12 <vTaskInternalSetTimeOutState>
    2e76:	19 82       	std	Y+1, r1	; 0x01
    2e78:	09 c0       	rjmp	.+18     	; 0x2e8c <xTaskCheckForTimeOut+0x134>
    2e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e7e:	fc 01       	movw	r30, r24
    2e80:	10 82       	st	Z, r1
    2e82:	11 82       	std	Z+1, r1	; 0x01
    2e84:	12 82       	std	Z+2, r1	; 0x02
    2e86:	13 82       	std	Z+3, r1	; 0x03
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	ff 91       	pop	r31
    2e8e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	2d 96       	adiw	r28, 0x0d	; 13
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	08 95       	ret

00002ea8 <vTaskMissedYield>:
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 c6 2c 	sts	0x2CC6, r24	; 0x802cc6 <xYieldPending>
    2eb6:	00 00       	nop
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	08 95       	ret

00002ebe <prvIdleTask>:
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	1f 92       	push	r1
    2ec4:	1f 92       	push	r1
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <prvCheckTasksWaitingTermination>
    2ed2:	80 91 62 2c 	lds	r24, 0x2C62	; 0x802c62 <pxReadyTasksLists>
    2ed6:	82 30       	cpi	r24, 0x02	; 2
    2ed8:	10 f0       	brcs	.+4      	; 0x2ede <prvIdleTask+0x20>
    2eda:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    2ede:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <vApplicationIdleHook>
    2ee2:	f5 cf       	rjmp	.-22     	; 0x2ece <prvIdleTask+0x10>

00002ee4 <prvInitialiseTaskLists>:
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	1f 92       	push	r1
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	19 82       	std	Y+1, r1	; 0x01
    2ef0:	10 c0       	rjmp	.+32     	; 0x2f12 <prvInitialiseTaskLists+0x2e>
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4b e0       	ldi	r20, 0x0B	; 11
    2efa:	42 9f       	mul	r20, r18
    2efc:	c0 01       	movw	r24, r0
    2efe:	43 9f       	mul	r20, r19
    2f00:	90 0d       	add	r25, r0
    2f02:	11 24       	eor	r1, r1
    2f04:	8e 59       	subi	r24, 0x9E	; 158
    2f06:	93 4d       	sbci	r25, 0xD3	; 211
    2f08:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	84 30       	cpi	r24, 0x04	; 4
    2f16:	68 f3       	brcs	.-38     	; 0x2ef2 <prvInitialiseTaskLists+0xe>
    2f18:	8e e8       	ldi	r24, 0x8E	; 142
    2f1a:	9c e2       	ldi	r25, 0x2C	; 44
    2f1c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    2f20:	89 e9       	ldi	r24, 0x99	; 153
    2f22:	9c e2       	ldi	r25, 0x2C	; 44
    2f24:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    2f28:	88 ea       	ldi	r24, 0xA8	; 168
    2f2a:	9c e2       	ldi	r25, 0x2C	; 44
    2f2c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    2f30:	83 eb       	ldi	r24, 0xB3	; 179
    2f32:	9c e2       	ldi	r25, 0x2C	; 44
    2f34:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    2f38:	8e e8       	ldi	r24, 0x8E	; 142
    2f3a:	9c e2       	ldi	r25, 0x2C	; 44
    2f3c:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <pxDelayedTaskList>
    2f40:	90 93 a5 2c 	sts	0x2CA5, r25	; 0x802ca5 <pxDelayedTaskList+0x1>
    2f44:	89 e9       	ldi	r24, 0x99	; 153
    2f46:	9c e2       	ldi	r25, 0x2C	; 44
    2f48:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <pxOverflowDelayedTaskList>
    2f4c:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <pxOverflowDelayedTaskList+0x1>
    2f50:	00 00       	nop
    2f52:	0f 90       	pop	r0
    2f54:	df 91       	pop	r29
    2f56:	cf 91       	pop	r28
    2f58:	08 95       	ret

00002f5a <prvCheckTasksWaitingTermination>:
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	00 00       	nop
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <prvResetNextTaskUnblockTime>:
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	1f 92       	push	r1
    2f70:	1f 92       	push	r1
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    2f7a:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    2f7e:	fc 01       	movw	r30, r24
    2f80:	80 81       	ld	r24, Z
    2f82:	88 23       	and	r24, r24
    2f84:	61 f4       	brne	.+24     	; 0x2f9e <prvResetNextTaskUnblockTime+0x34>
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
    2f88:	9f ef       	ldi	r25, 0xFF	; 255
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    2f90:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    2f94:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    2f98:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>
    2f9c:	1b c0       	rjmp	.+54     	; 0x2fd4 <prvResetNextTaskUnblockTime+0x6a>
    2f9e:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    2fa2:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	87 81       	ldd	r24, Z+7	; 0x07
    2faa:	90 85       	ldd	r25, Z+8	; 0x08
    2fac:	fc 01       	movw	r30, r24
    2fae:	80 85       	ldd	r24, Z+8	; 0x08
    2fb0:	91 85       	ldd	r25, Z+9	; 0x09
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	fc 01       	movw	r30, r24
    2fbc:	82 81       	ldd	r24, Z+2	; 0x02
    2fbe:	93 81       	ldd	r25, Z+3	; 0x03
    2fc0:	a4 81       	ldd	r26, Z+4	; 0x04
    2fc2:	b5 81       	ldd	r27, Z+5	; 0x05
    2fc4:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    2fc8:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    2fcc:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    2fd0:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>
    2fd4:	00 00       	nop
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	08 95       	ret

00002fe0 <xTaskGetSchedulerState>:
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	1f 92       	push	r1
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	80 91 c4 2c 	lds	r24, 0x2CC4	; 0x802cc4 <xSchedulerRunning>
    2fee:	88 23       	and	r24, r24
    2ff0:	19 f4       	brne	.+6      	; 0x2ff8 <xTaskGetSchedulerState+0x18>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	08 c0       	rjmp	.+16     	; 0x3008 <xTaskGetSchedulerState+0x28>
    2ff8:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <uxSchedulerSuspended>
    2ffc:	88 23       	and	r24, r24
    2ffe:	19 f4       	brne	.+6      	; 0x3006 <xTaskGetSchedulerState+0x26>
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <xTaskGetSchedulerState+0x28>
    3006:	19 82       	std	Y+1, r1	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	0f 90       	pop	r0
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret

00003012 <uxTaskResetEventItemValue>:
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	00 d0       	rcall	.+0      	; 0x3020 <uxTaskResetEventItemValue+0xe>
    3020:	1f 92       	push	r1
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    302a:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    302e:	fc 01       	movw	r30, r24
    3030:	86 85       	ldd	r24, Z+14	; 0x0e
    3032:	97 85       	ldd	r25, Z+15	; 0x0f
    3034:	a0 89       	ldd	r26, Z+16	; 0x10
    3036:	b1 89       	ldd	r27, Z+17	; 0x11
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	ab 83       	std	Y+3, r26	; 0x03
    303e:	bc 83       	std	Y+4, r27	; 0x04
    3040:	60 91 60 2c 	lds	r22, 0x2C60	; 0x802c60 <pxCurrentTCB>
    3044:	70 91 61 2c 	lds	r23, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    3048:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    304c:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    3050:	fc 01       	movw	r30, r24
    3052:	82 8d       	ldd	r24, Z+26	; 0x1a
    3054:	88 2f       	mov	r24, r24
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a0 e0       	ldi	r26, 0x00	; 0
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	24 e0       	ldi	r18, 0x04	; 4
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	79 01       	movw	r14, r18
    3066:	8a 01       	movw	r16, r20
    3068:	e8 1a       	sub	r14, r24
    306a:	f9 0a       	sbc	r15, r25
    306c:	0a 0b       	sbc	r16, r26
    306e:	1b 0b       	sbc	r17, r27
    3070:	d8 01       	movw	r26, r16
    3072:	c7 01       	movw	r24, r14
    3074:	fb 01       	movw	r30, r22
    3076:	86 87       	std	Z+14, r24	; 0x0e
    3078:	97 87       	std	Z+15, r25	; 0x0f
    307a:	a0 8b       	std	Z+16, r26	; 0x10
    307c:	b1 8b       	std	Z+17, r27	; 0x11
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	ab 81       	ldd	r26, Y+3	; 0x03
    3084:	bc 81       	ldd	r27, Y+4	; 0x04
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	24 96       	adiw	r28, 0x04	; 4
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	ff 90       	pop	r15
    309a:	ef 90       	pop	r14
    309c:	08 95       	ret

0000309e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	2d 97       	sbiw	r28, 0x0d	; 13
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	69 87       	std	Y+9, r22	; 0x09
    30ae:	7a 87       	std	Y+10, r23	; 0x0a
    30b0:	8b 87       	std	Y+11, r24	; 0x0b
    30b2:	9c 87       	std	Y+12, r25	; 0x0c
    30b4:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    30b6:	80 91 bf 2c 	lds	r24, 0x2CBF	; 0x802cbf <xTickCount>
    30ba:	90 91 c0 2c 	lds	r25, 0x2CC0	; 0x802cc0 <xTickCount+0x1>
    30be:	a0 91 c1 2c 	lds	r26, 0x2CC1	; 0x802cc1 <xTickCount+0x2>
    30c2:	b0 91 c2 2c 	lds	r27, 0x2CC2	; 0x802cc2 <xTickCount+0x3>
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	ab 83       	std	Y+3, r26	; 0x03
    30cc:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    30ce:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    30d2:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    30d6:	02 96       	adiw	r24, 0x02	; 2
    30d8:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    30dc:	89 85       	ldd	r24, Y+9	; 0x09
    30de:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    30e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    30e4:	8f 3f       	cpi	r24, 0xFF	; 255
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	af 4f       	sbci	r26, 0xFF	; 255
    30ea:	bf 4f       	sbci	r27, 0xFF	; 255
    30ec:	71 f4       	brne	.+28     	; 0x310a <prvAddCurrentTaskToDelayedList+0x6c>
    30ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f0:	88 23       	and	r24, r24
    30f2:	59 f0       	breq	.+22     	; 0x310a <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    30f4:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    30f8:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    30fc:	02 96       	adiw	r24, 0x02	; 2
    30fe:	bc 01       	movw	r22, r24
    3100:	83 eb       	ldi	r24, 0xB3	; 179
    3102:	9c e2       	ldi	r25, 0x2C	; 44
    3104:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3108:	64 c0       	rjmp	.+200    	; 0x31d2 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    310a:	29 81       	ldd	r18, Y+1	; 0x01
    310c:	3a 81       	ldd	r19, Y+2	; 0x02
    310e:	4b 81       	ldd	r20, Y+3	; 0x03
    3110:	5c 81       	ldd	r21, Y+4	; 0x04
    3112:	89 85       	ldd	r24, Y+9	; 0x09
    3114:	9a 85       	ldd	r25, Y+10	; 0x0a
    3116:	ab 85       	ldd	r26, Y+11	; 0x0b
    3118:	bc 85       	ldd	r27, Y+12	; 0x0c
    311a:	82 0f       	add	r24, r18
    311c:	93 1f       	adc	r25, r19
    311e:	a4 1f       	adc	r26, r20
    3120:	b5 1f       	adc	r27, r21
    3122:	8d 83       	std	Y+5, r24	; 0x05
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	af 83       	std	Y+7, r26	; 0x07
    3128:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    312a:	20 91 60 2c 	lds	r18, 0x2C60	; 0x802c60 <pxCurrentTCB>
    312e:	30 91 61 2c 	lds	r19, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	af 81       	ldd	r26, Y+7	; 0x07
    3138:	b8 85       	ldd	r27, Y+8	; 0x08
    313a:	f9 01       	movw	r30, r18
    313c:	82 83       	std	Z+2, r24	; 0x02
    313e:	93 83       	std	Z+3, r25	; 0x03
    3140:	a4 83       	std	Z+4, r26	; 0x04
    3142:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    3144:	2d 81       	ldd	r18, Y+5	; 0x05
    3146:	3e 81       	ldd	r19, Y+6	; 0x06
    3148:	4f 81       	ldd	r20, Y+7	; 0x07
    314a:	58 85       	ldd	r21, Y+8	; 0x08
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	ab 81       	ldd	r26, Y+3	; 0x03
    3152:	bc 81       	ldd	r27, Y+4	; 0x04
    3154:	28 17       	cp	r18, r24
    3156:	39 07       	cpc	r19, r25
    3158:	4a 07       	cpc	r20, r26
    315a:	5b 07       	cpc	r21, r27
    315c:	78 f4       	brcc	.+30     	; 0x317c <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    315e:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    3162:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    3166:	9c 01       	movw	r18, r24
    3168:	2e 5f       	subi	r18, 0xFE	; 254
    316a:	3f 4f       	sbci	r19, 0xFF	; 255
    316c:	80 91 a6 2c 	lds	r24, 0x2CA6	; 0x802ca6 <pxOverflowDelayedTaskList>
    3170:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <pxOverflowDelayedTaskList+0x1>
    3174:	b9 01       	movw	r22, r18
    3176:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    317a:	2b c0       	rjmp	.+86     	; 0x31d2 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    317c:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <pxCurrentTCB>
    3180:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <pxCurrentTCB+0x1>
    3184:	9c 01       	movw	r18, r24
    3186:	2e 5f       	subi	r18, 0xFE	; 254
    3188:	3f 4f       	sbci	r19, 0xFF	; 255
    318a:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <pxDelayedTaskList>
    318e:	90 91 a5 2c 	lds	r25, 0x2CA5	; 0x802ca5 <pxDelayedTaskList+0x1>
    3192:	b9 01       	movw	r22, r18
    3194:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3198:	80 91 c9 2c 	lds	r24, 0x2CC9	; 0x802cc9 <xNextTaskUnblockTime>
    319c:	90 91 ca 2c 	lds	r25, 0x2CCA	; 0x802cca <xNextTaskUnblockTime+0x1>
    31a0:	a0 91 cb 2c 	lds	r26, 0x2CCB	; 0x802ccb <xNextTaskUnblockTime+0x2>
    31a4:	b0 91 cc 2c 	lds	r27, 0x2CCC	; 0x802ccc <xNextTaskUnblockTime+0x3>
    31a8:	2d 81       	ldd	r18, Y+5	; 0x05
    31aa:	3e 81       	ldd	r19, Y+6	; 0x06
    31ac:	4f 81       	ldd	r20, Y+7	; 0x07
    31ae:	58 85       	ldd	r21, Y+8	; 0x08
    31b0:	28 17       	cp	r18, r24
    31b2:	39 07       	cpc	r19, r25
    31b4:	4a 07       	cpc	r20, r26
    31b6:	5b 07       	cpc	r21, r27
    31b8:	60 f4       	brcc	.+24     	; 0x31d2 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    31ba:	8d 81       	ldd	r24, Y+5	; 0x05
    31bc:	9e 81       	ldd	r25, Y+6	; 0x06
    31be:	af 81       	ldd	r26, Y+7	; 0x07
    31c0:	b8 85       	ldd	r27, Y+8	; 0x08
    31c2:	80 93 c9 2c 	sts	0x2CC9, r24	; 0x802cc9 <xNextTaskUnblockTime>
    31c6:	90 93 ca 2c 	sts	0x2CCA, r25	; 0x802cca <xNextTaskUnblockTime+0x1>
    31ca:	a0 93 cb 2c 	sts	0x2CCB, r26	; 0x802ccb <xNextTaskUnblockTime+0x2>
    31ce:	b0 93 cc 2c 	sts	0x2CCC, r27	; 0x802ccc <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    31d2:	00 00       	nop
    31d4:	2d 96       	adiw	r28, 0x0d	; 13
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	1f 92       	push	r1
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	19 82       	std	Y+1, r1	; 0x01
    31f2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <prvCheckForValidListAndQueue>
    31f6:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    31fa:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    31fe:	89 2b       	or	r24, r25
    3200:	91 f0       	breq	.+36     	; 0x3226 <xTimerCreateTimerTask+0x46>
    3202:	0f 2e       	mov	r0, r31
    3204:	fc ee       	ldi	r31, 0xEC	; 236
    3206:	ef 2e       	mov	r14, r31
    3208:	fc e2       	ldi	r31, 0x2C	; 44
    320a:	ff 2e       	mov	r15, r31
    320c:	f0 2d       	mov	r31, r0
    320e:	03 e0       	ldi	r16, 0x03	; 3
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	48 ec       	ldi	r20, 0xC8	; 200
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	65 e4       	ldi	r22, 0x45	; 69
    321a:	70 e2       	ldi	r23, 0x20	; 32
    321c:	86 e0       	ldi	r24, 0x06	; 6
    321e:	9a e1       	ldi	r25, 0x1A	; 26
    3220:	0e 94 2b 10 	call	0x2056	; 0x2056 <xTaskCreate>
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	0f 90       	pop	r0
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	08 95       	ret

00003236 <xTimerGenericCommand>:
    3236:	cf 92       	push	r12
    3238:	df 92       	push	r13
    323a:	ef 92       	push	r14
    323c:	ff 92       	push	r15
    323e:	0f 93       	push	r16
    3240:	1f 93       	push	r17
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	67 97       	sbiw	r28, 0x17	; 23
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	8b 87       	std	Y+11, r24	; 0x0b
    3252:	9c 87       	std	Y+12, r25	; 0x0c
    3254:	6d 87       	std	Y+13, r22	; 0x0d
    3256:	2e 87       	std	Y+14, r18	; 0x0e
    3258:	3f 87       	std	Y+15, r19	; 0x0f
    325a:	48 8b       	std	Y+16, r20	; 0x10
    325c:	59 8b       	std	Y+17, r21	; 0x11
    325e:	0a 8b       	std	Y+18, r16	; 0x12
    3260:	1b 8b       	std	Y+19, r17	; 0x13
    3262:	cc 8a       	std	Y+20, r12	; 0x14
    3264:	dd 8a       	std	Y+21, r13	; 0x15
    3266:	ee 8a       	std	Y+22, r14	; 0x16
    3268:	ff 8a       	std	Y+23, r15	; 0x17
    326a:	19 82       	std	Y+1, r1	; 0x01
    326c:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    3270:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    3274:	89 2b       	or	r24, r25
    3276:	09 f4       	brne	.+2      	; 0x327a <xTimerGenericCommand+0x44>
    3278:	44 c0       	rjmp	.+136    	; 0x3302 <xTimerGenericCommand+0xcc>
    327a:	8d 85       	ldd	r24, Y+13	; 0x0d
    327c:	8a 83       	std	Y+2, r24	; 0x02
    327e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3280:	9f 85       	ldd	r25, Y+15	; 0x0f
    3282:	a8 89       	ldd	r26, Y+16	; 0x10
    3284:	b9 89       	ldd	r27, Y+17	; 0x11
    3286:	8b 83       	std	Y+3, r24	; 0x03
    3288:	9c 83       	std	Y+4, r25	; 0x04
    328a:	ad 83       	std	Y+5, r26	; 0x05
    328c:	be 83       	std	Y+6, r27	; 0x06
    328e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3290:	9c 85       	ldd	r25, Y+12	; 0x0c
    3292:	8f 83       	std	Y+7, r24	; 0x07
    3294:	98 87       	std	Y+8, r25	; 0x08
    3296:	8d 85       	ldd	r24, Y+13	; 0x0d
    3298:	86 30       	cpi	r24, 0x06	; 6
    329a:	34 f5       	brge	.+76     	; 0x32e8 <xTimerGenericCommand+0xb2>
    329c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <xTaskGetSchedulerState>
    32a0:	82 30       	cpi	r24, 0x02	; 2
    32a2:	99 f4       	brne	.+38     	; 0x32ca <xTimerGenericCommand+0x94>
    32a4:	e0 91 ea 2c 	lds	r30, 0x2CEA	; 0x802cea <xTimerQueue>
    32a8:	f0 91 eb 2c 	lds	r31, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    32ac:	8c 89       	ldd	r24, Y+20	; 0x14
    32ae:	9d 89       	ldd	r25, Y+21	; 0x15
    32b0:	ae 89       	ldd	r26, Y+22	; 0x16
    32b2:	bf 89       	ldd	r27, Y+23	; 0x17
    32b4:	be 01       	movw	r22, r28
    32b6:	6e 5f       	subi	r22, 0xFE	; 254
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	00 e0       	ldi	r16, 0x00	; 0
    32bc:	9c 01       	movw	r18, r24
    32be:	ad 01       	movw	r20, r26
    32c0:	cf 01       	movw	r24, r30
    32c2:	0e 94 2f 0c 	call	0x185e	; 0x185e <xQueueGenericSend>
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	1c c0       	rjmp	.+56     	; 0x3302 <xTimerGenericCommand+0xcc>
    32ca:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    32ce:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    32d2:	be 01       	movw	r22, r28
    32d4:	6e 5f       	subi	r22, 0xFE	; 254
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	00 e0       	ldi	r16, 0x00	; 0
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	a9 01       	movw	r20, r18
    32e0:	0e 94 2f 0c 	call	0x185e	; 0x185e <xQueueGenericSend>
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	0d c0       	rjmp	.+26     	; 0x3302 <xTimerGenericCommand+0xcc>
    32e8:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    32ec:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    32f0:	4a 89       	ldd	r20, Y+18	; 0x12
    32f2:	5b 89       	ldd	r21, Y+19	; 0x13
    32f4:	be 01       	movw	r22, r28
    32f6:	6e 5f       	subi	r22, 0xFE	; 254
    32f8:	7f 4f       	sbci	r23, 0xFF	; 255
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xQueueGenericSendFromISR>
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	67 96       	adiw	r28, 0x17	; 23
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	ff 90       	pop	r15
    3314:	ef 90       	pop	r14
    3316:	df 90       	pop	r13
    3318:	cf 90       	pop	r12
    331a:	08 95       	ret

0000331c <prvProcessExpiredTimer>:
    331c:	cf 92       	push	r12
    331e:	df 92       	push	r13
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	2b 97       	sbiw	r28, 0x0b	; 11
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	6c 83       	std	Y+4, r22	; 0x04
    3338:	7d 83       	std	Y+5, r23	; 0x05
    333a:	8e 83       	std	Y+6, r24	; 0x06
    333c:	9f 83       	std	Y+7, r25	; 0x07
    333e:	28 87       	std	Y+8, r18	; 0x08
    3340:	39 87       	std	Y+9, r19	; 0x09
    3342:	4a 87       	std	Y+10, r20	; 0x0a
    3344:	5b 87       	std	Y+11, r21	; 0x0b
    3346:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    334a:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    334e:	fc 01       	movw	r30, r24
    3350:	87 81       	ldd	r24, Z+7	; 0x07
    3352:	90 85       	ldd	r25, Z+8	; 0x08
    3354:	fc 01       	movw	r30, r24
    3356:	80 85       	ldd	r24, Z+8	; 0x08
    3358:	91 85       	ldd	r25, Z+9	; 0x09
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	02 96       	adiw	r24, 0x02	; 2
    3364:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	fc 01       	movw	r30, r24
    336e:	82 89       	ldd	r24, Z+18	; 0x12
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	b1 f5       	brne	.+108    	; 0x33e0 <prvProcessExpiredTimer+0xc4>
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	fc 01       	movw	r30, r24
    337a:	26 85       	ldd	r18, Z+14	; 0x0e
    337c:	37 85       	ldd	r19, Z+15	; 0x0f
    337e:	40 89       	ldd	r20, Z+16	; 0x10
    3380:	51 89       	ldd	r21, Z+17	; 0x11
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	9d 81       	ldd	r25, Y+5	; 0x05
    3386:	ae 81       	ldd	r26, Y+6	; 0x06
    3388:	bf 81       	ldd	r27, Y+7	; 0x07
    338a:	82 0f       	add	r24, r18
    338c:	93 1f       	adc	r25, r19
    338e:	a4 1f       	adc	r26, r20
    3390:	b5 1f       	adc	r27, r21
    3392:	ec 80       	ldd	r14, Y+4	; 0x04
    3394:	fd 80       	ldd	r15, Y+5	; 0x05
    3396:	0e 81       	ldd	r16, Y+6	; 0x06
    3398:	1f 81       	ldd	r17, Y+7	; 0x07
    339a:	28 85       	ldd	r18, Y+8	; 0x08
    339c:	39 85       	ldd	r19, Y+9	; 0x09
    339e:	4a 85       	ldd	r20, Y+10	; 0x0a
    33a0:	5b 85       	ldd	r21, Y+11	; 0x0b
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	67 01       	movw	r12, r14
    33a8:	78 01       	movw	r14, r16
    33aa:	89 01       	movw	r16, r18
    33ac:	9a 01       	movw	r18, r20
    33ae:	ac 01       	movw	r20, r24
    33b0:	bd 01       	movw	r22, r26
    33b2:	cf 01       	movw	r24, r30
    33b4:	0e 94 24 1b 	call	0x3648	; 0x3648 <prvInsertTimerInActiveList>
    33b8:	88 23       	and	r24, r24
    33ba:	91 f0       	breq	.+36     	; 0x33e0 <prvProcessExpiredTimer+0xc4>
    33bc:	8c 81       	ldd	r24, Y+4	; 0x04
    33be:	9d 81       	ldd	r25, Y+5	; 0x05
    33c0:	ae 81       	ldd	r26, Y+6	; 0x06
    33c2:	bf 81       	ldd	r27, Y+7	; 0x07
    33c4:	e9 81       	ldd	r30, Y+1	; 0x01
    33c6:	fa 81       	ldd	r31, Y+2	; 0x02
    33c8:	c1 2c       	mov	r12, r1
    33ca:	d1 2c       	mov	r13, r1
    33cc:	76 01       	movw	r14, r12
    33ce:	00 e0       	ldi	r16, 0x00	; 0
    33d0:	10 e0       	ldi	r17, 0x00	; 0
    33d2:	9c 01       	movw	r18, r24
    33d4:	ad 01       	movw	r20, r26
    33d6:	60 e0       	ldi	r22, 0x00	; 0
    33d8:	cf 01       	movw	r24, r30
    33da:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTimerGenericCommand>
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	9a 81       	ldd	r25, Y+2	; 0x02
    33e4:	fc 01       	movw	r30, r24
    33e6:	25 89       	ldd	r18, Z+21	; 0x15
    33e8:	36 89       	ldd	r19, Z+22	; 0x16
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	f9 01       	movw	r30, r18
    33f0:	19 95       	eicall
    33f2:	00 00       	nop
    33f4:	2b 96       	adiw	r28, 0x0b	; 11
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	ff 90       	pop	r15
    3404:	ef 90       	pop	r14
    3406:	df 90       	pop	r13
    3408:	cf 90       	pop	r12
    340a:	08 95       	ret

0000340c <prvTimerTask>:
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	27 97       	sbiw	r28, 0x07	; 7
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	8e 83       	std	Y+6, r24	; 0x06
    341c:	9f 83       	std	Y+7, r25	; 0x07
    341e:	ce 01       	movw	r24, r28
    3420:	05 96       	adiw	r24, 0x05	; 5
    3422:	0e 94 a1 1a 	call	0x3542	; 0x3542 <prvGetNextExpireTime>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	89 83       	std	Y+1, r24	; 0x01
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	ab 83       	std	Y+3, r26	; 0x03
    3430:	bc 83       	std	Y+4, r27	; 0x04
    3432:	2d 81       	ldd	r18, Y+5	; 0x05
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	9a 81       	ldd	r25, Y+2	; 0x02
    3438:	ab 81       	ldd	r26, Y+3	; 0x03
    343a:	bc 81       	ldd	r27, Y+4	; 0x04
    343c:	42 2f       	mov	r20, r18
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 26 1a 	call	0x344c	; 0x344c <prvProcessTimerOrBlockTask>
    3446:	0e 94 bd 1b 	call	0x377a	; 0x377a <prvProcessReceivedCommands>
    344a:	e9 cf       	rjmp	.-46     	; 0x341e <prvTimerTask+0x12>

0000344c <prvProcessTimerOrBlockTask>:
    344c:	ef 92       	push	r14
    344e:	ff 92       	push	r15
    3450:	0f 93       	push	r16
    3452:	1f 93       	push	r17
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	2a 97       	sbiw	r28, 0x0a	; 10
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	6e 83       	std	Y+6, r22	; 0x06
    3464:	7f 83       	std	Y+7, r23	; 0x07
    3466:	88 87       	std	Y+8, r24	; 0x08
    3468:	99 87       	std	Y+9, r25	; 0x09
    346a:	4a 87       	std	Y+10, r20	; 0x0a
    346c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <vTaskSuspendAll>
    3470:	ce 01       	movw	r24, r28
    3472:	05 96       	adiw	r24, 0x05	; 5
    3474:	0e 94 df 1a 	call	0x35be	; 0x35be <prvSampleTimeNow>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	9a 83       	std	Y+2, r25	; 0x02
    3480:	ab 83       	std	Y+3, r26	; 0x03
    3482:	bc 83       	std	Y+4, r27	; 0x04
    3484:	8d 81       	ldd	r24, Y+5	; 0x05
    3486:	88 23       	and	r24, r24
    3488:	09 f0       	breq	.+2      	; 0x348c <prvProcessTimerOrBlockTask+0x40>
    348a:	4e c0       	rjmp	.+156    	; 0x3528 <prvProcessTimerOrBlockTask+0xdc>
    348c:	8a 85       	ldd	r24, Y+10	; 0x0a
    348e:	88 23       	and	r24, r24
    3490:	e1 f4       	brne	.+56     	; 0x34ca <prvProcessTimerOrBlockTask+0x7e>
    3492:	2e 81       	ldd	r18, Y+6	; 0x06
    3494:	3f 81       	ldd	r19, Y+7	; 0x07
    3496:	48 85       	ldd	r20, Y+8	; 0x08
    3498:	59 85       	ldd	r21, Y+9	; 0x09
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	ab 81       	ldd	r26, Y+3	; 0x03
    34a0:	bc 81       	ldd	r27, Y+4	; 0x04
    34a2:	82 17       	cp	r24, r18
    34a4:	93 07       	cpc	r25, r19
    34a6:	a4 07       	cpc	r26, r20
    34a8:	b5 07       	cpc	r27, r21
    34aa:	78 f0       	brcs	.+30     	; 0x34ca <prvProcessTimerOrBlockTask+0x7e>
    34ac:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    34b0:	29 81       	ldd	r18, Y+1	; 0x01
    34b2:	3a 81       	ldd	r19, Y+2	; 0x02
    34b4:	4b 81       	ldd	r20, Y+3	; 0x03
    34b6:	5c 81       	ldd	r21, Y+4	; 0x04
    34b8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ba:	9f 81       	ldd	r25, Y+7	; 0x07
    34bc:	a8 85       	ldd	r26, Y+8	; 0x08
    34be:	b9 85       	ldd	r27, Y+9	; 0x09
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	0e 94 8e 19 	call	0x331c	; 0x331c <prvProcessExpiredTimer>
    34c8:	31 c0       	rjmp	.+98     	; 0x352c <prvProcessTimerOrBlockTask+0xe0>
    34ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    34cc:	88 23       	and	r24, r24
    34ce:	59 f0       	breq	.+22     	; 0x34e6 <prvProcessTimerOrBlockTask+0x9a>
    34d0:	80 91 e8 2c 	lds	r24, 0x2CE8	; 0x802ce8 <pxOverflowTimerList>
    34d4:	90 91 e9 2c 	lds	r25, 0x2CE9	; 0x802ce9 <pxOverflowTimerList+0x1>
    34d8:	fc 01       	movw	r30, r24
    34da:	90 81       	ld	r25, Z
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	99 23       	and	r25, r25
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <prvProcessTimerOrBlockTask+0x98>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	8a 87       	std	Y+10, r24	; 0x0a
    34e6:	2e 81       	ldd	r18, Y+6	; 0x06
    34e8:	3f 81       	ldd	r19, Y+7	; 0x07
    34ea:	48 85       	ldd	r20, Y+8	; 0x08
    34ec:	59 85       	ldd	r21, Y+9	; 0x09
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	9a 81       	ldd	r25, Y+2	; 0x02
    34f2:	ab 81       	ldd	r26, Y+3	; 0x03
    34f4:	bc 81       	ldd	r27, Y+4	; 0x04
    34f6:	79 01       	movw	r14, r18
    34f8:	8a 01       	movw	r16, r20
    34fa:	e8 1a       	sub	r14, r24
    34fc:	f9 0a       	sbc	r15, r25
    34fe:	0a 0b       	sbc	r16, r26
    3500:	1b 0b       	sbc	r17, r27
    3502:	d8 01       	movw	r26, r16
    3504:	c7 01       	movw	r24, r14
    3506:	e0 91 ea 2c 	lds	r30, 0x2CEA	; 0x802cea <xTimerQueue>
    350a:	f0 91 eb 2c 	lds	r31, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    350e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3510:	ac 01       	movw	r20, r24
    3512:	bd 01       	movw	r22, r26
    3514:	cf 01       	movw	r24, r30
    3516:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <vQueueWaitForMessageRestricted>
    351a:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    351e:	88 23       	and	r24, r24
    3520:	29 f4       	brne	.+10     	; 0x352c <prvProcessTimerOrBlockTask+0xe0>
    3522:	0e 94 c4 09 	call	0x1388	; 0x1388 <vPortYield>
    3526:	02 c0       	rjmp	.+4      	; 0x352c <prvProcessTimerOrBlockTask+0xe0>
    3528:	0e 94 85 12 	call	0x250a	; 0x250a <xTaskResumeAll>
    352c:	00 00       	nop
    352e:	2a 96       	adiw	r28, 0x0a	; 10
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	ef 90       	pop	r14
    3540:	08 95       	ret

00003542 <prvGetNextExpireTime>:
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	00 d0       	rcall	.+0      	; 0x3548 <prvGetNextExpireTime+0x6>
    3548:	00 d0       	rcall	.+0      	; 0x354a <prvGetNextExpireTime+0x8>
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	8d 83       	std	Y+5, r24	; 0x05
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3556:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    355a:	fc 01       	movw	r30, r24
    355c:	90 81       	ld	r25, Z
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	99 23       	and	r25, r25
    3562:	09 f0       	breq	.+2      	; 0x3566 <prvGetNextExpireTime+0x24>
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	28 2f       	mov	r18, r24
    3568:	8d 81       	ldd	r24, Y+5	; 0x05
    356a:	9e 81       	ldd	r25, Y+6	; 0x06
    356c:	fc 01       	movw	r30, r24
    356e:	20 83       	st	Z, r18
    3570:	8d 81       	ldd	r24, Y+5	; 0x05
    3572:	9e 81       	ldd	r25, Y+6	; 0x06
    3574:	fc 01       	movw	r30, r24
    3576:	80 81       	ld	r24, Z
    3578:	88 23       	and	r24, r24
    357a:	89 f4       	brne	.+34     	; 0x359e <prvGetNextExpireTime+0x5c>
    357c:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3580:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    3584:	fc 01       	movw	r30, r24
    3586:	87 81       	ldd	r24, Z+7	; 0x07
    3588:	90 85       	ldd	r25, Z+8	; 0x08
    358a:	fc 01       	movw	r30, r24
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	a2 81       	ldd	r26, Z+2	; 0x02
    3592:	b3 81       	ldd	r27, Z+3	; 0x03
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	ab 83       	std	Y+3, r26	; 0x03
    359a:	bc 83       	std	Y+4, r27	; 0x04
    359c:	04 c0       	rjmp	.+8      	; 0x35a6 <prvGetNextExpireTime+0x64>
    359e:	19 82       	std	Y+1, r1	; 0x01
    35a0:	1a 82       	std	Y+2, r1	; 0x02
    35a2:	1b 82       	std	Y+3, r1	; 0x03
    35a4:	1c 82       	std	Y+4, r1	; 0x04
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	9a 81       	ldd	r25, Y+2	; 0x02
    35aa:	ab 81       	ldd	r26, Y+3	; 0x03
    35ac:	bc 81       	ldd	r27, Y+4	; 0x04
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	26 96       	adiw	r28, 0x06	; 6
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	08 95       	ret

000035be <prvSampleTimeNow>:
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <prvSampleTimeNow+0x6>
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <prvSampleTimeNow+0x8>
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	8d 83       	std	Y+5, r24	; 0x05
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	0e 94 1c 13 	call	0x2638	; 0x2638 <xTaskGetTickCount>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	9a 83       	std	Y+2, r25	; 0x02
    35da:	ab 83       	std	Y+3, r26	; 0x03
    35dc:	bc 83       	std	Y+4, r27	; 0x04
    35de:	80 91 ee 2c 	lds	r24, 0x2CEE	; 0x802cee <xLastTime.4745>
    35e2:	90 91 ef 2c 	lds	r25, 0x2CEF	; 0x802cef <xLastTime.4745+0x1>
    35e6:	a0 91 f0 2c 	lds	r26, 0x2CF0	; 0x802cf0 <xLastTime.4745+0x2>
    35ea:	b0 91 f1 2c 	lds	r27, 0x2CF1	; 0x802cf1 <xLastTime.4745+0x3>
    35ee:	29 81       	ldd	r18, Y+1	; 0x01
    35f0:	3a 81       	ldd	r19, Y+2	; 0x02
    35f2:	4b 81       	ldd	r20, Y+3	; 0x03
    35f4:	5c 81       	ldd	r21, Y+4	; 0x04
    35f6:	28 17       	cp	r18, r24
    35f8:	39 07       	cpc	r19, r25
    35fa:	4a 07       	cpc	r20, r26
    35fc:	5b 07       	cpc	r21, r27
    35fe:	40 f4       	brcc	.+16     	; 0x3610 <prvSampleTimeNow+0x52>
    3600:	0e 94 c7 1c 	call	0x398e	; 0x398e <prvSwitchTimerLists>
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	21 e0       	ldi	r18, 0x01	; 1
    360a:	fc 01       	movw	r30, r24
    360c:	20 83       	st	Z, r18
    360e:	04 c0       	rjmp	.+8      	; 0x3618 <prvSampleTimeNow+0x5a>
    3610:	8d 81       	ldd	r24, Y+5	; 0x05
    3612:	9e 81       	ldd	r25, Y+6	; 0x06
    3614:	fc 01       	movw	r30, r24
    3616:	10 82       	st	Z, r1
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	ab 81       	ldd	r26, Y+3	; 0x03
    361e:	bc 81       	ldd	r27, Y+4	; 0x04
    3620:	80 93 ee 2c 	sts	0x2CEE, r24	; 0x802cee <xLastTime.4745>
    3624:	90 93 ef 2c 	sts	0x2CEF, r25	; 0x802cef <xLastTime.4745+0x1>
    3628:	a0 93 f0 2c 	sts	0x2CF0, r26	; 0x802cf0 <xLastTime.4745+0x2>
    362c:	b0 93 f1 2c 	sts	0x2CF1, r27	; 0x802cf1 <xLastTime.4745+0x3>
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	ab 81       	ldd	r26, Y+3	; 0x03
    3636:	bc 81       	ldd	r27, Y+4	; 0x04
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	26 96       	adiw	r28, 0x06	; 6
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	08 95       	ret

00003648 <prvInsertTimerInActiveList>:
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	2f 97       	sbiw	r28, 0x0f	; 15
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	8a 83       	std	Y+2, r24	; 0x02
    3664:	9b 83       	std	Y+3, r25	; 0x03
    3666:	4c 83       	std	Y+4, r20	; 0x04
    3668:	5d 83       	std	Y+5, r21	; 0x05
    366a:	6e 83       	std	Y+6, r22	; 0x06
    366c:	7f 83       	std	Y+7, r23	; 0x07
    366e:	08 87       	std	Y+8, r16	; 0x08
    3670:	19 87       	std	Y+9, r17	; 0x09
    3672:	2a 87       	std	Y+10, r18	; 0x0a
    3674:	3b 87       	std	Y+11, r19	; 0x0b
    3676:	cc 86       	std	Y+12, r12	; 0x0c
    3678:	dd 86       	std	Y+13, r13	; 0x0d
    367a:	ee 86       	std	Y+14, r14	; 0x0e
    367c:	ff 86       	std	Y+15, r15	; 0x0f
    367e:	19 82       	std	Y+1, r1	; 0x01
    3680:	2a 81       	ldd	r18, Y+2	; 0x02
    3682:	3b 81       	ldd	r19, Y+3	; 0x03
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	9d 81       	ldd	r25, Y+5	; 0x05
    3688:	ae 81       	ldd	r26, Y+6	; 0x06
    368a:	bf 81       	ldd	r27, Y+7	; 0x07
    368c:	f9 01       	movw	r30, r18
    368e:	82 83       	std	Z+2, r24	; 0x02
    3690:	93 83       	std	Z+3, r25	; 0x03
    3692:	a4 83       	std	Z+4, r26	; 0x04
    3694:	b5 83       	std	Z+5, r27	; 0x05
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	2a 81       	ldd	r18, Y+2	; 0x02
    369c:	3b 81       	ldd	r19, Y+3	; 0x03
    369e:	fc 01       	movw	r30, r24
    36a0:	22 87       	std	Z+10, r18	; 0x0a
    36a2:	33 87       	std	Z+11, r19	; 0x0b
    36a4:	2c 81       	ldd	r18, Y+4	; 0x04
    36a6:	3d 81       	ldd	r19, Y+5	; 0x05
    36a8:	4e 81       	ldd	r20, Y+6	; 0x06
    36aa:	5f 81       	ldd	r21, Y+7	; 0x07
    36ac:	88 85       	ldd	r24, Y+8	; 0x08
    36ae:	99 85       	ldd	r25, Y+9	; 0x09
    36b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    36b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    36b4:	82 17       	cp	r24, r18
    36b6:	93 07       	cpc	r25, r19
    36b8:	a4 07       	cpc	r26, r20
    36ba:	b5 07       	cpc	r27, r21
    36bc:	40 f1       	brcs	.+80     	; 0x370e <prvInsertTimerInActiveList+0xc6>
    36be:	28 85       	ldd	r18, Y+8	; 0x08
    36c0:	39 85       	ldd	r19, Y+9	; 0x09
    36c2:	4a 85       	ldd	r20, Y+10	; 0x0a
    36c4:	5b 85       	ldd	r21, Y+11	; 0x0b
    36c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    36c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    36cc:	bf 85       	ldd	r27, Y+15	; 0x0f
    36ce:	28 1b       	sub	r18, r24
    36d0:	39 0b       	sbc	r19, r25
    36d2:	4a 0b       	sbc	r20, r26
    36d4:	5b 0b       	sbc	r21, r27
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	9b 81       	ldd	r25, Y+3	; 0x03
    36da:	fc 01       	movw	r30, r24
    36dc:	86 85       	ldd	r24, Z+14	; 0x0e
    36de:	97 85       	ldd	r25, Z+15	; 0x0f
    36e0:	a0 89       	ldd	r26, Z+16	; 0x10
    36e2:	b1 89       	ldd	r27, Z+17	; 0x11
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	4a 07       	cpc	r20, r26
    36ea:	5b 07       	cpc	r21, r27
    36ec:	18 f0       	brcs	.+6      	; 0x36f4 <prvInsertTimerInActiveList+0xac>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	89 83       	std	Y+1, r24	; 0x01
    36f2:	36 c0       	rjmp	.+108    	; 0x3760 <prvInsertTimerInActiveList+0x118>
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	9c 01       	movw	r18, r24
    36fa:	2e 5f       	subi	r18, 0xFE	; 254
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	80 91 e8 2c 	lds	r24, 0x2CE8	; 0x802ce8 <pxOverflowTimerList>
    3702:	90 91 e9 2c 	lds	r25, 0x2CE9	; 0x802ce9 <pxOverflowTimerList+0x1>
    3706:	b9 01       	movw	r22, r18
    3708:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>
    370c:	29 c0       	rjmp	.+82     	; 0x3760 <prvInsertTimerInActiveList+0x118>
    370e:	28 85       	ldd	r18, Y+8	; 0x08
    3710:	39 85       	ldd	r19, Y+9	; 0x09
    3712:	4a 85       	ldd	r20, Y+10	; 0x0a
    3714:	5b 85       	ldd	r21, Y+11	; 0x0b
    3716:	8c 85       	ldd	r24, Y+12	; 0x0c
    3718:	9d 85       	ldd	r25, Y+13	; 0x0d
    371a:	ae 85       	ldd	r26, Y+14	; 0x0e
    371c:	bf 85       	ldd	r27, Y+15	; 0x0f
    371e:	28 17       	cp	r18, r24
    3720:	39 07       	cpc	r19, r25
    3722:	4a 07       	cpc	r20, r26
    3724:	5b 07       	cpc	r21, r27
    3726:	80 f4       	brcc	.+32     	; 0x3748 <prvInsertTimerInActiveList+0x100>
    3728:	2c 81       	ldd	r18, Y+4	; 0x04
    372a:	3d 81       	ldd	r19, Y+5	; 0x05
    372c:	4e 81       	ldd	r20, Y+6	; 0x06
    372e:	5f 81       	ldd	r21, Y+7	; 0x07
    3730:	8c 85       	ldd	r24, Y+12	; 0x0c
    3732:	9d 85       	ldd	r25, Y+13	; 0x0d
    3734:	ae 85       	ldd	r26, Y+14	; 0x0e
    3736:	bf 85       	ldd	r27, Y+15	; 0x0f
    3738:	28 17       	cp	r18, r24
    373a:	39 07       	cpc	r19, r25
    373c:	4a 07       	cpc	r20, r26
    373e:	5b 07       	cpc	r21, r27
    3740:	18 f0       	brcs	.+6      	; 0x3748 <prvInsertTimerInActiveList+0x100>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	0c c0       	rjmp	.+24     	; 0x3760 <prvInsertTimerInActiveList+0x118>
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	9b 81       	ldd	r25, Y+3	; 0x03
    374c:	9c 01       	movw	r18, r24
    374e:	2e 5f       	subi	r18, 0xFE	; 254
    3750:	3f 4f       	sbci	r19, 0xFF	; 255
    3752:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3756:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    375a:	b9 01       	movw	r22, r18
    375c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	2f 96       	adiw	r28, 0x0f	; 15
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	08 95       	ret

0000377a <prvProcessReceivedCommands>:
    377a:	cf 92       	push	r12
    377c:	df 92       	push	r13
    377e:	ef 92       	push	r14
    3780:	ff 92       	push	r15
    3782:	0f 93       	push	r16
    3784:	1f 93       	push	r17
    3786:	cf 93       	push	r28
    3788:	df 93       	push	r29
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62
    378e:	65 97       	sbiw	r28, 0x15	; 21
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	e0 c0       	rjmp	.+448    	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    3796:	8a 85       	ldd	r24, Y+10	; 0x0a
    3798:	88 23       	and	r24, r24
    379a:	fc f4       	brge	.+62     	; 0x37da <prvProcessReceivedCommands+0x60>
    379c:	ce 01       	movw	r24, r28
    379e:	0a 96       	adiw	r24, 0x0a	; 10
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	9a 81       	ldd	r25, Y+2	; 0x02
    37aa:	fc 01       	movw	r30, r24
    37ac:	20 81       	ld	r18, Z
    37ae:	31 81       	ldd	r19, Z+1	; 0x01
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	fc 01       	movw	r30, r24
    37b6:	84 81       	ldd	r24, Z+4	; 0x04
    37b8:	95 81       	ldd	r25, Z+5	; 0x05
    37ba:	a6 81       	ldd	r26, Z+6	; 0x06
    37bc:	b7 81       	ldd	r27, Z+7	; 0x07
    37be:	49 81       	ldd	r20, Y+1	; 0x01
    37c0:	5a 81       	ldd	r21, Y+2	; 0x02
    37c2:	fa 01       	movw	r30, r20
    37c4:	02 80       	ldd	r0, Z+2	; 0x02
    37c6:	f3 81       	ldd	r31, Z+3	; 0x03
    37c8:	e0 2d       	mov	r30, r0
    37ca:	ec 8b       	std	Y+20, r30	; 0x14
    37cc:	fd 8b       	std	Y+21, r31	; 0x15
    37ce:	ac 01       	movw	r20, r24
    37d0:	bd 01       	movw	r22, r26
    37d2:	8c 89       	ldd	r24, Y+20	; 0x14
    37d4:	9d 89       	ldd	r25, Y+21	; 0x15
    37d6:	f9 01       	movw	r30, r18
    37d8:	19 95       	eicall
    37da:	8a 85       	ldd	r24, Y+10	; 0x0a
    37dc:	88 23       	and	r24, r24
    37de:	0c f4       	brge	.+2      	; 0x37e2 <prvProcessReceivedCommands+0x68>
    37e0:	ba c0       	rjmp	.+372    	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    37e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e4:	98 89       	ldd	r25, Y+16	; 0x10
    37e6:	8b 83       	std	Y+3, r24	; 0x03
    37e8:	9c 83       	std	Y+4, r25	; 0x04
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	fc 01       	movw	r30, r24
    37f0:	84 85       	ldd	r24, Z+12	; 0x0c
    37f2:	95 85       	ldd	r25, Z+13	; 0x0d
    37f4:	89 2b       	or	r24, r25
    37f6:	29 f0       	breq	.+10     	; 0x3802 <prvProcessReceivedCommands+0x88>
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	9c 81       	ldd	r25, Y+4	; 0x04
    37fc:	02 96       	adiw	r24, 0x02	; 2
    37fe:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    3802:	ce 01       	movw	r24, r28
    3804:	43 96       	adiw	r24, 0x13	; 19
    3806:	0e 94 df 1a 	call	0x35be	; 0x35be <prvSampleTimeNow>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8d 83       	std	Y+5, r24	; 0x05
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	af 83       	std	Y+7, r26	; 0x07
    3814:	b8 87       	std	Y+8, r27	; 0x08
    3816:	8a 85       	ldd	r24, Y+10	; 0x0a
    3818:	08 2e       	mov	r0, r24
    381a:	00 0c       	add	r0, r0
    381c:	99 0b       	sbc	r25, r25
    381e:	09 2e       	mov	r0, r25
    3820:	00 0c       	add	r0, r0
    3822:	aa 0b       	sbc	r26, r26
    3824:	bb 0b       	sbc	r27, r27
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	29 e0       	ldi	r18, 0x09	; 9
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	84 1b       	sub	r24, r20
    3830:	95 0b       	sbc	r25, r21
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	08 f4       	brcc	.+2      	; 0x383a <prvProcessReceivedCommands+0xc0>
    3838:	8d c0       	rjmp	.+282    	; 0x3954 <prvProcessReceivedCommands+0x1da>
    383a:	fc 01       	movw	r30, r24
    383c:	88 27       	eor	r24, r24
    383e:	e2 50       	subi	r30, 0x02	; 2
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	8f 4f       	sbci	r24, 0xFF	; 255
    3844:	0c 94 c1 2b 	jmp	0x5782	; 0x5782 <__tablejump2__>
    3848:	eb 84       	ldd	r14, Y+11	; 0x0b
    384a:	fc 84       	ldd	r15, Y+12	; 0x0c
    384c:	0d 85       	ldd	r16, Y+13	; 0x0d
    384e:	1e 85       	ldd	r17, Y+14	; 0x0e
    3850:	2b 85       	ldd	r18, Y+11	; 0x0b
    3852:	3c 85       	ldd	r19, Y+12	; 0x0c
    3854:	4d 85       	ldd	r20, Y+13	; 0x0d
    3856:	5e 85       	ldd	r21, Y+14	; 0x0e
    3858:	8b 81       	ldd	r24, Y+3	; 0x03
    385a:	9c 81       	ldd	r25, Y+4	; 0x04
    385c:	fc 01       	movw	r30, r24
    385e:	86 85       	ldd	r24, Z+14	; 0x0e
    3860:	97 85       	ldd	r25, Z+15	; 0x0f
    3862:	a0 89       	ldd	r26, Z+16	; 0x10
    3864:	b1 89       	ldd	r27, Z+17	; 0x11
    3866:	82 0f       	add	r24, r18
    3868:	93 1f       	adc	r25, r19
    386a:	a4 1f       	adc	r26, r20
    386c:	b5 1f       	adc	r27, r21
    386e:	2d 81       	ldd	r18, Y+5	; 0x05
    3870:	3e 81       	ldd	r19, Y+6	; 0x06
    3872:	4f 81       	ldd	r20, Y+7	; 0x07
    3874:	58 85       	ldd	r21, Y+8	; 0x08
    3876:	eb 81       	ldd	r30, Y+3	; 0x03
    3878:	fc 81       	ldd	r31, Y+4	; 0x04
    387a:	67 01       	movw	r12, r14
    387c:	78 01       	movw	r14, r16
    387e:	89 01       	movw	r16, r18
    3880:	9a 01       	movw	r18, r20
    3882:	ac 01       	movw	r20, r24
    3884:	bd 01       	movw	r22, r26
    3886:	cf 01       	movw	r24, r30
    3888:	0e 94 24 1b 	call	0x3648	; 0x3648 <prvInsertTimerInActiveList>
    388c:	88 23       	and	r24, r24
    388e:	09 f4       	brne	.+2      	; 0x3892 <prvProcessReceivedCommands+0x118>
    3890:	62 c0       	rjmp	.+196    	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	9c 81       	ldd	r25, Y+4	; 0x04
    3896:	fc 01       	movw	r30, r24
    3898:	25 89       	ldd	r18, Z+21	; 0x15
    389a:	36 89       	ldd	r19, Z+22	; 0x16
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	9c 81       	ldd	r25, Y+4	; 0x04
    38a0:	f9 01       	movw	r30, r18
    38a2:	19 95       	eicall
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	9c 81       	ldd	r25, Y+4	; 0x04
    38a8:	fc 01       	movw	r30, r24
    38aa:	82 89       	ldd	r24, Z+18	; 0x12
    38ac:	81 30       	cpi	r24, 0x01	; 1
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <prvProcessReceivedCommands+0x138>
    38b0:	52 c0       	rjmp	.+164    	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    38b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    38b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    38b6:	4d 85       	ldd	r20, Y+13	; 0x0d
    38b8:	5e 85       	ldd	r21, Y+14	; 0x0e
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	9c 81       	ldd	r25, Y+4	; 0x04
    38be:	fc 01       	movw	r30, r24
    38c0:	86 85       	ldd	r24, Z+14	; 0x0e
    38c2:	97 85       	ldd	r25, Z+15	; 0x0f
    38c4:	a0 89       	ldd	r26, Z+16	; 0x10
    38c6:	b1 89       	ldd	r27, Z+17	; 0x11
    38c8:	82 0f       	add	r24, r18
    38ca:	93 1f       	adc	r25, r19
    38cc:	a4 1f       	adc	r26, r20
    38ce:	b5 1f       	adc	r27, r21
    38d0:	eb 81       	ldd	r30, Y+3	; 0x03
    38d2:	fc 81       	ldd	r31, Y+4	; 0x04
    38d4:	c1 2c       	mov	r12, r1
    38d6:	d1 2c       	mov	r13, r1
    38d8:	76 01       	movw	r14, r12
    38da:	00 e0       	ldi	r16, 0x00	; 0
    38dc:	10 e0       	ldi	r17, 0x00	; 0
    38de:	9c 01       	movw	r18, r24
    38e0:	ad 01       	movw	r20, r26
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	cf 01       	movw	r24, r30
    38e6:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTimerGenericCommand>
    38ea:	89 87       	std	Y+9, r24	; 0x09
    38ec:	34 c0       	rjmp	.+104    	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    38ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    38f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    38f2:	ad 85       	ldd	r26, Y+13	; 0x0d
    38f4:	be 85       	ldd	r27, Y+14	; 0x0e
    38f6:	2b 81       	ldd	r18, Y+3	; 0x03
    38f8:	3c 81       	ldd	r19, Y+4	; 0x04
    38fa:	f9 01       	movw	r30, r18
    38fc:	86 87       	std	Z+14, r24	; 0x0e
    38fe:	97 87       	std	Z+15, r25	; 0x0f
    3900:	a0 8b       	std	Z+16, r26	; 0x10
    3902:	b1 8b       	std	Z+17, r27	; 0x11
    3904:	8b 81       	ldd	r24, Y+3	; 0x03
    3906:	9c 81       	ldd	r25, Y+4	; 0x04
    3908:	fc 01       	movw	r30, r24
    390a:	26 85       	ldd	r18, Z+14	; 0x0e
    390c:	37 85       	ldd	r19, Z+15	; 0x0f
    390e:	40 89       	ldd	r20, Z+16	; 0x10
    3910:	51 89       	ldd	r21, Z+17	; 0x11
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	af 81       	ldd	r26, Y+7	; 0x07
    3918:	b8 85       	ldd	r27, Y+8	; 0x08
    391a:	82 0f       	add	r24, r18
    391c:	93 1f       	adc	r25, r19
    391e:	a4 1f       	adc	r26, r20
    3920:	b5 1f       	adc	r27, r21
    3922:	ed 80       	ldd	r14, Y+5	; 0x05
    3924:	fe 80       	ldd	r15, Y+6	; 0x06
    3926:	0f 81       	ldd	r16, Y+7	; 0x07
    3928:	18 85       	ldd	r17, Y+8	; 0x08
    392a:	2d 81       	ldd	r18, Y+5	; 0x05
    392c:	3e 81       	ldd	r19, Y+6	; 0x06
    392e:	4f 81       	ldd	r20, Y+7	; 0x07
    3930:	58 85       	ldd	r21, Y+8	; 0x08
    3932:	eb 81       	ldd	r30, Y+3	; 0x03
    3934:	fc 81       	ldd	r31, Y+4	; 0x04
    3936:	67 01       	movw	r12, r14
    3938:	78 01       	movw	r14, r16
    393a:	89 01       	movw	r16, r18
    393c:	9a 01       	movw	r18, r20
    393e:	ac 01       	movw	r20, r24
    3940:	bd 01       	movw	r22, r26
    3942:	cf 01       	movw	r24, r30
    3944:	0e 94 24 1b 	call	0x3648	; 0x3648 <prvInsertTimerInActiveList>
    3948:	06 c0       	rjmp	.+12     	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	9c 81       	ldd	r25, Y+4	; 0x04
    394e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vPortFree>
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <prvProcessReceivedCommands+0x1dc>
    3954:	00 00       	nop
    3956:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    395a:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    395e:	be 01       	movw	r22, r28
    3960:	66 5f       	subi	r22, 0xF6	; 246
    3962:	7f 4f       	sbci	r23, 0xFF	; 255
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	a9 01       	movw	r20, r18
    396a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <xQueueReceive>
    396e:	88 23       	and	r24, r24
    3970:	09 f0       	breq	.+2      	; 0x3974 <prvProcessReceivedCommands+0x1fa>
    3972:	11 cf       	rjmp	.-478    	; 0x3796 <prvProcessReceivedCommands+0x1c>
    3974:	00 00       	nop
    3976:	65 96       	adiw	r28, 0x15	; 21
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	df 90       	pop	r13
    398a:	cf 90       	pop	r12
    398c:	08 95       	ret

0000398e <prvSwitchTimerLists>:
    398e:	cf 92       	push	r12
    3990:	df 92       	push	r13
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	2d 97       	sbiw	r28, 0x0d	; 13
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	82 c0       	rjmp	.+260    	; 0x3aae <prvSwitchTimerLists+0x120>
    39aa:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    39ae:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    39b2:	fc 01       	movw	r30, r24
    39b4:	87 81       	ldd	r24, Z+7	; 0x07
    39b6:	90 85       	ldd	r25, Z+8	; 0x08
    39b8:	fc 01       	movw	r30, r24
    39ba:	80 81       	ld	r24, Z
    39bc:	91 81       	ldd	r25, Z+1	; 0x01
    39be:	a2 81       	ldd	r26, Z+2	; 0x02
    39c0:	b3 81       	ldd	r27, Z+3	; 0x03
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	ab 83       	std	Y+3, r26	; 0x03
    39c8:	bc 83       	std	Y+4, r27	; 0x04
    39ca:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    39ce:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    39d2:	fc 01       	movw	r30, r24
    39d4:	87 81       	ldd	r24, Z+7	; 0x07
    39d6:	90 85       	ldd	r25, Z+8	; 0x08
    39d8:	fc 01       	movw	r30, r24
    39da:	80 85       	ldd	r24, Z+8	; 0x08
    39dc:	91 85       	ldd	r25, Z+9	; 0x09
    39de:	8d 83       	std	Y+5, r24	; 0x05
    39e0:	9e 83       	std	Y+6, r25	; 0x06
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	02 96       	adiw	r24, 0x02	; 2
    39e8:	0e 94 46 07 	call	0xe8c	; 0xe8c <uxListRemove>
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	fc 01       	movw	r30, r24
    39f2:	25 89       	ldd	r18, Z+21	; 0x15
    39f4:	36 89       	ldd	r19, Z+22	; 0x16
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	f9 01       	movw	r30, r18
    39fc:	19 95       	eicall
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	9e 81       	ldd	r25, Y+6	; 0x06
    3a02:	fc 01       	movw	r30, r24
    3a04:	82 89       	ldd	r24, Z+18	; 0x12
    3a06:	81 30       	cpi	r24, 0x01	; 1
    3a08:	09 f0       	breq	.+2      	; 0x3a0c <prvSwitchTimerLists+0x7e>
    3a0a:	51 c0       	rjmp	.+162    	; 0x3aae <prvSwitchTimerLists+0x120>
    3a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a10:	fc 01       	movw	r30, r24
    3a12:	26 85       	ldd	r18, Z+14	; 0x0e
    3a14:	37 85       	ldd	r19, Z+15	; 0x0f
    3a16:	40 89       	ldd	r20, Z+16	; 0x10
    3a18:	51 89       	ldd	r21, Z+17	; 0x11
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a20:	bc 81       	ldd	r27, Y+4	; 0x04
    3a22:	82 0f       	add	r24, r18
    3a24:	93 1f       	adc	r25, r19
    3a26:	a4 1f       	adc	r26, r20
    3a28:	b5 1f       	adc	r27, r21
    3a2a:	8f 83       	std	Y+7, r24	; 0x07
    3a2c:	98 87       	std	Y+8, r25	; 0x08
    3a2e:	a9 87       	std	Y+9, r26	; 0x09
    3a30:	ba 87       	std	Y+10, r27	; 0x0a
    3a32:	2f 81       	ldd	r18, Y+7	; 0x07
    3a34:	38 85       	ldd	r19, Y+8	; 0x08
    3a36:	49 85       	ldd	r20, Y+9	; 0x09
    3a38:	5a 85       	ldd	r21, Y+10	; 0x0a
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a40:	bc 81       	ldd	r27, Y+4	; 0x04
    3a42:	82 17       	cp	r24, r18
    3a44:	93 07       	cpc	r25, r19
    3a46:	a4 07       	cpc	r26, r20
    3a48:	b5 07       	cpc	r27, r21
    3a4a:	f8 f4       	brcc	.+62     	; 0x3a8a <prvSwitchTimerLists+0xfc>
    3a4c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a4e:	3e 81       	ldd	r19, Y+6	; 0x06
    3a50:	8f 81       	ldd	r24, Y+7	; 0x07
    3a52:	98 85       	ldd	r25, Y+8	; 0x08
    3a54:	a9 85       	ldd	r26, Y+9	; 0x09
    3a56:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a58:	f9 01       	movw	r30, r18
    3a5a:	82 83       	std	Z+2, r24	; 0x02
    3a5c:	93 83       	std	Z+3, r25	; 0x03
    3a5e:	a4 83       	std	Z+4, r26	; 0x04
    3a60:	b5 83       	std	Z+5, r27	; 0x05
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	2d 81       	ldd	r18, Y+5	; 0x05
    3a68:	3e 81       	ldd	r19, Y+6	; 0x06
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	22 87       	std	Z+10, r18	; 0x0a
    3a6e:	33 87       	std	Z+11, r19	; 0x0b
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	9c 01       	movw	r18, r24
    3a76:	2e 5f       	subi	r18, 0xFE	; 254
    3a78:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7a:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3a7e:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    3a82:	b9 01       	movw	r22, r18
    3a84:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vListInsert>
    3a88:	12 c0       	rjmp	.+36     	; 0x3aae <prvSwitchTimerLists+0x120>
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a90:	bc 81       	ldd	r27, Y+4	; 0x04
    3a92:	ed 81       	ldd	r30, Y+5	; 0x05
    3a94:	fe 81       	ldd	r31, Y+6	; 0x06
    3a96:	c1 2c       	mov	r12, r1
    3a98:	d1 2c       	mov	r13, r1
    3a9a:	76 01       	movw	r14, r12
    3a9c:	00 e0       	ldi	r16, 0x00	; 0
    3a9e:	10 e0       	ldi	r17, 0x00	; 0
    3aa0:	9c 01       	movw	r18, r24
    3aa2:	ad 01       	movw	r20, r26
    3aa4:	60 e0       	ldi	r22, 0x00	; 0
    3aa6:	cf 01       	movw	r24, r30
    3aa8:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTimerGenericCommand>
    3aac:	8b 87       	std	Y+11, r24	; 0x0b
    3aae:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3ab2:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	80 81       	ld	r24, Z
    3aba:	88 23       	and	r24, r24
    3abc:	09 f0       	breq	.+2      	; 0x3ac0 <prvSwitchTimerLists+0x132>
    3abe:	75 cf       	rjmp	.-278    	; 0x39aa <prvSwitchTimerLists+0x1c>
    3ac0:	80 91 e6 2c 	lds	r24, 0x2CE6	; 0x802ce6 <pxCurrentTimerList>
    3ac4:	90 91 e7 2c 	lds	r25, 0x2CE7	; 0x802ce7 <pxCurrentTimerList+0x1>
    3ac8:	8c 87       	std	Y+12, r24	; 0x0c
    3aca:	9d 87       	std	Y+13, r25	; 0x0d
    3acc:	80 91 e8 2c 	lds	r24, 0x2CE8	; 0x802ce8 <pxOverflowTimerList>
    3ad0:	90 91 e9 2c 	lds	r25, 0x2CE9	; 0x802ce9 <pxOverflowTimerList+0x1>
    3ad4:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <pxCurrentTimerList>
    3ad8:	90 93 e7 2c 	sts	0x2CE7, r25	; 0x802ce7 <pxCurrentTimerList+0x1>
    3adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ae0:	80 93 e8 2c 	sts	0x2CE8, r24	; 0x802ce8 <pxOverflowTimerList>
    3ae4:	90 93 e9 2c 	sts	0x2CE9, r25	; 0x802ce9 <pxOverflowTimerList+0x1>
    3ae8:	00 00       	nop
    3aea:	2d 96       	adiw	r28, 0x0d	; 13
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	df 90       	pop	r13
    3afe:	cf 90       	pop	r12
    3b00:	08 95       	ret

00003b02 <prvCheckForValidListAndQueue>:
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3b0e:	ff 93       	push	r31
    3b10:	f8 7f       	andi	r31, 0xF8	; 248
    3b12:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3b16:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    3b1a:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    3b1e:	89 2b       	or	r24, r25
    3b20:	e9 f4       	brne	.+58     	; 0x3b5c <prvCheckForValidListAndQueue+0x5a>
    3b22:	80 ed       	ldi	r24, 0xD0	; 208
    3b24:	9c e2       	ldi	r25, 0x2C	; 44
    3b26:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    3b2a:	8b ed       	ldi	r24, 0xDB	; 219
    3b2c:	9c e2       	ldi	r25, 0x2C	; 44
    3b2e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <vListInitialise>
    3b32:	80 ed       	ldi	r24, 0xD0	; 208
    3b34:	9c e2       	ldi	r25, 0x2C	; 44
    3b36:	80 93 e6 2c 	sts	0x2CE6, r24	; 0x802ce6 <pxCurrentTimerList>
    3b3a:	90 93 e7 2c 	sts	0x2CE7, r25	; 0x802ce7 <pxCurrentTimerList+0x1>
    3b3e:	8b ed       	ldi	r24, 0xDB	; 219
    3b40:	9c e2       	ldi	r25, 0x2C	; 44
    3b42:	80 93 e8 2c 	sts	0x2CE8, r24	; 0x802ce8 <pxOverflowTimerList>
    3b46:	90 93 e9 2c 	sts	0x2CE9, r25	; 0x802ce9 <pxOverflowTimerList+0x1>
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	69 e0       	ldi	r22, 0x09	; 9
    3b4e:	85 e0       	ldi	r24, 0x05	; 5
    3b50:	0e 94 aa 0b 	call	0x1754	; 0x1754 <xQueueGenericCreate>
    3b54:	80 93 ea 2c 	sts	0x2CEA, r24	; 0x802cea <xTimerQueue>
    3b58:	90 93 eb 2c 	sts	0x2CEB, r25	; 0x802ceb <xTimerQueue+0x1>
    3b5c:	ff 91       	pop	r31
    3b5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    3b62:	00 00       	nop
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	08 95       	ret

00003b6a <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	cf 93       	push	r28
    3b70:	df 93       	push	r29
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	64 97       	sbiw	r28, 0x14	; 20
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	8b 87       	std	Y+11, r24	; 0x0b
    3b7e:	9c 87       	std	Y+12, r25	; 0x0c
    3b80:	6d 87       	std	Y+13, r22	; 0x0d
    3b82:	7e 87       	std	Y+14, r23	; 0x0e
    3b84:	2f 87       	std	Y+15, r18	; 0x0f
    3b86:	38 8b       	std	Y+16, r19	; 0x10
    3b88:	49 8b       	std	Y+17, r20	; 0x11
    3b8a:	5a 8b       	std	Y+18, r21	; 0x12
    3b8c:	0b 8b       	std	Y+19, r16	; 0x13
    3b8e:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    3b90:	8e ef       	ldi	r24, 0xFE	; 254
    3b92:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    3b94:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b96:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b98:	8b 83       	std	Y+3, r24	; 0x03
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    3b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba0:	8d 83       	std	Y+5, r24	; 0x05
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    3ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba6:	98 89       	ldd	r25, Y+16	; 0x10
    3ba8:	a9 89       	ldd	r26, Y+17	; 0x11
    3baa:	ba 89       	ldd	r27, Y+18	; 0x12
    3bac:	8f 83       	std	Y+7, r24	; 0x07
    3bae:	98 87       	std	Y+8, r25	; 0x08
    3bb0:	a9 87       	std	Y+9, r26	; 0x09
    3bb2:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3bb4:	80 91 ea 2c 	lds	r24, 0x2CEA	; 0x802cea <xTimerQueue>
    3bb8:	90 91 eb 2c 	lds	r25, 0x2CEB	; 0x802ceb <xTimerQueue+0x1>
    3bbc:	4b 89       	ldd	r20, Y+19	; 0x13
    3bbe:	5c 89       	ldd	r21, Y+20	; 0x14
    3bc0:	be 01       	movw	r22, r28
    3bc2:	6e 5f       	subi	r22, 0xFE	; 254
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xQueueGenericSendFromISR>
    3bcc:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    3bce:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3bd0:	64 96       	adiw	r28, 0x14	; 20
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    3be8:	80 e5       	ldi	r24, 0x50	; 80
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	20 e5       	ldi	r18, 0x50	; 80
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	f9 01       	movw	r30, r18
    3bf2:	20 81       	ld	r18, Z
    3bf4:	21 60       	ori	r18, 0x01	; 1
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    3bfa:	80 e5       	ldi	r24, 0x50	; 80
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	fc 01       	movw	r30, r24
    3c00:	81 81       	ldd	r24, Z+1	; 0x01
    3c02:	88 2f       	mov	r24, r24
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	81 70       	andi	r24, 0x01	; 1
    3c08:	99 27       	eor	r25, r25
    3c0a:	89 2b       	or	r24, r25
    3c0c:	b1 f3       	breq	.-20     	; 0x3bfa <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	0e 94 de 01 	call	0x3bc	; 0x3bc <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    3c14:	8e e1       	ldi	r24, 0x1E	; 30
    3c16:	0e 94 a7 01 	call	0x34e	; 0x34e <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	0e 94 c7 01 	call	0x38e	; 0x38e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    3c22:	43 e0       	ldi	r20, 0x03	; 3
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	80 e4       	ldi	r24, 0x40	; 64
    3c28:	0e 94 72 01 	call	0x2e4	; 0x2e4 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    3c2c:	80 e5       	ldi	r24, 0x50	; 80
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	20 e5       	ldi	r18, 0x50	; 80
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	f9 01       	movw	r30, r18
    3c36:	20 81       	ld	r18, Z
    3c38:	28 60       	ori	r18, 0x08	; 8
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    3c3e:	80 e5       	ldi	r24, 0x50	; 80
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	fc 01       	movw	r30, r24
    3c44:	81 81       	ldd	r24, Z+1	; 0x01
    3c46:	88 2f       	mov	r24, r24
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	88 70       	andi	r24, 0x08	; 8
    3c4c:	99 27       	eor	r25, r25
    3c4e:	89 2b       	or	r24, r25
    3c50:	b1 f3       	breq	.-20     	; 0x3c3e <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    3c52:	64 e0       	ldi	r22, 0x04	; 4
    3c54:	80 ec       	ldi	r24, 0xC0	; 192
    3c56:	0e 94 8f 01 	call	0x31e	; 0x31e <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    3c5a:	80 e5       	ldi	r24, 0x50	; 80
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	20 e5       	ldi	r18, 0x50	; 80
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	f9 01       	movw	r30, r18
    3c64:	20 81       	ld	r18, Z
    3c66:	20 61       	ori	r18, 0x10	; 16
    3c68:	fc 01       	movw	r30, r24
    3c6a:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	0e 94 c7 01 	call	0x38e	; 0x38e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    3c74:	80 e5       	ldi	r24, 0x50	; 80
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	fc 01       	movw	r30, r24
    3c7a:	81 81       	ldd	r24, Z+1	; 0x01
    3c7c:	88 2f       	mov	r24, r24
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	80 71       	andi	r24, 0x10	; 16
    3c82:	99 27       	eor	r25, r25
    3c84:	89 2b       	or	r24, r25
    3c86:	b1 f3       	breq	.-20     	; 0x3c74 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    3c88:	84 e0       	ldi	r24, 0x04	; 4
    3c8a:	0e 94 de 01 	call	0x3bc	; 0x3bc <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    3c8e:	87 e0       	ldi	r24, 0x07	; 7
    3c90:	0e 94 a7 01 	call	0x34e	; 0x34e <CLKSYS_Disable>
    3c94:	00 00       	nop
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	08 95       	ret

00003c9c <vApplicationIdleHook>:


TaskHandle_t ProtocolHandlerTask;

void vApplicationIdleHook( void )
{	
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
	
}
    3ca4:	00 00       	nop
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	08 95       	ret

00003cac <main>:

int main(void)
{
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	1f 92       	push	r1
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    resetReason_t reason = getResetReason();
    3cbc:	0e 94 30 29 	call	0x5260	; 0x5260 <getResetReason>
    3cc0:	89 83       	std	Y+1, r24	; 0x01

	vInitClock();
    3cc2:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <vInitClock>
	vInitDisplay();
    3cc6:	0e 94 68 20 	call	0x40d0	; 0x40d0 <vInitDisplay>
	
	xTaskCreate( vProtocolHandlerTask, (const char *) "ProtocolHandlerTask", configMINIMAL_STACK_SIZE+1000, NULL, 1, NULL);
    3cca:	e1 2c       	mov	r14, r1
    3ccc:	f1 2c       	mov	r15, r1
    3cce:	01 e0       	ldi	r16, 0x01	; 1
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 eb       	ldi	r20, 0xB0	; 176
    3cd6:	54 e0       	ldi	r21, 0x04	; 4
    3cd8:	6d e4       	ldi	r22, 0x4D	; 77
    3cda:	70 e2       	ldi	r23, 0x20	; 32
    3cdc:	8e e1       	ldi	r24, 0x1E	; 30
    3cde:	98 e2       	ldi	r25, 0x28	; 40
    3ce0:	0e 94 2b 10 	call	0x2056	; 0x2056 <xTaskCreate>
	
	vDisplayClear();
    3ce4:	0e 94 b3 22 	call	0x4566	; 0x4566 <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"FreeRTOS 10.0.1");
    3ce8:	81 e6       	ldi	r24, 0x61	; 97
    3cea:	90 e2       	ldi	r25, 0x20	; 32
    3cec:	89 2f       	mov	r24, r25
    3cee:	8f 93       	push	r24
    3cf0:	81 e6       	ldi	r24, 0x61	; 97
    3cf2:	90 e2       	ldi	r25, 0x20	; 32
    3cf4:	8f 93       	push	r24
    3cf6:	1f 92       	push	r1
    3cf8:	1f 92       	push	r1
    3cfa:	1f 92       	push	r1
    3cfc:	1f 92       	push	r1
    3cfe:	0e 94 c5 22 	call	0x458a	; 0x458a <vDisplayWriteStringAtPos>
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
	vDisplayWriteStringAtPos(1,0,"EDUBoard 1.0");
    3d0e:	81 e7       	ldi	r24, 0x71	; 113
    3d10:	90 e2       	ldi	r25, 0x20	; 32
    3d12:	89 2f       	mov	r24, r25
    3d14:	8f 93       	push	r24
    3d16:	81 e7       	ldi	r24, 0x71	; 113
    3d18:	90 e2       	ldi	r25, 0x20	; 32
    3d1a:	8f 93       	push	r24
    3d1c:	1f 92       	push	r1
    3d1e:	1f 92       	push	r1
    3d20:	1f 92       	push	r1
    3d22:	81 e0       	ldi	r24, 0x01	; 1
    3d24:	8f 93       	push	r24
    3d26:	0e 94 c5 22 	call	0x458a	; 0x458a <vDisplayWriteStringAtPos>
    3d2a:	0f 90       	pop	r0
    3d2c:	0f 90       	pop	r0
    3d2e:	0f 90       	pop	r0
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	0f 90       	pop	r0
	vDisplayWriteStringAtPos(2,0,"Template");
    3d36:	8e e7       	ldi	r24, 0x7E	; 126
    3d38:	90 e2       	ldi	r25, 0x20	; 32
    3d3a:	89 2f       	mov	r24, r25
    3d3c:	8f 93       	push	r24
    3d3e:	8e e7       	ldi	r24, 0x7E	; 126
    3d40:	90 e2       	ldi	r25, 0x20	; 32
    3d42:	8f 93       	push	r24
    3d44:	1f 92       	push	r1
    3d46:	1f 92       	push	r1
    3d48:	1f 92       	push	r1
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
    3d4c:	8f 93       	push	r24
    3d4e:	0e 94 c5 22 	call	0x458a	; 0x458a <vDisplayWriteStringAtPos>
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
	vDisplayWriteStringAtPos(3,0,"ResetReason: %d", reason);
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	29 2f       	mov	r18, r25
    3d66:	2f 93       	push	r18
    3d68:	8f 93       	push	r24
    3d6a:	87 e8       	ldi	r24, 0x87	; 135
    3d6c:	90 e2       	ldi	r25, 0x20	; 32
    3d6e:	89 2f       	mov	r24, r25
    3d70:	8f 93       	push	r24
    3d72:	87 e8       	ldi	r24, 0x87	; 135
    3d74:	90 e2       	ldi	r25, 0x20	; 32
    3d76:	8f 93       	push	r24
    3d78:	1f 92       	push	r1
    3d7a:	1f 92       	push	r1
    3d7c:	1f 92       	push	r1
    3d7e:	83 e0       	ldi	r24, 0x03	; 3
    3d80:	8f 93       	push	r24
    3d82:	0e 94 c5 22 	call	0x458a	; 0x458a <vDisplayWriteStringAtPos>
    3d86:	8d b7       	in	r24, 0x3d	; 61
    3d88:	9e b7       	in	r25, 0x3e	; 62
    3d8a:	08 96       	adiw	r24, 0x08	; 8
    3d8c:	cd bf       	out	0x3d, r28	; 61
    3d8e:	de bf       	out	0x3e, r29	; 62
	vTaskStartScheduler();
    3d90:	0e 94 2c 12 	call	0x2458	; 0x2458 <vTaskStartScheduler>
	return 0;
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	90 e0       	ldi	r25, 0x00	; 0
}
    3d98:	0f 90       	pop	r0
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	08 95       	ret

00003da6 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    3da6:	1f 92       	push	r1
    3da8:	0f 92       	push	r0
    3daa:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3dae:	0f 92       	push	r0
    3db0:	11 24       	eor	r1, r1
    3db2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3db6:	0f 92       	push	r0
    3db8:	2f 93       	push	r18
    3dba:	3f 93       	push	r19
    3dbc:	4f 93       	push	r20
    3dbe:	5f 93       	push	r21
    3dc0:	6f 93       	push	r22
    3dc2:	7f 93       	push	r23
    3dc4:	8f 93       	push	r24
    3dc6:	9f 93       	push	r25
    3dc8:	af 93       	push	r26
    3dca:	bf 93       	push	r27
    3dcc:	ef 93       	push	r30
    3dce:	ff 93       	push	r31
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	1f 92       	push	r1
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	19 82       	std	Y+1, r1	; 0x01
    3ddc:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <egDisplayTiming>
    3de0:	90 91 1e 2d 	lds	r25, 0x2D1E	; 0x802d1e <egDisplayTiming+0x1>
    3de4:	9e 01       	movw	r18, r28
    3de6:	2f 5f       	subi	r18, 0xFF	; 255
    3de8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dea:	41 e0       	ldi	r20, 0x01	; 1
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	60 e0       	ldi	r22, 0x00	; 0
    3df0:	70 e0       	ldi	r23, 0x00	; 0
    3df2:	0e 94 b1 05 	call	0xb62	; 0xb62 <xEventGroupSetBitsFromISR>
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	9b e0       	ldi	r25, 0x0B	; 11
    3dfc:	0e 94 00 02 	call	0x400	; 0x400 <TC0_ConfigClockSource>
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	9b e0       	ldi	r25, 0x0B	; 11
    3e04:	fc 01       	movw	r30, r24
    3e06:	16 82       	std	Z+6, r1	; 0x06
    3e08:	00 00       	nop
    3e0a:	0f 90       	pop	r0
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	ff 91       	pop	r31
    3e12:	ef 91       	pop	r30
    3e14:	bf 91       	pop	r27
    3e16:	af 91       	pop	r26
    3e18:	9f 91       	pop	r25
    3e1a:	8f 91       	pop	r24
    3e1c:	7f 91       	pop	r23
    3e1e:	6f 91       	pop	r22
    3e20:	5f 91       	pop	r21
    3e22:	4f 91       	pop	r20
    3e24:	3f 91       	pop	r19
    3e26:	2f 91       	pop	r18
    3e28:	0f 90       	pop	r0
    3e2a:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
    3e2e:	0f 90       	pop	r0
    3e30:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    3e34:	0f 90       	pop	r0
    3e36:	1f 90       	pop	r1
    3e38:	18 95       	reti

00003e3a <delayUS>:
    3e3a:	cf 92       	push	r12
    3e3c:	df 92       	push	r13
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <delayUS+0x10>
    3e4a:	1f 92       	push	r1
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	69 83       	std	Y+1, r22	; 0x01
    3e52:	7a 83       	std	Y+2, r23	; 0x02
    3e54:	8b 83       	std	Y+3, r24	; 0x03
    3e56:	9c 83       	std	Y+4, r25	; 0x04
    3e58:	89 81       	ldd	r24, Y+1	; 0x01
    3e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5c:	ab 81       	ldd	r26, Y+3	; 0x03
    3e5e:	bc 81       	ldd	r27, Y+4	; 0x04
    3e60:	02 97       	sbiw	r24, 0x02	; 2
    3e62:	a1 05       	cpc	r26, r1
    3e64:	b1 05       	cpc	r27, r1
    3e66:	40 f4       	brcc	.+16     	; 0x3e78 <delayUS+0x3e>
    3e68:	82 e0       	ldi	r24, 0x02	; 2
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	a0 e0       	ldi	r26, 0x00	; 0
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	ab 83       	std	Y+3, r26	; 0x03
    3e76:	bc 83       	std	Y+4, r27	; 0x04
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	9b e0       	ldi	r25, 0x0B	; 11
    3e7c:	21 e0       	ldi	r18, 0x01	; 1
    3e7e:	fc 01       	movw	r30, r24
    3e80:	26 83       	std	Z+6, r18	; 0x06
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	9b e0       	ldi	r25, 0x0B	; 11
    3e86:	fc 01       	movw	r30, r24
    3e88:	10 a2       	std	Z+32, r1	; 0x20
    3e8a:	11 a2       	std	Z+33, r1	; 0x21
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	9b e0       	ldi	r25, 0x0B	; 11
    3e92:	0e 94 1c 02 	call	0x438	; 0x438 <TC0_ConfigWGM>
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9a:	ab 81       	ldd	r26, Y+3	; 0x03
    3e9c:	bc 81       	ldd	r27, Y+4	; 0x04
    3e9e:	8e 3f       	cpi	r24, 0xFE	; 254
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	a1 05       	cpc	r26, r1
    3ea4:	b1 05       	cpc	r27, r1
    3ea6:	98 f4       	brcc	.+38     	; 0x3ece <delayUS+0x94>
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	3b e0       	ldi	r19, 0x0B	; 11
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	ab 81       	ldd	r26, Y+3	; 0x03
    3eb2:	bc 81       	ldd	r27, Y+4	; 0x04
    3eb4:	b6 95       	lsr	r27
    3eb6:	a7 95       	ror	r26
    3eb8:	97 95       	ror	r25
    3eba:	87 95       	ror	r24
    3ebc:	f9 01       	movw	r30, r18
    3ebe:	86 a3       	std	Z+38, r24	; 0x26
    3ec0:	97 a3       	std	Z+39, r25	; 0x27
    3ec2:	65 e0       	ldi	r22, 0x05	; 5
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	9b e0       	ldi	r25, 0x0B	; 11
    3ec8:	0e 94 00 02 	call	0x400	; 0x400 <TC0_ConfigClockSource>
    3ecc:	1f c0       	rjmp	.+62     	; 0x3f0c <delayUS+0xd2>
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ed6:	80 34       	cpi	r24, 0x40	; 64
    3ed8:	92 44       	sbci	r25, 0x42	; 66
    3eda:	af 40       	sbci	r26, 0x0F	; 15
    3edc:	b1 05       	cpc	r27, r1
    3ede:	b0 f4       	brcc	.+44     	; 0x3f0c <delayUS+0xd2>
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	3b e0       	ldi	r19, 0x0B	; 11
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee8:	ab 81       	ldd	r26, Y+3	; 0x03
    3eea:	bc 81       	ldd	r27, Y+4	; 0x04
    3eec:	68 94       	set
    3eee:	14 f8       	bld	r1, 4
    3ef0:	b6 95       	lsr	r27
    3ef2:	a7 95       	ror	r26
    3ef4:	97 95       	ror	r25
    3ef6:	87 95       	ror	r24
    3ef8:	16 94       	lsr	r1
    3efa:	d1 f7       	brne	.-12     	; 0x3ef0 <delayUS+0xb6>
    3efc:	f9 01       	movw	r30, r18
    3efe:	86 a3       	std	Z+38, r24	; 0x26
    3f00:	97 a3       	std	Z+39, r25	; 0x27
    3f02:	67 e0       	ldi	r22, 0x07	; 7
    3f04:	80 e0       	ldi	r24, 0x00	; 0
    3f06:	9b e0       	ldi	r25, 0x0B	; 11
    3f08:	0e 94 00 02 	call	0x400	; 0x400 <TC0_ConfigClockSource>
    3f0c:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <egDisplayTiming>
    3f10:	90 91 1e 2d 	lds	r25, 0x2D1E	; 0x802d1e <egDisplayTiming+0x1>
    3f14:	0f 2e       	mov	r0, r31
    3f16:	f4 ef       	ldi	r31, 0xF4	; 244
    3f18:	cf 2e       	mov	r12, r31
    3f1a:	dd 24       	eor	r13, r13
    3f1c:	d3 94       	inc	r13
    3f1e:	e1 2c       	mov	r14, r1
    3f20:	f1 2c       	mov	r15, r1
    3f22:	f0 2d       	mov	r31, r0
    3f24:	00 e0       	ldi	r16, 0x00	; 0
    3f26:	21 e0       	ldi	r18, 0x01	; 1
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	70 e0       	ldi	r23, 0x00	; 0
    3f30:	0e 94 c1 02 	call	0x582	; 0x582 <xEventGroupWaitBits>
    3f34:	00 00       	nop
    3f36:	24 96       	adiw	r28, 0x04	; 4
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	de bf       	out	0x3e, r29	; 62
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	0f 91       	pop	r16
    3f42:	ff 90       	pop	r15
    3f44:	ef 90       	pop	r14
    3f46:	df 90       	pop	r13
    3f48:	cf 90       	pop	r12
    3f4a:	08 95       	ret

00003f4c <setPort>:
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	1f 92       	push	r1
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	89 83       	std	Y+1, r24	; 0x01
    3f58:	89 81       	ldd	r24, Y+1	; 0x01
    3f5a:	8f 70       	andi	r24, 0x0F	; 15
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	82 95       	swap	r24
    3f62:	80 7f       	andi	r24, 0xF0	; 240
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	96 e0       	ldi	r25, 0x06	; 6
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	36 e0       	ldi	r19, 0x06	; 6
    3f6e:	f9 01       	movw	r30, r18
    3f70:	34 81       	ldd	r19, Z+4	; 0x04
    3f72:	29 81       	ldd	r18, Y+1	; 0x01
    3f74:	2f 60       	ori	r18, 0x0F	; 15
    3f76:	23 23       	and	r18, r19
    3f78:	fc 01       	movw	r30, r24
    3f7a:	24 83       	std	Z+4, r18	; 0x04
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	96 e0       	ldi	r25, 0x06	; 6
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	36 e0       	ldi	r19, 0x06	; 6
    3f84:	f9 01       	movw	r30, r18
    3f86:	34 81       	ldd	r19, Z+4	; 0x04
    3f88:	29 81       	ldd	r18, Y+1	; 0x01
    3f8a:	23 2b       	or	r18, r19
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	24 83       	std	Z+4, r18	; 0x04
    3f90:	00 00       	nop
    3f92:	0f 90       	pop	r0
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	08 95       	ret

00003f9a <setRS>:
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	1f 92       	push	r1
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	88 23       	and	r24, r24
    3faa:	31 f0       	breq	.+12     	; 0x3fb8 <setRS+0x1e>
    3fac:	80 e6       	ldi	r24, 0x60	; 96
    3fae:	96 e0       	ldi	r25, 0x06	; 6
    3fb0:	21 e0       	ldi	r18, 0x01	; 1
    3fb2:	fc 01       	movw	r30, r24
    3fb4:	25 83       	std	Z+5, r18	; 0x05
    3fb6:	05 c0       	rjmp	.+10     	; 0x3fc2 <setRS+0x28>
    3fb8:	80 e6       	ldi	r24, 0x60	; 96
    3fba:	96 e0       	ldi	r25, 0x06	; 6
    3fbc:	21 e0       	ldi	r18, 0x01	; 1
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	26 83       	std	Z+6, r18	; 0x06
    3fc2:	00 00       	nop
    3fc4:	0f 90       	pop	r0
    3fc6:	df 91       	pop	r29
    3fc8:	cf 91       	pop	r28
    3fca:	08 95       	ret

00003fcc <setRW>:
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	1f 92       	push	r1
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	89 81       	ldd	r24, Y+1	; 0x01
    3fda:	88 23       	and	r24, r24
    3fdc:	31 f0       	breq	.+12     	; 0x3fea <setRW+0x1e>
    3fde:	80 e6       	ldi	r24, 0x60	; 96
    3fe0:	96 e0       	ldi	r25, 0x06	; 6
    3fe2:	22 e0       	ldi	r18, 0x02	; 2
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	25 83       	std	Z+5, r18	; 0x05
    3fe8:	05 c0       	rjmp	.+10     	; 0x3ff4 <setRW+0x28>
    3fea:	80 e6       	ldi	r24, 0x60	; 96
    3fec:	96 e0       	ldi	r25, 0x06	; 6
    3fee:	22 e0       	ldi	r18, 0x02	; 2
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	26 83       	std	Z+6, r18	; 0x06
    3ff4:	00 00       	nop
    3ff6:	0f 90       	pop	r0
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <setE>:
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	1f 92       	push	r1
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	89 83       	std	Y+1, r24	; 0x01
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	88 23       	and	r24, r24
    400e:	31 f0       	breq	.+12     	; 0x401c <__stack+0x1d>
    4010:	80 e6       	ldi	r24, 0x60	; 96
    4012:	96 e0       	ldi	r25, 0x06	; 6
    4014:	24 e0       	ldi	r18, 0x04	; 4
    4016:	fc 01       	movw	r30, r24
    4018:	25 83       	std	Z+5, r18	; 0x05
    401a:	05 c0       	rjmp	.+10     	; 0x4026 <__stack+0x27>
    401c:	80 e6       	ldi	r24, 0x60	; 96
    401e:	96 e0       	ldi	r25, 0x06	; 6
    4020:	24 e0       	ldi	r18, 0x04	; 4
    4022:	fc 01       	movw	r30, r24
    4024:	26 83       	std	Z+6, r18	; 0x06
    4026:	00 00       	nop
    4028:	0f 90       	pop	r0
    402a:	df 91       	pop	r29
    402c:	cf 91       	pop	r28
    402e:	08 95       	ret

00004030 <Nybble>:
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <setE>
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	70 e0       	ldi	r23, 0x00	; 0
    4042:	80 e0       	ldi	r24, 0x00	; 0
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
    404a:	80 e0       	ldi	r24, 0x00	; 0
    404c:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <setE>
    4050:	00 00       	nop
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	08 95       	ret

00004058 <command>:
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	1f 92       	push	r1
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	89 83       	std	Y+1, r24	; 0x01
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	82 95       	swap	r24
    4068:	8f 70       	andi	r24, 0x0F	; 15
    406a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <setRS>
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <setRW>
    407a:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	8f 70       	andi	r24, 0x0F	; 15
    4082:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
    4086:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
    408a:	00 00       	nop
    408c:	0f 90       	pop	r0
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	08 95       	ret

00004094 <write>:
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	1f 92       	push	r1
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
    409e:	89 83       	std	Y+1, r24	; 0x01
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	82 95       	swap	r24
    40a4:	8f 70       	andi	r24, 0x0F	; 15
    40a6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <setRS>
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <setRW>
    40b6:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	8f 70       	andi	r24, 0x0F	; 15
    40be:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
    40c2:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
    40c6:	00 00       	nop
    40c8:	0f 90       	pop	r0
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	08 95       	ret

000040d0 <vInitDisplay>:
 
 void vInitDisplay() {
    40d0:	ef 92       	push	r14
    40d2:	ff 92       	push	r15
    40d4:	0f 93       	push	r16
    40d6:	cf 93       	push	r28
    40d8:	df 93       	push	r29
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	96 e0       	ldi	r25, 0x06	; 6
    40e2:	20 e1       	ldi	r18, 0x10	; 16
    40e4:	fc 01       	movw	r30, r24
    40e6:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	96 e0       	ldi	r25, 0x06	; 6
    40ec:	20 e2       	ldi	r18, 0x20	; 32
    40ee:	fc 01       	movw	r30, r24
    40f0:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	96 e0       	ldi	r25, 0x06	; 6
    40f6:	20 e4       	ldi	r18, 0x40	; 64
    40f8:	fc 01       	movw	r30, r24
    40fa:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	96 e0       	ldi	r25, 0x06	; 6
    4100:	20 e8       	ldi	r18, 0x80	; 128
    4102:	fc 01       	movw	r30, r24
    4104:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4106:	80 e6       	ldi	r24, 0x60	; 96
    4108:	96 e0       	ldi	r25, 0x06	; 6
    410a:	21 e0       	ldi	r18, 0x01	; 1
    410c:	fc 01       	movw	r30, r24
    410e:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4110:	80 e6       	ldi	r24, 0x60	; 96
    4112:	96 e0       	ldi	r25, 0x06	; 6
    4114:	22 e0       	ldi	r18, 0x02	; 2
    4116:	fc 01       	movw	r30, r24
    4118:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    411a:	80 e6       	ldi	r24, 0x60	; 96
    411c:	96 e0       	ldi	r25, 0x06	; 6
    411e:	24 e0       	ldi	r18, 0x04	; 4
    4120:	fc 01       	movw	r30, r24
    4122:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	96 e0       	ldi	r25, 0x06	; 6
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	36 e0       	ldi	r19, 0x06	; 6
    412c:	f9 01       	movw	r30, r18
    412e:	24 81       	ldd	r18, Z+4	; 0x04
    4130:	2f 70       	andi	r18, 0x0F	; 15
    4132:	fc 01       	movw	r30, r24
    4134:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4136:	80 e6       	ldi	r24, 0x60	; 96
    4138:	96 e0       	ldi	r25, 0x06	; 6
    413a:	20 e6       	ldi	r18, 0x60	; 96
    413c:	36 e0       	ldi	r19, 0x06	; 6
    413e:	f9 01       	movw	r30, r18
    4140:	24 81       	ldd	r18, Z+4	; 0x04
    4142:	28 7f       	andi	r18, 0xF8	; 248
    4144:	fc 01       	movw	r30, r24
    4146:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    4148:	40 e0       	ldi	r20, 0x00	; 0
    414a:	66 e1       	ldi	r22, 0x16	; 22
    414c:	88 e0       	ldi	r24, 0x08	; 8
    414e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <xQueueGenericCreate>
    4152:	80 93 1b 2d 	sts	0x2D1B, r24	; 0x802d1b <displayLineQueue>
    4156:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    415a:	0e 94 9e 02 	call	0x53c	; 0x53c <xEventGroupCreate>
    415e:	80 93 1d 2d 	sts	0x2D1D, r24	; 0x802d1d <egDisplayTiming>
    4162:	90 93 1e 2d 	sts	0x2D1E, r25	; 0x802d1e <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    4166:	e1 2c       	mov	r14, r1
    4168:	f1 2c       	mov	r15, r1
    416a:	01 e0       	ldi	r16, 0x01	; 1
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	4e e5       	ldi	r20, 0x5E	; 94
    4172:	51 e0       	ldi	r21, 0x01	; 1
    4174:	67 e9       	ldi	r22, 0x97	; 151
    4176:	70 e2       	ldi	r23, 0x20	; 32
    4178:	86 e6       	ldi	r24, 0x66	; 102
    417a:	91 e2       	ldi	r25, 0x21	; 33
    417c:	0e 94 2b 10 	call	0x2056	; 0x2056 <xTaskCreate>
 }
    4180:	00 00       	nop
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	0f 91       	pop	r16
    4188:	ff 90       	pop	r15
    418a:	ef 90       	pop	r14
    418c:	08 95       	ret

0000418e <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	00 d0       	rcall	.+0      	; 0x4194 <_displaySetPos+0x6>
    4194:	1f 92       	push	r1
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	89 83       	std	Y+1, r24	; 0x01
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	6b 83       	std	Y+3, r22	; 0x03
    41a0:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	9a 81       	ldd	r25, Y+2	; 0x02
    41a6:	81 30       	cpi	r24, 0x01	; 1
    41a8:	91 05       	cpc	r25, r1
    41aa:	89 f0       	breq	.+34     	; 0x41ce <_displaySetPos+0x40>
    41ac:	82 30       	cpi	r24, 0x02	; 2
    41ae:	91 05       	cpc	r25, r1
    41b0:	1c f4       	brge	.+6      	; 0x41b8 <_displaySetPos+0x2a>
    41b2:	89 2b       	or	r24, r25
    41b4:	39 f0       	breq	.+14     	; 0x41c4 <_displaySetPos+0x36>
    41b6:	1a c0       	rjmp	.+52     	; 0x41ec <_displaySetPos+0x5e>
    41b8:	82 30       	cpi	r24, 0x02	; 2
    41ba:	91 05       	cpc	r25, r1
    41bc:	69 f0       	breq	.+26     	; 0x41d8 <_displaySetPos+0x4a>
    41be:	03 97       	sbiw	r24, 0x03	; 3
    41c0:	81 f0       	breq	.+32     	; 0x41e2 <_displaySetPos+0x54>
    41c2:	14 c0       	rjmp	.+40     	; 0x41ec <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    41c4:	8b 81       	ldd	r24, Y+3	; 0x03
    41c6:	80 58       	subi	r24, 0x80	; 128
    41c8:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
		 break;
    41cc:	0f c0       	rjmp	.+30     	; 0x41ec <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	80 54       	subi	r24, 0x40	; 64
    41d2:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
		 break;
    41d6:	0a c0       	rjmp	.+20     	; 0x41ec <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	8c 56       	subi	r24, 0x6C	; 108
    41dc:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
		 break;
    41e0:	05 c0       	rjmp	.+10     	; 0x41ec <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    41e2:	8b 81       	ldd	r24, Y+3	; 0x03
    41e4:	8c 52       	subi	r24, 0x2C	; 44
    41e6:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
		 break;
    41ea:	00 00       	nop
	 }
	 delayUS(39);
    41ec:	67 e2       	ldi	r22, 0x27	; 39
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
 }
    41f8:	00 00       	nop
    41fa:	24 96       	adiw	r28, 0x04	; 4
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	1f 92       	push	r1
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	0e 94 4a 20 	call	0x4094	; 0x4094 <write>
	 delayUS(43);
    4218:	6b e2       	ldi	r22, 0x2B	; 43
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
 }
    4224:	00 00       	nop
    4226:	0f 90       	pop	r0
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	08 95       	ret

0000422e <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	00 d0       	rcall	.+0      	; 0x4234 <_displayWriteString+0x6>
    4234:	1f 92       	push	r1
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
    423a:	8b 83       	std	Y+3, r24	; 0x03
    423c:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    423e:	19 82       	std	Y+1, r1	; 0x01
    4240:	1a 82       	std	Y+2, r1	; 0x02
    4242:	19 c0       	rjmp	.+50     	; 0x4276 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	9a 81       	ldd	r25, Y+2	; 0x02
    4248:	2b 81       	ldd	r18, Y+3	; 0x03
    424a:	3c 81       	ldd	r19, Y+4	; 0x04
    424c:	82 0f       	add	r24, r18
    424e:	93 1f       	adc	r25, r19
    4250:	fc 01       	movw	r30, r24
    4252:	80 81       	ld	r24, Z
    4254:	88 23       	and	r24, r24
    4256:	a1 f0       	breq	.+40     	; 0x4280 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	2b 81       	ldd	r18, Y+3	; 0x03
    425e:	3c 81       	ldd	r19, Y+4	; 0x04
    4260:	82 0f       	add	r24, r18
    4262:	93 1f       	adc	r25, r19
    4264:	fc 01       	movw	r30, r24
    4266:	80 81       	ld	r24, Z
    4268:	0e 94 03 21 	call	0x4206	; 0x4206 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	9a 83       	std	Y+2, r25	; 0x02
    4276:	89 81       	ldd	r24, Y+1	; 0x01
    4278:	9a 81       	ldd	r25, Y+2	; 0x02
    427a:	44 97       	sbiw	r24, 0x14	; 20
    427c:	1c f3       	brlt	.-58     	; 0x4244 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    427e:	01 c0       	rjmp	.+2      	; 0x4282 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    4280:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    4282:	00 00       	nop
    4284:	24 96       	adiw	r28, 0x04	; 4
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	08 95       	ret

00004290 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
    4294:	00 d0       	rcall	.+0      	; 0x4296 <_displayWriteStringAtPos+0x6>
    4296:	00 d0       	rcall	.+0      	; 0x4298 <_displayWriteStringAtPos+0x8>
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	89 83       	std	Y+1, r24	; 0x01
    429e:	9a 83       	std	Y+2, r25	; 0x02
    42a0:	6b 83       	std	Y+3, r22	; 0x03
    42a2:	7c 83       	std	Y+4, r23	; 0x04
    42a4:	4d 83       	std	Y+5, r20	; 0x05
    42a6:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    42a8:	2b 81       	ldd	r18, Y+3	; 0x03
    42aa:	3c 81       	ldd	r19, Y+4	; 0x04
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	b9 01       	movw	r22, r18
    42b2:	0e 94 c7 20 	call	0x418e	; 0x418e <_displaySetPos>
	 _displayWriteString(s);
    42b6:	8d 81       	ldd	r24, Y+5	; 0x05
    42b8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ba:	0e 94 17 21 	call	0x422e	; 0x422e <_displayWriteString>
 }
    42be:	00 00       	nop
    42c0:	26 96       	adiw	r28, 0x06	; 6
    42c2:	cd bf       	out	0x3d, r28	; 61
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	08 95       	ret

000042cc <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	c0 57       	subi	r28, 0x70	; 112
    42d6:	d1 09       	sbc	r29, r1
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	9e 01       	movw	r18, r28
    42de:	21 59       	subi	r18, 0x91	; 145
    42e0:	3f 4f       	sbci	r19, 0xFF	; 255
    42e2:	f9 01       	movw	r30, r18
    42e4:	80 83       	st	Z, r24
    42e6:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    42e8:	19 82       	std	Y+1, r1	; 0x01
    42ea:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    42ec:	1b 82       	std	Y+3, r1	; 0x03
    42ee:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    42f0:	1d 82       	std	Y+5, r1	; 0x05
    42f2:	1e 82       	std	Y+6, r1	; 0x06
    42f4:	26 c0       	rjmp	.+76     	; 0x4342 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    42f6:	1f 82       	std	Y+7, r1	; 0x07
    42f8:	18 86       	std	Y+8, r1	; 0x08
    42fa:	1a c0       	rjmp	.+52     	; 0x4330 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    42fc:	2d 81       	ldd	r18, Y+5	; 0x05
    42fe:	3e 81       	ldd	r19, Y+6	; 0x06
    4300:	44 e1       	ldi	r20, 0x14	; 20
    4302:	42 9f       	mul	r20, r18
    4304:	c0 01       	movw	r24, r0
    4306:	43 9f       	mul	r20, r19
    4308:	90 0d       	add	r25, r0
    430a:	11 24       	eor	r1, r1
    430c:	9e 01       	movw	r18, r28
    430e:	2f 5f       	subi	r18, 0xFF	; 255
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	28 0f       	add	r18, r24
    4314:	39 1f       	adc	r19, r25
    4316:	8f 81       	ldd	r24, Y+7	; 0x07
    4318:	98 85       	ldd	r25, Y+8	; 0x08
    431a:	82 0f       	add	r24, r18
    431c:	93 1f       	adc	r25, r19
    431e:	08 96       	adiw	r24, 0x08	; 8
    4320:	20 e2       	ldi	r18, 0x20	; 32
    4322:	fc 01       	movw	r30, r24
    4324:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    4326:	8f 81       	ldd	r24, Y+7	; 0x07
    4328:	98 85       	ldd	r25, Y+8	; 0x08
    432a:	01 96       	adiw	r24, 0x01	; 1
    432c:	8f 83       	std	Y+7, r24	; 0x07
    432e:	98 87       	std	Y+8, r25	; 0x08
    4330:	8f 81       	ldd	r24, Y+7	; 0x07
    4332:	98 85       	ldd	r25, Y+8	; 0x08
    4334:	44 97       	sbiw	r24, 0x14	; 20
    4336:	14 f3       	brlt	.-60     	; 0x42fc <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    4338:	8d 81       	ldd	r24, Y+5	; 0x05
    433a:	9e 81       	ldd	r25, Y+6	; 0x06
    433c:	01 96       	adiw	r24, 0x01	; 1
    433e:	8d 83       	std	Y+5, r24	; 0x05
    4340:	9e 83       	std	Y+6, r25	; 0x06
    4342:	8d 81       	ldd	r24, Y+5	; 0x05
    4344:	9e 81       	ldd	r25, Y+6	; 0x06
    4346:	04 97       	sbiw	r24, 0x04	; 4
    4348:	b4 f2       	brlt	.-84     	; 0x42f6 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    434a:	60 e4       	ldi	r22, 0x40	; 64
    434c:	7c e9       	ldi	r23, 0x9C	; 156
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
	 setPort(0x03);
    4356:	83 e0       	ldi	r24, 0x03	; 3
    4358:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
	 delayUS(5000);
    435c:	68 e8       	ldi	r22, 0x88	; 136
    435e:	73 e1       	ldi	r23, 0x13	; 19
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
	 Nybble();
    4368:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
	 delayUS(160);
    436c:	60 ea       	ldi	r22, 0xA0	; 160
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
	 Nybble();
    4378:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
	 delayUS(160);
    437c:	60 ea       	ldi	r22, 0xA0	; 160
    437e:	70 e0       	ldi	r23, 0x00	; 0
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
	 Nybble();
    4388:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
	 delayUS(160);
    438c:	60 ea       	ldi	r22, 0xA0	; 160
    438e:	70 e0       	ldi	r23, 0x00	; 0
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <delayUS>
	 setPort(0x02);
    4398:	82 e0       	ldi	r24, 0x02	; 2
    439a:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <setPort>
	 Nybble();
    439e:	0e 94 18 20 	call	0x4030	; 0x4030 <Nybble>
	 command(0x28);
    43a2:	88 e2       	ldi	r24, 0x28	; 40
    43a4:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
	 command(0x10);
    43a8:	80 e1       	ldi	r24, 0x10	; 16
    43aa:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
	 command(0x0C); //Cursor and Blinking off
    43ae:	8c e0       	ldi	r24, 0x0C	; 12
    43b0:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
	 command(0x06);
    43b4:	86 e0       	ldi	r24, 0x06	; 6
    43b6:	0e 94 2c 20 	call	0x4058	; 0x4058 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    43ba:	68 ec       	ldi	r22, 0xC8	; 200
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    43c6:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <egDisplayTiming>
    43ca:	90 91 1e 2d 	lds	r25, 0x2D1E	; 0x802d1e <egDisplayTiming+0x1>
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	ba 01       	movw	r22, r20
    43d4:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xEventGroupClearBits>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	89 2b       	or	r24, r25
    43de:	8a 2b       	or	r24, r26
    43e0:	8b 2b       	or	r24, r27
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <vDisplayUpdateTask+0x11a>
    43e4:	96 c0       	rjmp	.+300    	; 0x4512 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    43e6:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <egDisplayTiming>
    43ea:	90 91 1e 2d 	lds	r25, 0x2D1E	; 0x802d1e <egDisplayTiming+0x1>
    43ee:	42 e0       	ldi	r20, 0x02	; 2
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	60 e0       	ldi	r22, 0x00	; 0
    43f4:	70 e0       	ldi	r23, 0x00	; 0
    43f6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    43fa:	19 82       	std	Y+1, r1	; 0x01
    43fc:	1a 82       	std	Y+2, r1	; 0x02
    43fe:	26 c0       	rjmp	.+76     	; 0x444c <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    4400:	1b 82       	std	Y+3, r1	; 0x03
    4402:	1c 82       	std	Y+4, r1	; 0x04
    4404:	1a c0       	rjmp	.+52     	; 0x443a <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    4406:	29 81       	ldd	r18, Y+1	; 0x01
    4408:	3a 81       	ldd	r19, Y+2	; 0x02
    440a:	44 e1       	ldi	r20, 0x14	; 20
    440c:	42 9f       	mul	r20, r18
    440e:	c0 01       	movw	r24, r0
    4410:	43 9f       	mul	r20, r19
    4412:	90 0d       	add	r25, r0
    4414:	11 24       	eor	r1, r1
    4416:	9e 01       	movw	r18, r28
    4418:	2f 5f       	subi	r18, 0xFF	; 255
    441a:	3f 4f       	sbci	r19, 0xFF	; 255
    441c:	28 0f       	add	r18, r24
    441e:	39 1f       	adc	r19, r25
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	9c 81       	ldd	r25, Y+4	; 0x04
    4424:	82 0f       	add	r24, r18
    4426:	93 1f       	adc	r25, r19
    4428:	08 96       	adiw	r24, 0x08	; 8
    442a:	20 e2       	ldi	r18, 0x20	; 32
    442c:	fc 01       	movw	r30, r24
    442e:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    4430:	8b 81       	ldd	r24, Y+3	; 0x03
    4432:	9c 81       	ldd	r25, Y+4	; 0x04
    4434:	01 96       	adiw	r24, 0x01	; 1
    4436:	8b 83       	std	Y+3, r24	; 0x03
    4438:	9c 83       	std	Y+4, r25	; 0x04
    443a:	8b 81       	ldd	r24, Y+3	; 0x03
    443c:	9c 81       	ldd	r25, Y+4	; 0x04
    443e:	44 97       	sbiw	r24, 0x14	; 20
    4440:	14 f3       	brlt	.-60     	; 0x4406 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	9a 81       	ldd	r25, Y+2	; 0x02
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	89 83       	std	Y+1, r24	; 0x01
    444a:	9a 83       	std	Y+2, r25	; 0x02
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	9a 81       	ldd	r25, Y+2	; 0x02
    4450:	04 97       	sbiw	r24, 0x04	; 4
    4452:	b4 f2       	brlt	.-84     	; 0x4400 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4454:	5e c0       	rjmp	.+188    	; 0x4512 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    4456:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <displayLineQueue>
    445a:	90 91 1c 2d 	lds	r25, 0x2D1C	; 0x802d1c <displayLineQueue+0x1>
    445e:	be 01       	movw	r22, r28
    4460:	67 5a       	subi	r22, 0xA7	; 167
    4462:	7f 4f       	sbci	r23, 0xFF	; 255
    4464:	2f ef       	ldi	r18, 0xFF	; 255
    4466:	3f ef       	ldi	r19, 0xFF	; 255
    4468:	a9 01       	movw	r20, r18
    446a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <xQueueReceive>
    446e:	88 23       	and	r24, r24
    4470:	09 f4       	brne	.+2      	; 0x4474 <vDisplayUpdateTask+0x1a8>
    4472:	4f c0       	rjmp	.+158    	; 0x4512 <vDisplayUpdateTask+0x246>
				i=0;			
    4474:	19 82       	std	Y+1, r1	; 0x01
    4476:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    4478:	32 c0       	rjmp	.+100    	; 0x44de <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    447a:	ce 01       	movw	r24, r28
    447c:	87 5a       	subi	r24, 0xA7	; 167
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	fc 01       	movw	r30, r24
    4482:	80 81       	ld	r24, Z
    4484:	48 2f       	mov	r20, r24
    4486:	50 e0       	ldi	r21, 0x00	; 0
    4488:	ce 01       	movw	r24, r28
    448a:	87 5a       	subi	r24, 0xA7	; 167
    448c:	9f 4f       	sbci	r25, 0xFF	; 255
    448e:	fc 01       	movw	r30, r24
    4490:	81 81       	ldd	r24, Z+1	; 0x01
    4492:	28 2f       	mov	r18, r24
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	9a 81       	ldd	r25, Y+2	; 0x02
    449a:	82 0f       	add	r24, r18
    449c:	93 1f       	adc	r25, r19
    449e:	be 01       	movw	r22, r28
    44a0:	67 5a       	subi	r22, 0xA7	; 167
    44a2:	7f 4f       	sbci	r23, 0xFF	; 255
    44a4:	29 81       	ldd	r18, Y+1	; 0x01
    44a6:	3a 81       	ldd	r19, Y+2	; 0x02
    44a8:	26 0f       	add	r18, r22
    44aa:	37 1f       	adc	r19, r23
    44ac:	2e 5f       	subi	r18, 0xFE	; 254
    44ae:	3f 4f       	sbci	r19, 0xFF	; 255
    44b0:	f9 01       	movw	r30, r18
    44b2:	60 81       	ld	r22, Z
    44b4:	74 e1       	ldi	r23, 0x14	; 20
    44b6:	74 9f       	mul	r23, r20
    44b8:	90 01       	movw	r18, r0
    44ba:	75 9f       	mul	r23, r21
    44bc:	30 0d       	add	r19, r0
    44be:	11 24       	eor	r1, r1
    44c0:	ae 01       	movw	r20, r28
    44c2:	4f 5f       	subi	r20, 0xFF	; 255
    44c4:	5f 4f       	sbci	r21, 0xFF	; 255
    44c6:	24 0f       	add	r18, r20
    44c8:	35 1f       	adc	r19, r21
    44ca:	82 0f       	add	r24, r18
    44cc:	93 1f       	adc	r25, r19
    44ce:	08 96       	adiw	r24, 0x08	; 8
    44d0:	fc 01       	movw	r30, r24
    44d2:	60 83       	st	Z, r22
					i++;
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    44de:	ce 01       	movw	r24, r28
    44e0:	87 5a       	subi	r24, 0xA7	; 167
    44e2:	9f 4f       	sbci	r25, 0xFF	; 255
    44e4:	fc 01       	movw	r30, r24
    44e6:	81 81       	ldd	r24, Z+1	; 0x01
    44e8:	28 2f       	mov	r18, r24
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	9a 81       	ldd	r25, Y+2	; 0x02
    44f0:	82 0f       	add	r24, r18
    44f2:	93 1f       	adc	r25, r19
    44f4:	44 97       	sbiw	r24, 0x14	; 20
    44f6:	6c f4       	brge	.+26     	; 0x4512 <vDisplayUpdateTask+0x246>
    44f8:	9e 01       	movw	r18, r28
    44fa:	27 5a       	subi	r18, 0xA7	; 167
    44fc:	3f 4f       	sbci	r19, 0xFF	; 255
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	9a 81       	ldd	r25, Y+2	; 0x02
    4502:	82 0f       	add	r24, r18
    4504:	93 1f       	adc	r25, r19
    4506:	02 96       	adiw	r24, 0x02	; 2
    4508:	fc 01       	movw	r30, r24
    450a:	80 81       	ld	r24, Z
    450c:	88 23       	and	r24, r24
    450e:	09 f0       	breq	.+2      	; 0x4512 <vDisplayUpdateTask+0x246>
    4510:	b4 cf       	rjmp	.-152    	; 0x447a <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    4512:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <displayLineQueue>
    4516:	90 91 1c 2d 	lds	r25, 0x2D1C	; 0x802d1c <displayLineQueue+0x1>
    451a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <uxQueueMessagesWaiting>
    451e:	88 23       	and	r24, r24
    4520:	09 f0       	breq	.+2      	; 0x4524 <vDisplayUpdateTask+0x258>
    4522:	99 cf       	rjmp	.-206    	; 0x4456 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4524:	19 82       	std	Y+1, r1	; 0x01
    4526:	1a 82       	std	Y+2, r1	; 0x02
    4528:	19 c0       	rjmp	.+50     	; 0x455c <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    452a:	9e 01       	movw	r18, r28
    452c:	27 5f       	subi	r18, 0xF7	; 247
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	49 81       	ldd	r20, Y+1	; 0x01
    4532:	5a 81       	ldd	r21, Y+2	; 0x02
    4534:	64 e1       	ldi	r22, 0x14	; 20
    4536:	64 9f       	mul	r22, r20
    4538:	c0 01       	movw	r24, r0
    453a:	65 9f       	mul	r22, r21
    453c:	90 0d       	add	r25, r0
    453e:	11 24       	eor	r1, r1
    4540:	28 0f       	add	r18, r24
    4542:	39 1f       	adc	r19, r25
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	9a 81       	ldd	r25, Y+2	; 0x02
    4548:	a9 01       	movw	r20, r18
    454a:	60 e0       	ldi	r22, 0x00	; 0
    454c:	70 e0       	ldi	r23, 0x00	; 0
    454e:	0e 94 48 21 	call	0x4290	; 0x4290 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	9a 81       	ldd	r25, Y+2	; 0x02
    4556:	01 96       	adiw	r24, 0x01	; 1
    4558:	89 83       	std	Y+1, r24	; 0x01
    455a:	9a 83       	std	Y+2, r25	; 0x02
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	9a 81       	ldd	r25, Y+2	; 0x02
    4560:	04 97       	sbiw	r24, 0x04	; 4
    4562:	1c f3       	brlt	.-58     	; 0x452a <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    4564:	2a cf       	rjmp	.-428    	; 0x43ba <vDisplayUpdateTask+0xee>

00004566 <vDisplayClear>:
 }
 

void vDisplayClear() {
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
    456a:	cd b7       	in	r28, 0x3d	; 61
    456c:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    456e:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <egDisplayTiming>
    4572:	90 91 1e 2d 	lds	r25, 0x2D1E	; 0x802d1e <egDisplayTiming+0x1>
    4576:	42 e0       	ldi	r20, 0x02	; 2
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	60 e0       	ldi	r22, 0x00	; 0
    457c:	70 e0       	ldi	r23, 0x00	; 0
    457e:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
}
    4582:	00 00       	nop
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	08 95       	ret

0000458a <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	1f 92       	push	r1
    4590:	1f 92       	push	r1
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    4596:	ce 01       	movw	r24, r28
    4598:	0e 96       	adiw	r24, 0x0e	; 14
    459a:	89 83       	std	Y+1, r24	; 0x01
    459c:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    459e:	29 81       	ldd	r18, Y+1	; 0x01
    45a0:	3a 81       	ldd	r19, Y+2	; 0x02
    45a2:	4c 85       	ldd	r20, Y+12	; 0x0c
    45a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    45a6:	6a 85       	ldd	r22, Y+10	; 0x0a
    45a8:	7b 85       	ldd	r23, Y+11	; 0x0b
    45aa:	88 85       	ldd	r24, Y+8	; 0x08
    45ac:	99 85       	ldd	r25, Y+9	; 0x09
    45ae:	0e 94 df 22 	call	0x45be	; 0x45be <display_vprintf>
	va_end(arg);	
}
    45b2:	00 00       	nop
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	08 95       	ret

000045be <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    45be:	0f 93       	push	r16
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
    45c4:	cd b7       	in	r28, 0x3d	; 61
    45c6:	de b7       	in	r29, 0x3e	; 62
    45c8:	ec 97       	sbiw	r28, 0x3c	; 60
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	8d ab       	std	Y+53, r24	; 0x35
    45d0:	9e ab       	std	Y+54, r25	; 0x36
    45d2:	6f ab       	std	Y+55, r22	; 0x37
    45d4:	78 af       	std	Y+56, r23	; 0x38
    45d6:	49 af       	std	Y+57, r20	; 0x39
    45d8:	5a af       	std	Y+58, r21	; 0x3a
    45da:	2b af       	std	Y+59, r18	; 0x3b
    45dc:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    45de:	19 82       	std	Y+1, r1	; 0x01
    45e0:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    45e2:	1b 82       	std	Y+3, r1	; 0x03
    45e4:	1c 82       	std	Y+4, r1	; 0x04
    45e6:	0b c0       	rjmp	.+22     	; 0x45fe <display_vprintf+0x40>
		buffer[i] = 0x00;
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	9c 81       	ldd	r25, Y+4	; 0x04
    45ec:	8e 50       	subi	r24, 0x0E	; 14
    45ee:	93 4d       	sbci	r25, 0xD3	; 211
    45f0:	fc 01       	movw	r30, r24
    45f2:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    45f4:	8b 81       	ldd	r24, Y+3	; 0x03
    45f6:	9c 81       	ldd	r25, Y+4	; 0x04
    45f8:	01 96       	adiw	r24, 0x01	; 1
    45fa:	8b 83       	std	Y+3, r24	; 0x03
    45fc:	9c 83       	std	Y+4, r25	; 0x04
    45fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4600:	9c 81       	ldd	r25, Y+4	; 0x04
    4602:	44 97       	sbiw	r24, 0x14	; 20
    4604:	8c f3       	brlt	.-30     	; 0x45e8 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4606:	1d 82       	std	Y+5, r1	; 0x05
    4608:	1e 82       	std	Y+6, r1	; 0x06
    460a:	0b c0       	rjmp	.+22     	; 0x4622 <display_vprintf+0x64>
		str[i] = 0x00;
    460c:	8d 81       	ldd	r24, Y+5	; 0x05
    460e:	9e 81       	ldd	r25, Y+6	; 0x06
    4610:	8a 5f       	subi	r24, 0xFA	; 250
    4612:	92 4d       	sbci	r25, 0xD2	; 210
    4614:	fc 01       	movw	r30, r24
    4616:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    4618:	8d 81       	ldd	r24, Y+5	; 0x05
    461a:	9e 81       	ldd	r25, Y+6	; 0x06
    461c:	01 96       	adiw	r24, 0x01	; 1
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	9e 83       	std	Y+6, r25	; 0x06
    4622:	8d 81       	ldd	r24, Y+5	; 0x05
    4624:	9e 81       	ldd	r25, Y+6	; 0x06
    4626:	44 97       	sbiw	r24, 0x14	; 20
    4628:	8c f3       	brlt	.-30     	; 0x460c <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    462a:	be c1       	rjmp	.+892    	; 0x49a8 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    462c:	8d 89       	ldd	r24, Y+21	; 0x15
    462e:	85 32       	cpi	r24, 0x25	; 37
    4630:	09 f0       	breq	.+2      	; 0x4634 <display_vprintf+0x76>
    4632:	a0 c1       	rjmp	.+832    	; 0x4974 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    4634:	89 ad       	ldd	r24, Y+57	; 0x39
    4636:	9a ad       	ldd	r25, Y+58	; 0x3a
    4638:	9c 01       	movw	r18, r24
    463a:	2f 5f       	subi	r18, 0xFF	; 255
    463c:	3f 4f       	sbci	r19, 0xFF	; 255
    463e:	29 af       	std	Y+57, r18	; 0x39
    4640:	3a af       	std	Y+58, r19	; 0x3a
    4642:	fc 01       	movw	r30, r24
    4644:	80 81       	ld	r24, Z
    4646:	8d 8b       	std	Y+21, r24	; 0x15
    4648:	8d 89       	ldd	r24, Y+21	; 0x15
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	85 36       	cpi	r24, 0x65	; 101
    4650:	91 05       	cpc	r25, r1
    4652:	09 f4       	brne	.+2      	; 0x4656 <display_vprintf+0x98>
    4654:	46 c1       	rjmp	.+652    	; 0x48e2 <display_vprintf+0x324>
    4656:	86 36       	cpi	r24, 0x66	; 102
    4658:	91 05       	cpc	r25, r1
    465a:	54 f4       	brge	.+20     	; 0x4670 <display_vprintf+0xb2>
    465c:	83 36       	cpi	r24, 0x63	; 99
    465e:	91 05       	cpc	r25, r1
    4660:	01 f1       	breq	.+64     	; 0x46a2 <display_vprintf+0xe4>
    4662:	84 36       	cpi	r24, 0x64	; 100
    4664:	91 05       	cpc	r25, r1
    4666:	0c f0       	brlt	.+2      	; 0x466a <display_vprintf+0xac>
    4668:	70 c0       	rjmp	.+224    	; 0x474a <display_vprintf+0x18c>
    466a:	85 97       	sbiw	r24, 0x25	; 37
    466c:	69 f0       	breq	.+26     	; 0x4688 <display_vprintf+0xca>
    466e:	9c c1       	rjmp	.+824    	; 0x49a8 <display_vprintf+0x3ea>
    4670:	83 37       	cpi	r24, 0x73	; 115
    4672:	91 05       	cpc	r25, r1
    4674:	71 f1       	breq	.+92     	; 0x46d2 <display_vprintf+0x114>
    4676:	88 37       	cpi	r24, 0x78	; 120
    4678:	91 05       	cpc	r25, r1
    467a:	09 f4       	brne	.+2      	; 0x467e <display_vprintf+0xc0>
    467c:	a8 c0       	rjmp	.+336    	; 0x47ce <display_vprintf+0x210>
    467e:	86 36       	cpi	r24, 0x66	; 102
    4680:	91 05       	cpc	r25, r1
    4682:	09 f4       	brne	.+2      	; 0x4686 <display_vprintf+0xc8>
    4684:	e6 c0       	rjmp	.+460    	; 0x4852 <display_vprintf+0x294>
    4686:	90 c1       	rjmp	.+800    	; 0x49a8 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    4688:	89 81       	ldd	r24, Y+1	; 0x01
    468a:	9a 81       	ldd	r25, Y+2	; 0x02
    468c:	8a 5f       	subi	r24, 0xFA	; 250
    468e:	92 4d       	sbci	r25, 0xD2	; 210
    4690:	25 e2       	ldi	r18, 0x25	; 37
    4692:	fc 01       	movw	r30, r24
    4694:	20 83       	st	Z, r18
				length++;
    4696:	89 81       	ldd	r24, Y+1	; 0x01
    4698:	9a 81       	ldd	r25, Y+2	; 0x02
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	89 83       	std	Y+1, r24	; 0x01
    469e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    46a0:	83 c1       	rjmp	.+774    	; 0x49a8 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    46a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    46a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    46a6:	9c 01       	movw	r18, r24
    46a8:	2e 5f       	subi	r18, 0xFE	; 254
    46aa:	3f 4f       	sbci	r19, 0xFF	; 255
    46ac:	2b af       	std	Y+59, r18	; 0x3b
    46ae:	3c af       	std	Y+60, r19	; 0x3c
    46b0:	fc 01       	movw	r30, r24
    46b2:	80 81       	ld	r24, Z
    46b4:	91 81       	ldd	r25, Z+1	; 0x01
    46b6:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	9a 81       	ldd	r25, Y+2	; 0x02
    46bc:	8a 5f       	subi	r24, 0xFA	; 250
    46be:	92 4d       	sbci	r25, 0xD2	; 210
    46c0:	2e 89       	ldd	r18, Y+22	; 0x16
    46c2:	fc 01       	movw	r30, r24
    46c4:	20 83       	st	Z, r18
				length++;
    46c6:	89 81       	ldd	r24, Y+1	; 0x01
    46c8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ca:	01 96       	adiw	r24, 0x01	; 1
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	9a 83       	std	Y+2, r25	; 0x02
				break;
    46d0:	6b c1       	rjmp	.+726    	; 0x49a8 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    46d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    46d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    46d6:	9c 01       	movw	r18, r24
    46d8:	2e 5f       	subi	r18, 0xFE	; 254
    46da:	3f 4f       	sbci	r19, 0xFF	; 255
    46dc:	2b af       	std	Y+59, r18	; 0x3b
    46de:	3c af       	std	Y+60, r19	; 0x3c
    46e0:	fc 01       	movw	r30, r24
    46e2:	80 81       	ld	r24, Z
    46e4:	91 81       	ldd	r25, Z+1	; 0x01
    46e6:	8f 8b       	std	Y+23, r24	; 0x17
    46e8:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    46ea:	1f 82       	std	Y+7, r1	; 0x07
    46ec:	18 86       	std	Y+8, r1	; 0x08
    46ee:	17 c0       	rjmp	.+46     	; 0x471e <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    46f0:	29 81       	ldd	r18, Y+1	; 0x01
    46f2:	3a 81       	ldd	r19, Y+2	; 0x02
    46f4:	8f 81       	ldd	r24, Y+7	; 0x07
    46f6:	98 85       	ldd	r25, Y+8	; 0x08
    46f8:	82 0f       	add	r24, r18
    46fa:	93 1f       	adc	r25, r19
    46fc:	2f 81       	ldd	r18, Y+7	; 0x07
    46fe:	38 85       	ldd	r19, Y+8	; 0x08
    4700:	4f 89       	ldd	r20, Y+23	; 0x17
    4702:	58 8d       	ldd	r21, Y+24	; 0x18
    4704:	24 0f       	add	r18, r20
    4706:	35 1f       	adc	r19, r21
    4708:	f9 01       	movw	r30, r18
    470a:	20 81       	ld	r18, Z
    470c:	8a 5f       	subi	r24, 0xFA	; 250
    470e:	92 4d       	sbci	r25, 0xD2	; 210
    4710:	fc 01       	movw	r30, r24
    4712:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    4714:	8f 81       	ldd	r24, Y+7	; 0x07
    4716:	98 85       	ldd	r25, Y+8	; 0x08
    4718:	01 96       	adiw	r24, 0x01	; 1
    471a:	8f 83       	std	Y+7, r24	; 0x07
    471c:	98 87       	std	Y+8, r25	; 0x08
    471e:	8f 89       	ldd	r24, Y+23	; 0x17
    4720:	98 8d       	ldd	r25, Y+24	; 0x18
    4722:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    4726:	9c 01       	movw	r18, r24
    4728:	8f 81       	ldd	r24, Y+7	; 0x07
    472a:	98 85       	ldd	r25, Y+8	; 0x08
    472c:	82 17       	cp	r24, r18
    472e:	93 07       	cpc	r25, r19
    4730:	f8 f2       	brcs	.-66     	; 0x46f0 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    4732:	8f 89       	ldd	r24, Y+23	; 0x17
    4734:	98 8d       	ldd	r25, Y+24	; 0x18
    4736:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    473a:	9c 01       	movw	r18, r24
    473c:	89 81       	ldd	r24, Y+1	; 0x01
    473e:	9a 81       	ldd	r25, Y+2	; 0x02
    4740:	82 0f       	add	r24, r18
    4742:	93 1f       	adc	r25, r19
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4748:	2f c1       	rjmp	.+606    	; 0x49a8 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    474a:	8b ad       	ldd	r24, Y+59	; 0x3b
    474c:	9c ad       	ldd	r25, Y+60	; 0x3c
    474e:	9c 01       	movw	r18, r24
    4750:	2e 5f       	subi	r18, 0xFE	; 254
    4752:	3f 4f       	sbci	r19, 0xFF	; 255
    4754:	2b af       	std	Y+59, r18	; 0x3b
    4756:	3c af       	std	Y+60, r19	; 0x3c
    4758:	fc 01       	movw	r30, r24
    475a:	80 81       	ld	r24, Z
    475c:	91 81       	ldd	r25, Z+1	; 0x01
    475e:	89 8f       	std	Y+25, r24	; 0x19
    4760:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    4762:	89 8d       	ldd	r24, Y+25	; 0x19
    4764:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4766:	4a e0       	ldi	r20, 0x0A	; 10
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	62 ef       	ldi	r22, 0xF2	; 242
    476c:	7c e2       	ldi	r23, 0x2C	; 44
    476e:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    4772:	19 86       	std	Y+9, r1	; 0x09
    4774:	1a 86       	std	Y+10, r1	; 0x0a
    4776:	15 c0       	rjmp	.+42     	; 0x47a2 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    4778:	29 81       	ldd	r18, Y+1	; 0x01
    477a:	3a 81       	ldd	r19, Y+2	; 0x02
    477c:	89 85       	ldd	r24, Y+9	; 0x09
    477e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4780:	82 0f       	add	r24, r18
    4782:	93 1f       	adc	r25, r19
    4784:	29 85       	ldd	r18, Y+9	; 0x09
    4786:	3a 85       	ldd	r19, Y+10	; 0x0a
    4788:	2e 50       	subi	r18, 0x0E	; 14
    478a:	33 4d       	sbci	r19, 0xD3	; 211
    478c:	f9 01       	movw	r30, r18
    478e:	20 81       	ld	r18, Z
    4790:	8a 5f       	subi	r24, 0xFA	; 250
    4792:	92 4d       	sbci	r25, 0xD2	; 210
    4794:	fc 01       	movw	r30, r24
    4796:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    4798:	89 85       	ldd	r24, Y+9	; 0x09
    479a:	9a 85       	ldd	r25, Y+10	; 0x0a
    479c:	01 96       	adiw	r24, 0x01	; 1
    479e:	89 87       	std	Y+9, r24	; 0x09
    47a0:	9a 87       	std	Y+10, r25	; 0x0a
    47a2:	82 ef       	ldi	r24, 0xF2	; 242
    47a4:	9c e2       	ldi	r25, 0x2C	; 44
    47a6:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    47aa:	9c 01       	movw	r18, r24
    47ac:	89 85       	ldd	r24, Y+9	; 0x09
    47ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b0:	82 17       	cp	r24, r18
    47b2:	93 07       	cpc	r25, r19
    47b4:	08 f3       	brcs	.-62     	; 0x4778 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    47b6:	82 ef       	ldi	r24, 0xF2	; 242
    47b8:	9c e2       	ldi	r25, 0x2C	; 44
    47ba:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    47be:	9c 01       	movw	r18, r24
    47c0:	89 81       	ldd	r24, Y+1	; 0x01
    47c2:	9a 81       	ldd	r25, Y+2	; 0x02
    47c4:	82 0f       	add	r24, r18
    47c6:	93 1f       	adc	r25, r19
    47c8:	89 83       	std	Y+1, r24	; 0x01
    47ca:	9a 83       	std	Y+2, r25	; 0x02
				break;
    47cc:	ed c0       	rjmp	.+474    	; 0x49a8 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    47ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    47d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    47d2:	9c 01       	movw	r18, r24
    47d4:	2e 5f       	subi	r18, 0xFE	; 254
    47d6:	3f 4f       	sbci	r19, 0xFF	; 255
    47d8:	2b af       	std	Y+59, r18	; 0x3b
    47da:	3c af       	std	Y+60, r19	; 0x3c
    47dc:	fc 01       	movw	r30, r24
    47de:	80 81       	ld	r24, Z
    47e0:	91 81       	ldd	r25, Z+1	; 0x01
    47e2:	89 8f       	std	Y+25, r24	; 0x19
    47e4:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    47e6:	89 8d       	ldd	r24, Y+25	; 0x19
    47e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    47ea:	40 e1       	ldi	r20, 0x10	; 16
    47ec:	50 e0       	ldi	r21, 0x00	; 0
    47ee:	62 ef       	ldi	r22, 0xF2	; 242
    47f0:	7c e2       	ldi	r23, 0x2C	; 44
    47f2:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    47f6:	1b 86       	std	Y+11, r1	; 0x0b
    47f8:	1c 86       	std	Y+12, r1	; 0x0c
    47fa:	15 c0       	rjmp	.+42     	; 0x4826 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    47fc:	29 81       	ldd	r18, Y+1	; 0x01
    47fe:	3a 81       	ldd	r19, Y+2	; 0x02
    4800:	8b 85       	ldd	r24, Y+11	; 0x0b
    4802:	9c 85       	ldd	r25, Y+12	; 0x0c
    4804:	82 0f       	add	r24, r18
    4806:	93 1f       	adc	r25, r19
    4808:	2b 85       	ldd	r18, Y+11	; 0x0b
    480a:	3c 85       	ldd	r19, Y+12	; 0x0c
    480c:	2e 50       	subi	r18, 0x0E	; 14
    480e:	33 4d       	sbci	r19, 0xD3	; 211
    4810:	f9 01       	movw	r30, r18
    4812:	20 81       	ld	r18, Z
    4814:	8a 5f       	subi	r24, 0xFA	; 250
    4816:	92 4d       	sbci	r25, 0xD2	; 210
    4818:	fc 01       	movw	r30, r24
    481a:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    481c:	8b 85       	ldd	r24, Y+11	; 0x0b
    481e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	8b 87       	std	Y+11, r24	; 0x0b
    4824:	9c 87       	std	Y+12, r25	; 0x0c
    4826:	82 ef       	ldi	r24, 0xF2	; 242
    4828:	9c e2       	ldi	r25, 0x2C	; 44
    482a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    482e:	9c 01       	movw	r18, r24
    4830:	8b 85       	ldd	r24, Y+11	; 0x0b
    4832:	9c 85       	ldd	r25, Y+12	; 0x0c
    4834:	82 17       	cp	r24, r18
    4836:	93 07       	cpc	r25, r19
    4838:	08 f3       	brcs	.-62     	; 0x47fc <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    483a:	82 ef       	ldi	r24, 0xF2	; 242
    483c:	9c e2       	ldi	r25, 0x2C	; 44
    483e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    4842:	9c 01       	movw	r18, r24
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	9a 81       	ldd	r25, Y+2	; 0x02
    4848:	82 0f       	add	r24, r18
    484a:	93 1f       	adc	r25, r19
    484c:	89 83       	std	Y+1, r24	; 0x01
    484e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4850:	ab c0       	rjmp	.+342    	; 0x49a8 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    4852:	8b ad       	ldd	r24, Y+59	; 0x3b
    4854:	9c ad       	ldd	r25, Y+60	; 0x3c
    4856:	9c 01       	movw	r18, r24
    4858:	2c 5f       	subi	r18, 0xFC	; 252
    485a:	3f 4f       	sbci	r19, 0xFF	; 255
    485c:	2b af       	std	Y+59, r18	; 0x3b
    485e:	3c af       	std	Y+60, r19	; 0x3c
    4860:	fc 01       	movw	r30, r24
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	a2 81       	ldd	r26, Z+2	; 0x02
    4868:	b3 81       	ldd	r27, Z+3	; 0x03
    486a:	8b 8f       	std	Y+27, r24	; 0x1b
    486c:	9c 8f       	std	Y+28, r25	; 0x1c
    486e:	ad 8f       	std	Y+29, r26	; 0x1d
    4870:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    4872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4876:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4878:	be 8d       	ldd	r27, Y+30	; 0x1e
    487a:	ac 01       	movw	r20, r24
    487c:	bd 01       	movw	r22, r26
    487e:	82 ef       	ldi	r24, 0xF2	; 242
    4880:	9c e2       	ldi	r25, 0x2C	; 44
    4882:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    4886:	1d 86       	std	Y+13, r1	; 0x0d
    4888:	1e 86       	std	Y+14, r1	; 0x0e
    488a:	15 c0       	rjmp	.+42     	; 0x48b6 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    488c:	29 81       	ldd	r18, Y+1	; 0x01
    488e:	3a 81       	ldd	r19, Y+2	; 0x02
    4890:	8d 85       	ldd	r24, Y+13	; 0x0d
    4892:	9e 85       	ldd	r25, Y+14	; 0x0e
    4894:	82 0f       	add	r24, r18
    4896:	93 1f       	adc	r25, r19
    4898:	2d 85       	ldd	r18, Y+13	; 0x0d
    489a:	3e 85       	ldd	r19, Y+14	; 0x0e
    489c:	2e 50       	subi	r18, 0x0E	; 14
    489e:	33 4d       	sbci	r19, 0xD3	; 211
    48a0:	f9 01       	movw	r30, r18
    48a2:	20 81       	ld	r18, Z
    48a4:	8a 5f       	subi	r24, 0xFA	; 250
    48a6:	92 4d       	sbci	r25, 0xD2	; 210
    48a8:	fc 01       	movw	r30, r24
    48aa:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    48ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	8d 87       	std	Y+13, r24	; 0x0d
    48b4:	9e 87       	std	Y+14, r25	; 0x0e
    48b6:	82 ef       	ldi	r24, 0xF2	; 242
    48b8:	9c e2       	ldi	r25, 0x2C	; 44
    48ba:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    48be:	9c 01       	movw	r18, r24
    48c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c4:	82 17       	cp	r24, r18
    48c6:	93 07       	cpc	r25, r19
    48c8:	08 f3       	brcs	.-62     	; 0x488c <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    48ca:	82 ef       	ldi	r24, 0xF2	; 242
    48cc:	9c e2       	ldi	r25, 0x2C	; 44
    48ce:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    48d2:	9c 01       	movw	r18, r24
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	82 0f       	add	r24, r18
    48da:	93 1f       	adc	r25, r19
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	9a 83       	std	Y+2, r25	; 0x02
				break;
    48e0:	63 c0       	rjmp	.+198    	; 0x49a8 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    48e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    48e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    48e6:	9c 01       	movw	r18, r24
    48e8:	2c 5f       	subi	r18, 0xFC	; 252
    48ea:	3f 4f       	sbci	r19, 0xFF	; 255
    48ec:	2b af       	std	Y+59, r18	; 0x3b
    48ee:	3c af       	std	Y+60, r19	; 0x3c
    48f0:	fc 01       	movw	r30, r24
    48f2:	80 81       	ld	r24, Z
    48f4:	91 81       	ldd	r25, Z+1	; 0x01
    48f6:	a2 81       	ldd	r26, Z+2	; 0x02
    48f8:	b3 81       	ldd	r27, Z+3	; 0x03
    48fa:	8b 8f       	std	Y+27, r24	; 0x1b
    48fc:	9c 8f       	std	Y+28, r25	; 0x1c
    48fe:	ad 8f       	std	Y+29, r26	; 0x1d
    4900:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    4902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4906:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4908:	be 8d       	ldd	r27, Y+30	; 0x1e
    490a:	ac 01       	movw	r20, r24
    490c:	bd 01       	movw	r22, r26
    490e:	82 ef       	ldi	r24, 0xF2	; 242
    4910:	9c e2       	ldi	r25, 0x2C	; 44
    4912:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    4916:	1f 86       	std	Y+15, r1	; 0x0f
    4918:	18 8a       	std	Y+16, r1	; 0x10
    491a:	15 c0       	rjmp	.+42     	; 0x4946 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    491c:	29 81       	ldd	r18, Y+1	; 0x01
    491e:	3a 81       	ldd	r19, Y+2	; 0x02
    4920:	8f 85       	ldd	r24, Y+15	; 0x0f
    4922:	98 89       	ldd	r25, Y+16	; 0x10
    4924:	82 0f       	add	r24, r18
    4926:	93 1f       	adc	r25, r19
    4928:	2f 85       	ldd	r18, Y+15	; 0x0f
    492a:	38 89       	ldd	r19, Y+16	; 0x10
    492c:	2e 50       	subi	r18, 0x0E	; 14
    492e:	33 4d       	sbci	r19, 0xD3	; 211
    4930:	f9 01       	movw	r30, r18
    4932:	20 81       	ld	r18, Z
    4934:	8a 5f       	subi	r24, 0xFA	; 250
    4936:	92 4d       	sbci	r25, 0xD2	; 210
    4938:	fc 01       	movw	r30, r24
    493a:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    493c:	8f 85       	ldd	r24, Y+15	; 0x0f
    493e:	98 89       	ldd	r25, Y+16	; 0x10
    4940:	01 96       	adiw	r24, 0x01	; 1
    4942:	8f 87       	std	Y+15, r24	; 0x0f
    4944:	98 8b       	std	Y+16, r25	; 0x10
    4946:	82 ef       	ldi	r24, 0xF2	; 242
    4948:	9c e2       	ldi	r25, 0x2C	; 44
    494a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    494e:	9c 01       	movw	r18, r24
    4950:	8f 85       	ldd	r24, Y+15	; 0x0f
    4952:	98 89       	ldd	r25, Y+16	; 0x10
    4954:	82 17       	cp	r24, r18
    4956:	93 07       	cpc	r25, r19
    4958:	08 f3       	brcs	.-62     	; 0x491c <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    495a:	82 ef       	ldi	r24, 0xF2	; 242
    495c:	9c e2       	ldi	r25, 0x2C	; 44
    495e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <strlen>
    4962:	9c 01       	movw	r18, r24
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	9a 81       	ldd	r25, Y+2	; 0x02
    4968:	82 0f       	add	r24, r18
    496a:	93 1f       	adc	r25, r19
    496c:	89 83       	std	Y+1, r24	; 0x01
    496e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    4970:	00 00       	nop
    4972:	1a c0       	rjmp	.+52     	; 0x49a8 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	8a 5f       	subi	r24, 0xFA	; 250
    497a:	92 4d       	sbci	r25, 0xD2	; 210
    497c:	2d 89       	ldd	r18, Y+21	; 0x15
    497e:	fc 01       	movw	r30, r24
    4980:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	9a 81       	ldd	r25, Y+2	; 0x02
    4986:	8a 5f       	subi	r24, 0xFA	; 250
    4988:	92 4d       	sbci	r25, 0xD2	; 210
    498a:	fc 01       	movw	r30, r24
    498c:	80 81       	ld	r24, Z
    498e:	8a 30       	cpi	r24, 0x0A	; 10
    4990:	31 f4       	brne	.+12     	; 0x499e <display_vprintf+0x3e0>
				str[length] = '\0';				
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	9a 81       	ldd	r25, Y+2	; 0x02
    4996:	8a 5f       	subi	r24, 0xFA	; 250
    4998:	92 4d       	sbci	r25, 0xD2	; 210
    499a:	fc 01       	movw	r30, r24
    499c:	10 82       	st	Z, r1
			}
			length++;
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	9a 81       	ldd	r25, Y+2	; 0x02
    49a2:	01 96       	adiw	r24, 0x01	; 1
    49a4:	89 83       	std	Y+1, r24	; 0x01
    49a6:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    49a8:	89 ad       	ldd	r24, Y+57	; 0x39
    49aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    49ac:	9c 01       	movw	r18, r24
    49ae:	2f 5f       	subi	r18, 0xFF	; 255
    49b0:	3f 4f       	sbci	r19, 0xFF	; 255
    49b2:	29 af       	std	Y+57, r18	; 0x39
    49b4:	3a af       	std	Y+58, r19	; 0x3a
    49b6:	fc 01       	movw	r30, r24
    49b8:	80 81       	ld	r24, Z
    49ba:	8d 8b       	std	Y+21, r24	; 0x15
    49bc:	8d 89       	ldd	r24, Y+21	; 0x15
    49be:	88 23       	and	r24, r24
    49c0:	09 f0       	breq	.+2      	; 0x49c4 <display_vprintf+0x406>
    49c2:	34 ce       	rjmp	.-920    	; 0x462c <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    49c4:	29 81       	ldd	r18, Y+1	; 0x01
    49c6:	3a 81       	ldd	r19, Y+2	; 0x02
    49c8:	8f a9       	ldd	r24, Y+55	; 0x37
    49ca:	98 ad       	ldd	r25, Y+56	; 0x38
    49cc:	82 0f       	add	r24, r18
    49ce:	93 1f       	adc	r25, r19
    49d0:	44 97       	sbiw	r24, 0x14	; 20
    49d2:	54 f0       	brlt	.+20     	; 0x49e8 <display_vprintf+0x42a>
		length = 20-pos;
    49d4:	24 e1       	ldi	r18, 0x14	; 20
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	8f a9       	ldd	r24, Y+55	; 0x37
    49da:	98 ad       	ldd	r25, Y+56	; 0x38
    49dc:	a9 01       	movw	r20, r18
    49de:	48 1b       	sub	r20, r24
    49e0:	59 0b       	sbc	r21, r25
    49e2:	ca 01       	movw	r24, r20
    49e4:	89 83       	std	Y+1, r24	; 0x01
    49e6:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    49e8:	19 8a       	std	Y+17, r1	; 0x11
    49ea:	1a 8a       	std	Y+18, r1	; 0x12
    49ec:	0e c0       	rjmp	.+28     	; 0x4a0a <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    49ee:	9e 01       	movw	r18, r28
    49f0:	2f 5d       	subi	r18, 0xDF	; 223
    49f2:	3f 4f       	sbci	r19, 0xFF	; 255
    49f4:	89 89       	ldd	r24, Y+17	; 0x11
    49f6:	9a 89       	ldd	r25, Y+18	; 0x12
    49f8:	82 0f       	add	r24, r18
    49fa:	93 1f       	adc	r25, r19
    49fc:	fc 01       	movw	r30, r24
    49fe:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    4a00:	89 89       	ldd	r24, Y+17	; 0x11
    4a02:	9a 89       	ldd	r25, Y+18	; 0x12
    4a04:	01 96       	adiw	r24, 0x01	; 1
    4a06:	89 8b       	std	Y+17, r24	; 0x11
    4a08:	9a 8b       	std	Y+18, r25	; 0x12
    4a0a:	89 89       	ldd	r24, Y+17	; 0x11
    4a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    4a0e:	44 97       	sbiw	r24, 0x14	; 20
    4a10:	74 f3       	brlt	.-36     	; 0x49ee <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    4a12:	8d a9       	ldd	r24, Y+53	; 0x35
    4a14:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    4a16:	8f a9       	ldd	r24, Y+55	; 0x37
    4a18:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    4a1a:	1b 8a       	std	Y+19, r1	; 0x13
    4a1c:	1c 8a       	std	Y+20, r1	; 0x14
    4a1e:	14 c0       	rjmp	.+40     	; 0x4a48 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    4a20:	8b 89       	ldd	r24, Y+19	; 0x13
    4a22:	9c 89       	ldd	r25, Y+20	; 0x14
    4a24:	8a 5f       	subi	r24, 0xFA	; 250
    4a26:	92 4d       	sbci	r25, 0xD2	; 210
    4a28:	fc 01       	movw	r30, r24
    4a2a:	40 81       	ld	r20, Z
    4a2c:	9e 01       	movw	r18, r28
    4a2e:	2f 5d       	subi	r18, 0xDF	; 223
    4a30:	3f 4f       	sbci	r19, 0xFF	; 255
    4a32:	8b 89       	ldd	r24, Y+19	; 0x13
    4a34:	9c 89       	ldd	r25, Y+20	; 0x14
    4a36:	82 0f       	add	r24, r18
    4a38:	93 1f       	adc	r25, r19
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    4a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a40:	9c 89       	ldd	r25, Y+20	; 0x14
    4a42:	01 96       	adiw	r24, 0x01	; 1
    4a44:	8b 8b       	std	Y+19, r24	; 0x13
    4a46:	9c 8b       	std	Y+20, r25	; 0x14
    4a48:	2b 89       	ldd	r18, Y+19	; 0x13
    4a4a:	3c 89       	ldd	r19, Y+20	; 0x14
    4a4c:	89 81       	ldd	r24, Y+1	; 0x01
    4a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a50:	28 17       	cp	r18, r24
    4a52:	39 07       	cpc	r19, r25
    4a54:	2c f3       	brlt	.-54     	; 0x4a20 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    4a56:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <displayLineQueue>
    4a5a:	90 91 1c 2d 	lds	r25, 0x2D1C	; 0x802d1c <displayLineQueue+0x1>
    4a5e:	be 01       	movw	r22, r28
    4a60:	61 5e       	subi	r22, 0xE1	; 225
    4a62:	7f 4f       	sbci	r23, 0xFF	; 255
    4a64:	00 e0       	ldi	r16, 0x00	; 0
    4a66:	2f ef       	ldi	r18, 0xFF	; 255
    4a68:	3f ef       	ldi	r19, 0xFF	; 255
    4a6a:	a9 01       	movw	r20, r18
    4a6c:	0e 94 2f 0c 	call	0x185e	; 0x185e <xQueueGenericSend>
	
	
	return length;
    4a70:	89 81       	ldd	r24, Y+1	; 0x01
    4a72:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4a74:	ec 96       	adiw	r28, 0x3c	; 60
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	df 91       	pop	r29
    4a7c:	cf 91       	pop	r28
    4a7e:	0f 91       	pop	r16
    4a80:	08 95       	ret

00004a82 <normalize>:

static int normalize(double *val) {
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	28 97       	sbiw	r28, 0x08	; 8
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	de bf       	out	0x3e, r29	; 62
    4a90:	8f 83       	std	Y+7, r24	; 0x07
    4a92:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    4a94:	19 82       	std	Y+1, r1	; 0x01
    4a96:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    4a98:	8f 81       	ldd	r24, Y+7	; 0x07
    4a9a:	98 85       	ldd	r25, Y+8	; 0x08
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	80 81       	ld	r24, Z
    4aa0:	91 81       	ldd	r25, Z+1	; 0x01
    4aa2:	a2 81       	ldd	r26, Z+2	; 0x02
    4aa4:	b3 81       	ldd	r27, Z+3	; 0x03
    4aa6:	8b 83       	std	Y+3, r24	; 0x03
    4aa8:	9c 83       	std	Y+4, r25	; 0x04
    4aaa:	ad 83       	std	Y+5, r26	; 0x05
    4aac:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    4aae:	15 c0       	rjmp	.+42     	; 0x4ada <normalize+0x58>
        value /= 10.0;
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e2       	ldi	r20, 0x20	; 32
    4ab6:	51 e4       	ldi	r21, 0x41	; 65
    4ab8:	6b 81       	ldd	r22, Y+3	; 0x03
    4aba:	7c 81       	ldd	r23, Y+4	; 0x04
    4abc:	8d 81       	ldd	r24, Y+5	; 0x05
    4abe:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac0:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__divsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	8b 83       	std	Y+3, r24	; 0x03
    4aca:	9c 83       	std	Y+4, r25	; 0x04
    4acc:	ad 83       	std	Y+5, r26	; 0x05
    4ace:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad4:	01 96       	adiw	r24, 0x01	; 1
    4ad6:	89 83       	std	Y+1, r24	; 0x01
    4ad8:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e8       	ldi	r20, 0x80	; 128
    4ae0:	5f e3       	ldi	r21, 0x3F	; 63
    4ae2:	6b 81       	ldd	r22, Y+3	; 0x03
    4ae4:	7c 81       	ldd	r23, Y+4	; 0x04
    4ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aea:	0e 94 4f 2b 	call	0x569e	; 0x569e <__gesf2>
    4aee:	88 23       	and	r24, r24
    4af0:	fc f6       	brge	.-66     	; 0x4ab0 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    4af2:	15 c0       	rjmp	.+42     	; 0x4b1e <normalize+0x9c>
        value *= 10.0;
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	40 e2       	ldi	r20, 0x20	; 32
    4afa:	51 e4       	ldi	r21, 0x41	; 65
    4afc:	6b 81       	ldd	r22, Y+3	; 0x03
    4afe:	7c 81       	ldd	r23, Y+4	; 0x04
    4b00:	8d 81       	ldd	r24, Y+5	; 0x05
    4b02:	9e 81       	ldd	r25, Y+6	; 0x06
    4b04:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	8b 83       	std	Y+3, r24	; 0x03
    4b0e:	9c 83       	std	Y+4, r25	; 0x04
    4b10:	ad 83       	std	Y+5, r26	; 0x05
    4b12:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	9a 81       	ldd	r25, Y+2	; 0x02
    4b18:	01 97       	sbiw	r24, 0x01	; 1
    4b1a:	89 83       	std	Y+1, r24	; 0x01
    4b1c:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    4b1e:	2d ec       	ldi	r18, 0xCD	; 205
    4b20:	3c ec       	ldi	r19, 0xCC	; 204
    4b22:	4c ec       	ldi	r20, 0xCC	; 204
    4b24:	5d e3       	ldi	r21, 0x3D	; 61
    4b26:	6b 81       	ldd	r22, Y+3	; 0x03
    4b28:	7c 81       	ldd	r23, Y+4	; 0x04
    4b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__cmpsf2>
    4b32:	88 23       	and	r24, r24
    4b34:	fc f2       	brlt	.-66     	; 0x4af4 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    4b36:	2f 81       	ldd	r18, Y+7	; 0x07
    4b38:	38 85       	ldd	r19, Y+8	; 0x08
    4b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3e:	ad 81       	ldd	r26, Y+5	; 0x05
    4b40:	be 81       	ldd	r27, Y+6	; 0x06
    4b42:	f9 01       	movw	r30, r18
    4b44:	80 83       	st	Z, r24
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	a2 83       	std	Z+2, r26	; 0x02
    4b4a:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    4b4c:	89 81       	ldd	r24, Y+1	; 0x01
    4b4e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b50:	28 96       	adiw	r28, 0x08	; 8
    4b52:	cd bf       	out	0x3d, r28	; 61
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	df 91       	pop	r29
    4b58:	cf 91       	pop	r28
    4b5a:	08 95       	ret

00004b5c <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    4b5c:	cf 92       	push	r12
    4b5e:	df 92       	push	r13
    4b60:	ef 92       	push	r14
    4b62:	ff 92       	push	r15
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	cd b7       	in	r28, 0x3d	; 61
    4b6a:	de b7       	in	r29, 0x3e	; 62
    4b6c:	2e 97       	sbiw	r28, 0x0e	; 14
    4b6e:	cd bf       	out	0x3d, r28	; 61
    4b70:	de bf       	out	0x3e, r29	; 62
    4b72:	89 87       	std	Y+9, r24	; 0x09
    4b74:	9a 87       	std	Y+10, r25	; 0x0a
    4b76:	4b 87       	std	Y+11, r20	; 0x0b
    4b78:	5c 87       	std	Y+12, r21	; 0x0c
    4b7a:	6d 87       	std	Y+13, r22	; 0x0d
    4b7c:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    4b7e:	19 82       	std	Y+1, r1	; 0x01
    4b80:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    4b82:	1b 82       	std	Y+3, r1	; 0x03
    4b84:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    4b86:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b88:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b8a:	ad 85       	ldd	r26, Y+13	; 0x0d
    4b8c:	be 85       	ldd	r27, Y+14	; 0x0e
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	a9 01       	movw	r20, r18
    4b94:	bc 01       	movw	r22, r24
    4b96:	cd 01       	movw	r24, r26
    4b98:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__cmpsf2>
    4b9c:	88 23       	and	r24, r24
    4b9e:	59 f4       	brne	.+22     	; 0x4bb6 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    4ba0:	89 85       	ldd	r24, Y+9	; 0x09
    4ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba4:	20 e3       	ldi	r18, 0x30	; 48
    4ba6:	fc 01       	movw	r30, r24
    4ba8:	20 83       	st	Z, r18
        buffer[1] = '\0';
    4baa:	89 85       	ldd	r24, Y+9	; 0x09
    4bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bae:	01 96       	adiw	r24, 0x01	; 1
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	10 82       	st	Z, r1
        return;
    4bb4:	18 c1       	rjmp	.+560    	; 0x4de6 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    4bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bba:	ad 85       	ldd	r26, Y+13	; 0x0d
    4bbc:	be 85       	ldd	r27, Y+14	; 0x0e
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	30 e0       	ldi	r19, 0x00	; 0
    4bc2:	a9 01       	movw	r20, r18
    4bc4:	bc 01       	movw	r22, r24
    4bc6:	cd 01       	movw	r24, r26
    4bc8:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__cmpsf2>
    4bcc:	88 23       	and	r24, r24
    4bce:	9c f4       	brge	.+38     	; 0x4bf6 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	9c 01       	movw	r18, r24
    4bd6:	2f 5f       	subi	r18, 0xFF	; 255
    4bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bda:	29 87       	std	Y+9, r18	; 0x09
    4bdc:	3a 87       	std	Y+10, r19	; 0x0a
    4bde:	2d e2       	ldi	r18, 0x2D	; 45
    4be0:	fc 01       	movw	r30, r24
    4be2:	20 83       	st	Z, r18
        value = -value;
    4be4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4be6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4be8:	ad 85       	ldd	r26, Y+13	; 0x0d
    4bea:	be 85       	ldd	r27, Y+14	; 0x0e
    4bec:	b0 58       	subi	r27, 0x80	; 128
    4bee:	8b 87       	std	Y+11, r24	; 0x0b
    4bf0:	9c 87       	std	Y+12, r25	; 0x0c
    4bf2:	ad 87       	std	Y+13, r26	; 0x0d
    4bf4:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    4bf6:	ce 01       	movw	r24, r28
    4bf8:	0b 96       	adiw	r24, 0x0b	; 11
    4bfa:	0e 94 41 25 	call	0x4a82	; 0x4a82 <normalize>
    4bfe:	89 83       	std	Y+1, r24	; 0x01
    4c00:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    4c02:	53 c0       	rjmp	.+166    	; 0x4caa <ftoa_fixed+0x14e>
        int digit = value * 10;
    4c04:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c06:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c08:	ad 85       	ldd	r26, Y+13	; 0x0d
    4c0a:	be 85       	ldd	r27, Y+14	; 0x0e
    4c0c:	20 e0       	ldi	r18, 0x00	; 0
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	40 e2       	ldi	r20, 0x20	; 32
    4c12:	51 e4       	ldi	r21, 0x41	; 65
    4c14:	bc 01       	movw	r22, r24
    4c16:	cd 01       	movw	r24, r26
    4c18:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	bc 01       	movw	r22, r24
    4c22:	cd 01       	movw	r24, r26
    4c24:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixsfsi>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
    4c2e:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    4c30:	89 85       	ldd	r24, Y+9	; 0x09
    4c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c34:	9c 01       	movw	r18, r24
    4c36:	2f 5f       	subi	r18, 0xFF	; 255
    4c38:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3a:	29 87       	std	Y+9, r18	; 0x09
    4c3c:	3a 87       	std	Y+10, r19	; 0x0a
    4c3e:	2d 81       	ldd	r18, Y+5	; 0x05
    4c40:	20 5d       	subi	r18, 0xD0	; 208
    4c42:	fc 01       	movw	r30, r24
    4c44:	20 83       	st	Z, r18
        value = value * 10 - digit;
    4c46:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c48:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c4a:	ad 85       	ldd	r26, Y+13	; 0x0d
    4c4c:	be 85       	ldd	r27, Y+14	; 0x0e
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	40 e2       	ldi	r20, 0x20	; 32
    4c54:	51 e4       	ldi	r21, 0x41	; 65
    4c56:	bc 01       	movw	r22, r24
    4c58:	cd 01       	movw	r24, r26
    4c5a:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	6c 01       	movw	r12, r24
    4c64:	7d 01       	movw	r14, r26
    4c66:	8d 81       	ldd	r24, Y+5	; 0x05
    4c68:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6a:	09 2e       	mov	r0, r25
    4c6c:	00 0c       	add	r0, r0
    4c6e:	aa 0b       	sbc	r26, r26
    4c70:	bb 0b       	sbc	r27, r27
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatsisf>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	9c 01       	movw	r18, r24
    4c80:	ad 01       	movw	r20, r26
    4c82:	c7 01       	movw	r24, r14
    4c84:	b6 01       	movw	r22, r12
    4c86:	0e 94 83 29 	call	0x5306	; 0x5306 <__subsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	8b 87       	std	Y+11, r24	; 0x0b
    4c90:	9c 87       	std	Y+12, r25	; 0x0c
    4c92:	ad 87       	std	Y+13, r26	; 0x0d
    4c94:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    4c96:	8b 81       	ldd	r24, Y+3	; 0x03
    4c98:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9a:	01 96       	adiw	r24, 0x01	; 1
    4c9c:	8b 83       	std	Y+3, r24	; 0x03
    4c9e:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca4:	01 97       	sbiw	r24, 0x01	; 1
    4ca6:	89 83       	std	Y+1, r24	; 0x01
    4ca8:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	9a 81       	ldd	r25, Y+2	; 0x02
    4cae:	18 16       	cp	r1, r24
    4cb0:	19 06       	cpc	r1, r25
    4cb2:	0c f4       	brge	.+2      	; 0x4cb6 <ftoa_fixed+0x15a>
    4cb4:	a7 cf       	rjmp	.-178    	; 0x4c04 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    4cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    4cba:	89 2b       	or	r24, r25
    4cbc:	51 f4       	brne	.+20     	; 0x4cd2 <ftoa_fixed+0x176>
        *buffer++ = '0';
    4cbe:	89 85       	ldd	r24, Y+9	; 0x09
    4cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc2:	9c 01       	movw	r18, r24
    4cc4:	2f 5f       	subi	r18, 0xFF	; 255
    4cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc8:	29 87       	std	Y+9, r18	; 0x09
    4cca:	3a 87       	std	Y+10, r19	; 0x0a
    4ccc:	20 e3       	ldi	r18, 0x30	; 48
    4cce:	fc 01       	movw	r30, r24
    4cd0:	20 83       	st	Z, r18

    *buffer++ = '.';
    4cd2:	89 85       	ldd	r24, Y+9	; 0x09
    4cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd6:	9c 01       	movw	r18, r24
    4cd8:	2f 5f       	subi	r18, 0xFF	; 255
    4cda:	3f 4f       	sbci	r19, 0xFF	; 255
    4cdc:	29 87       	std	Y+9, r18	; 0x09
    4cde:	3a 87       	std	Y+10, r19	; 0x0a
    4ce0:	2e e2       	ldi	r18, 0x2E	; 46
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    4ce6:	14 c0       	rjmp	.+40     	; 0x4d10 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    4ce8:	89 85       	ldd	r24, Y+9	; 0x09
    4cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cec:	9c 01       	movw	r18, r24
    4cee:	2f 5f       	subi	r18, 0xFF	; 255
    4cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf2:	29 87       	std	Y+9, r18	; 0x09
    4cf4:	3a 87       	std	Y+10, r19	; 0x0a
    4cf6:	20 e3       	ldi	r18, 0x30	; 48
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	20 83       	st	Z, r18
        --exponent;
    4cfc:	89 81       	ldd	r24, Y+1	; 0x01
    4cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4d00:	01 97       	sbiw	r24, 0x01	; 1
    4d02:	89 83       	std	Y+1, r24	; 0x01
    4d04:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	01 96       	adiw	r24, 0x01	; 1
    4d0c:	8b 83       	std	Y+3, r24	; 0x03
    4d0e:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    4d10:	89 81       	ldd	r24, Y+1	; 0x01
    4d12:	9a 81       	ldd	r25, Y+2	; 0x02
    4d14:	99 23       	and	r25, r25
    4d16:	0c f0       	brlt	.+2      	; 0x4d1a <ftoa_fixed+0x1be>
    4d18:	58 c0       	rjmp	.+176    	; 0x4dca <ftoa_fixed+0x26e>
    4d1a:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <width.5062>
    4d1e:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <width.5062+0x1>
    4d22:	2b 81       	ldd	r18, Y+3	; 0x03
    4d24:	3c 81       	ldd	r19, Y+4	; 0x04
    4d26:	28 17       	cp	r18, r24
    4d28:	39 07       	cpc	r19, r25
    4d2a:	f4 f2       	brlt	.-68     	; 0x4ce8 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    4d2c:	4e c0       	rjmp	.+156    	; 0x4dca <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    4d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d30:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d32:	ad 85       	ldd	r26, Y+13	; 0x0d
    4d34:	be 85       	ldd	r27, Y+14	; 0x0e
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	40 e2       	ldi	r20, 0x20	; 32
    4d3c:	51 e4       	ldi	r21, 0x41	; 65
    4d3e:	bc 01       	movw	r22, r24
    4d40:	cd 01       	movw	r24, r26
    4d42:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	bc 01       	movw	r22, r24
    4d4c:	cd 01       	movw	r24, r26
    4d4e:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixsfsi>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	8f 83       	std	Y+7, r24	; 0x07
    4d58:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    4d5a:	89 85       	ldd	r24, Y+9	; 0x09
    4d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d5e:	9c 01       	movw	r18, r24
    4d60:	2f 5f       	subi	r18, 0xFF	; 255
    4d62:	3f 4f       	sbci	r19, 0xFF	; 255
    4d64:	29 87       	std	Y+9, r18	; 0x09
    4d66:	3a 87       	std	Y+10, r19	; 0x0a
    4d68:	2f 81       	ldd	r18, Y+7	; 0x07
    4d6a:	20 5d       	subi	r18, 0xD0	; 208
    4d6c:	fc 01       	movw	r30, r24
    4d6e:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    4d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d72:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d74:	ad 85       	ldd	r26, Y+13	; 0x0d
    4d76:	be 85       	ldd	r27, Y+14	; 0x0e
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	40 e2       	ldi	r20, 0x20	; 32
    4d7e:	51 e4       	ldi	r21, 0x41	; 65
    4d80:	bc 01       	movw	r22, r24
    4d82:	cd 01       	movw	r24, r26
    4d84:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4d88:	dc 01       	movw	r26, r24
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	6c 01       	movw	r12, r24
    4d8e:	7d 01       	movw	r14, r26
    4d90:	8f 81       	ldd	r24, Y+7	; 0x07
    4d92:	98 85       	ldd	r25, Y+8	; 0x08
    4d94:	09 2e       	mov	r0, r25
    4d96:	00 0c       	add	r0, r0
    4d98:	aa 0b       	sbc	r26, r26
    4d9a:	bb 0b       	sbc	r27, r27
    4d9c:	bc 01       	movw	r22, r24
    4d9e:	cd 01       	movw	r24, r26
    4da0:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatsisf>
    4da4:	dc 01       	movw	r26, r24
    4da6:	cb 01       	movw	r24, r22
    4da8:	9c 01       	movw	r18, r24
    4daa:	ad 01       	movw	r20, r26
    4dac:	c7 01       	movw	r24, r14
    4dae:	b6 01       	movw	r22, r12
    4db0:	0e 94 83 29 	call	0x5306	; 0x5306 <__subsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	8b 87       	std	Y+11, r24	; 0x0b
    4dba:	9c 87       	std	Y+12, r25	; 0x0c
    4dbc:	ad 87       	std	Y+13, r26	; 0x0d
    4dbe:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    4dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc4:	01 96       	adiw	r24, 0x01	; 1
    4dc6:	8b 83       	std	Y+3, r24	; 0x03
    4dc8:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    4dca:	80 91 a2 20 	lds	r24, 0x20A2	; 0x8020a2 <width.5062>
    4dce:	90 91 a3 20 	lds	r25, 0x20A3	; 0x8020a3 <width.5062+0x1>
    4dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    4dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    4dd6:	28 17       	cp	r18, r24
    4dd8:	39 07       	cpc	r19, r25
    4dda:	0c f4       	brge	.+2      	; 0x4dde <ftoa_fixed+0x282>
    4ddc:	a8 cf       	rjmp	.-176    	; 0x4d2e <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    4dde:	89 85       	ldd	r24, Y+9	; 0x09
    4de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de2:	fc 01       	movw	r30, r24
    4de4:	10 82       	st	Z, r1
}
    4de6:	2e 96       	adiw	r28, 0x0e	; 14
    4de8:	cd bf       	out	0x3d, r28	; 61
    4dea:	de bf       	out	0x3e, r29	; 62
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
    4df0:	ff 90       	pop	r15
    4df2:	ef 90       	pop	r14
    4df4:	df 90       	pop	r13
    4df6:	cf 90       	pop	r12
    4df8:	08 95       	ret

00004dfa <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    4dfa:	cf 92       	push	r12
    4dfc:	df 92       	push	r13
    4dfe:	ef 92       	push	r14
    4e00:	ff 92       	push	r15
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
    4e06:	cd b7       	in	r28, 0x3d	; 61
    4e08:	de b7       	in	r29, 0x3e	; 62
    4e0a:	2e 97       	sbiw	r28, 0x0e	; 14
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	de bf       	out	0x3e, r29	; 62
    4e10:	89 87       	std	Y+9, r24	; 0x09
    4e12:	9a 87       	std	Y+10, r25	; 0x0a
    4e14:	4b 87       	std	Y+11, r20	; 0x0b
    4e16:	5c 87       	std	Y+12, r21	; 0x0c
    4e18:	6d 87       	std	Y+13, r22	; 0x0d
    4e1a:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    4e1c:	1b 82       	std	Y+3, r1	; 0x03
    4e1e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    4e20:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e22:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e24:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e26:	be 85       	ldd	r27, Y+14	; 0x0e
    4e28:	20 e0       	ldi	r18, 0x00	; 0
    4e2a:	30 e0       	ldi	r19, 0x00	; 0
    4e2c:	a9 01       	movw	r20, r18
    4e2e:	bc 01       	movw	r22, r24
    4e30:	cd 01       	movw	r24, r26
    4e32:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__cmpsf2>
    4e36:	88 23       	and	r24, r24
    4e38:	59 f4       	brne	.+22     	; 0x4e50 <ftoa_sci+0x56>
        buffer[0] = '0';
    4e3a:	89 85       	ldd	r24, Y+9	; 0x09
    4e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3e:	20 e3       	ldi	r18, 0x30	; 48
    4e40:	fc 01       	movw	r30, r24
    4e42:	20 83       	st	Z, r18
        buffer[1] = '\0';
    4e44:	89 85       	ldd	r24, Y+9	; 0x09
    4e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e48:	01 96       	adiw	r24, 0x01	; 1
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	10 82       	st	Z, r1
        return;
    4e4e:	ec c0       	rjmp	.+472    	; 0x5028 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    4e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e52:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e54:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e56:	be 85       	ldd	r27, Y+14	; 0x0e
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	a9 01       	movw	r20, r18
    4e5e:	bc 01       	movw	r22, r24
    4e60:	cd 01       	movw	r24, r26
    4e62:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__cmpsf2>
    4e66:	88 23       	and	r24, r24
    4e68:	9c f4       	brge	.+38     	; 0x4e90 <ftoa_sci+0x96>
        *buffer++ = '-';
    4e6a:	89 85       	ldd	r24, Y+9	; 0x09
    4e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e6e:	9c 01       	movw	r18, r24
    4e70:	2f 5f       	subi	r18, 0xFF	; 255
    4e72:	3f 4f       	sbci	r19, 0xFF	; 255
    4e74:	29 87       	std	Y+9, r18	; 0x09
    4e76:	3a 87       	std	Y+10, r19	; 0x0a
    4e78:	2d e2       	ldi	r18, 0x2D	; 45
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	20 83       	st	Z, r18
        value = -value;
    4e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e80:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e82:	ad 85       	ldd	r26, Y+13	; 0x0d
    4e84:	be 85       	ldd	r27, Y+14	; 0x0e
    4e86:	b0 58       	subi	r27, 0x80	; 128
    4e88:	8b 87       	std	Y+11, r24	; 0x0b
    4e8a:	9c 87       	std	Y+12, r25	; 0x0c
    4e8c:	ad 87       	std	Y+13, r26	; 0x0d
    4e8e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    4e90:	ce 01       	movw	r24, r28
    4e92:	0b 96       	adiw	r24, 0x0b	; 11
    4e94:	0e 94 41 25 	call	0x4a82	; 0x4a82 <normalize>
    4e98:	8b 83       	std	Y+3, r24	; 0x03
    4e9a:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    4e9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ea0:	ad 85       	ldd	r26, Y+13	; 0x0d
    4ea2:	be 85       	ldd	r27, Y+14	; 0x0e
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	40 e2       	ldi	r20, 0x20	; 32
    4eaa:	51 e4       	ldi	r21, 0x41	; 65
    4eac:	bc 01       	movw	r22, r24
    4eae:	cd 01       	movw	r24, r26
    4eb0:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	cb 01       	movw	r24, r22
    4eb8:	bc 01       	movw	r22, r24
    4eba:	cd 01       	movw	r24, r26
    4ebc:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixsfsi>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	8d 83       	std	Y+5, r24	; 0x05
    4ec6:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    4ec8:	89 85       	ldd	r24, Y+9	; 0x09
    4eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ecc:	9c 01       	movw	r18, r24
    4ece:	2f 5f       	subi	r18, 0xFF	; 255
    4ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed2:	29 87       	std	Y+9, r18	; 0x09
    4ed4:	3a 87       	std	Y+10, r19	; 0x0a
    4ed6:	2d 81       	ldd	r18, Y+5	; 0x05
    4ed8:	20 5d       	subi	r18, 0xD0	; 208
    4eda:	fc 01       	movw	r30, r24
    4edc:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    4ede:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ee0:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ee2:	ad 85       	ldd	r26, Y+13	; 0x0d
    4ee4:	be 85       	ldd	r27, Y+14	; 0x0e
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	40 e2       	ldi	r20, 0x20	; 32
    4eec:	51 e4       	ldi	r21, 0x41	; 65
    4eee:	bc 01       	movw	r22, r24
    4ef0:	cd 01       	movw	r24, r26
    4ef2:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	6c 01       	movw	r12, r24
    4efc:	7d 01       	movw	r14, r26
    4efe:	8d 81       	ldd	r24, Y+5	; 0x05
    4f00:	9e 81       	ldd	r25, Y+6	; 0x06
    4f02:	09 2e       	mov	r0, r25
    4f04:	00 0c       	add	r0, r0
    4f06:	aa 0b       	sbc	r26, r26
    4f08:	bb 0b       	sbc	r27, r27
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	cd 01       	movw	r24, r26
    4f0e:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatsisf>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	9c 01       	movw	r18, r24
    4f18:	ad 01       	movw	r20, r26
    4f1a:	c7 01       	movw	r24, r14
    4f1c:	b6 01       	movw	r22, r12
    4f1e:	0e 94 83 29 	call	0x5306	; 0x5306 <__subsf3>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	8b 87       	std	Y+11, r24	; 0x0b
    4f28:	9c 87       	std	Y+12, r25	; 0x0c
    4f2a:	ad 87       	std	Y+13, r26	; 0x0d
    4f2c:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    4f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f30:	9c 81       	ldd	r25, Y+4	; 0x04
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	8b 83       	std	Y+3, r24	; 0x03
    4f36:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    4f38:	89 85       	ldd	r24, Y+9	; 0x09
    4f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f3c:	9c 01       	movw	r18, r24
    4f3e:	2f 5f       	subi	r18, 0xFF	; 255
    4f40:	3f 4f       	sbci	r19, 0xFF	; 255
    4f42:	29 87       	std	Y+9, r18	; 0x09
    4f44:	3a 87       	std	Y+10, r19	; 0x0a
    4f46:	2e e2       	ldi	r18, 0x2E	; 46
    4f48:	fc 01       	movw	r30, r24
    4f4a:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    4f4c:	19 82       	std	Y+1, r1	; 0x01
    4f4e:	1a 82       	std	Y+2, r1	; 0x02
    4f50:	4e c0       	rjmp	.+156    	; 0x4fee <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    4f52:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f54:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f56:	ad 85       	ldd	r26, Y+13	; 0x0d
    4f58:	be 85       	ldd	r27, Y+14	; 0x0e
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	40 e2       	ldi	r20, 0x20	; 32
    4f60:	51 e4       	ldi	r21, 0x41	; 65
    4f62:	bc 01       	movw	r22, r24
    4f64:	cd 01       	movw	r24, r26
    4f66:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	bc 01       	movw	r22, r24
    4f70:	cd 01       	movw	r24, r26
    4f72:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__fixsfsi>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	8f 83       	std	Y+7, r24	; 0x07
    4f7c:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    4f7e:	89 85       	ldd	r24, Y+9	; 0x09
    4f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f82:	9c 01       	movw	r18, r24
    4f84:	2f 5f       	subi	r18, 0xFF	; 255
    4f86:	3f 4f       	sbci	r19, 0xFF	; 255
    4f88:	29 87       	std	Y+9, r18	; 0x09
    4f8a:	3a 87       	std	Y+10, r19	; 0x0a
    4f8c:	2f 81       	ldd	r18, Y+7	; 0x07
    4f8e:	20 5d       	subi	r18, 0xD0	; 208
    4f90:	fc 01       	movw	r30, r24
    4f92:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    4f94:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f96:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f98:	ad 85       	ldd	r26, Y+13	; 0x0d
    4f9a:	be 85       	ldd	r27, Y+14	; 0x0e
    4f9c:	20 e0       	ldi	r18, 0x00	; 0
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	40 e2       	ldi	r20, 0x20	; 32
    4fa2:	51 e4       	ldi	r21, 0x41	; 65
    4fa4:	bc 01       	movw	r22, r24
    4fa6:	cd 01       	movw	r24, r26
    4fa8:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__mulsf3>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	6c 01       	movw	r12, r24
    4fb2:	7d 01       	movw	r14, r26
    4fb4:	8f 81       	ldd	r24, Y+7	; 0x07
    4fb6:	98 85       	ldd	r25, Y+8	; 0x08
    4fb8:	09 2e       	mov	r0, r25
    4fba:	00 0c       	add	r0, r0
    4fbc:	aa 0b       	sbc	r26, r26
    4fbe:	bb 0b       	sbc	r27, r27
    4fc0:	bc 01       	movw	r22, r24
    4fc2:	cd 01       	movw	r24, r26
    4fc4:	0e 94 9f 2a 	call	0x553e	; 0x553e <__floatsisf>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	9c 01       	movw	r18, r24
    4fce:	ad 01       	movw	r20, r26
    4fd0:	c7 01       	movw	r24, r14
    4fd2:	b6 01       	movw	r22, r12
    4fd4:	0e 94 83 29 	call	0x5306	; 0x5306 <__subsf3>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	8b 87       	std	Y+11, r24	; 0x0b
    4fde:	9c 87       	std	Y+12, r25	; 0x0c
    4fe0:	ad 87       	std	Y+13, r26	; 0x0d
    4fe2:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe8:	01 96       	adiw	r24, 0x01	; 1
    4fea:	89 83       	std	Y+1, r24	; 0x01
    4fec:	9a 83       	std	Y+2, r25	; 0x02
    4fee:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <width.5079>
    4ff2:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <width.5079+0x1>
    4ff6:	29 81       	ldd	r18, Y+1	; 0x01
    4ff8:	3a 81       	ldd	r19, Y+2	; 0x02
    4ffa:	28 17       	cp	r18, r24
    4ffc:	39 07       	cpc	r19, r25
    4ffe:	0c f4       	brge	.+2      	; 0x5002 <ftoa_sci+0x208>
    5000:	a8 cf       	rjmp	.-176    	; 0x4f52 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5002:	89 85       	ldd	r24, Y+9	; 0x09
    5004:	9a 85       	ldd	r25, Y+10	; 0x0a
    5006:	9c 01       	movw	r18, r24
    5008:	2f 5f       	subi	r18, 0xFF	; 255
    500a:	3f 4f       	sbci	r19, 0xFF	; 255
    500c:	29 87       	std	Y+9, r18	; 0x09
    500e:	3a 87       	std	Y+10, r19	; 0x0a
    5010:	25 e6       	ldi	r18, 0x65	; 101
    5012:	fc 01       	movw	r30, r24
    5014:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5016:	29 85       	ldd	r18, Y+9	; 0x09
    5018:	3a 85       	ldd	r19, Y+10	; 0x0a
    501a:	8b 81       	ldd	r24, Y+3	; 0x03
    501c:	9c 81       	ldd	r25, Y+4	; 0x04
    501e:	4a e0       	ldi	r20, 0x0A	; 10
    5020:	50 e0       	ldi	r21, 0x00	; 0
    5022:	b9 01       	movw	r22, r18
    5024:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <itoa>
}
    5028:	2e 96       	adiw	r28, 0x0e	; 14
    502a:	cd bf       	out	0x3d, r28	; 61
    502c:	de bf       	out	0x3e, r29	; 62
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	ff 90       	pop	r15
    5034:	ef 90       	pop	r14
    5036:	df 90       	pop	r13
    5038:	cf 90       	pop	r12
    503a:	08 95       	ret

0000503c <vProtocolHandlerTask>:
//globale Variablen
uint8_t ucglobalProtocolBuffer_A[PROTOCOLBUFFERSIZE] = {8,1,6,3,4,5,6,7,8,66,8,1,6,1,2,3,4,5,6,66,8,0,6,6,7,8,9,10,11,66,8,1};	// Buffer_A from Demodulator to ProtocolTask
uint8_t ucglobalProtocolBuffer_B[PROTOCOLBUFFERSIZE] = {6,3,4,5,6,7,8,66,8,1,6,3,4,5,6,7,8,66,8,1,6,3,4,5,6,7,8,66,2,1,0,66};	// Buffer_B from Demodulator to ProtocolTask


void vProtocolHandlerTask(void *pvParameters) {
    503c:	cf 92       	push	r12
    503e:	df 92       	push	r13
    5040:	ef 92       	push	r14
    5042:	ff 92       	push	r15
    5044:	0f 93       	push	r16
    5046:	cf 93       	push	r28
    5048:	df 93       	push	r29
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	cc 50       	subi	r28, 0x0C	; 12
    5050:	d2 40       	sbci	r29, 0x02	; 2
    5052:	cd bf       	out	0x3d, r28	; 61
    5054:	de bf       	out	0x3e, r29	; 62
    5056:	9e 01       	movw	r18, r28
    5058:	25 5f       	subi	r18, 0xF5	; 245
    505a:	3d 4f       	sbci	r19, 0xFD	; 253
    505c:	f9 01       	movw	r30, r18
    505e:	80 83       	st	Z, r24
    5060:	91 83       	std	Z+1, r25	; 0x01
	(void) pvParameters;

	struct ALDP_t_class *xALDP_Paket;
	struct SLDP_t_class xSLDP_Paket;
	
	xProtocolBufferStatus = xEventGroupCreate();
    5062:	0e 94 9e 02 	call	0x53c	; 0x53c <xEventGroupCreate>
    5066:	80 93 1f 2d 	sts	0x2D1F, r24	; 0x802d1f <xProtocolBufferStatus>
    506a:	90 93 20 2d 	sts	0x2D20, r25	; 0x802d20 <xProtocolBufferStatus+0x1>
	
	PORTF.DIRSET = PIN0_bm; /*LED1*/
    506e:	80 ea       	ldi	r24, 0xA0	; 160
    5070:	96 e0       	ldi	r25, 0x06	; 6
    5072:	21 e0       	ldi	r18, 0x01	; 1
    5074:	fc 01       	movw	r30, r24
    5076:	21 83       	std	Z+1, r18	; 0x01
	PORTF.OUT = 0x01;
    5078:	80 ea       	ldi	r24, 0xA0	; 160
    507a:	96 e0       	ldi	r25, 0x06	; 6
    507c:	21 e0       	ldi	r18, 0x01	; 1
    507e:	fc 01       	movw	r30, r24
    5080:	24 83       	std	Z+4, r18	; 0x04
	
	uint8_t ucBuffer_A_Position = 0;								// position inside the used buffer (A or B)
    5082:	19 82       	std	Y+1, r1	; 0x01
	uint8_t ucBuffer_B_Position = 0;								// position inside the used buffer (A or B)
    5084:	1a 82       	std	Y+2, r1	; 0x02
	
	uint8_t ucactiveBuffer = ACTIVEBUFFER_A;
    5086:	1b 82       	std	Y+3, r1	; 0x03
	
	uint8_t ucBufferSLDPpayloadInput[256]= {};
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	31 e0       	ldi	r19, 0x01	; 1
    508c:	ce 01       	movw	r24, r28
    508e:	0b 96       	adiw	r24, 0x0b	; 11
    5090:	fc 01       	movw	r30, r24
    5092:	a9 01       	movw	r20, r18
    5094:	11 92       	st	Z+, r1
    5096:	41 50       	subi	r20, 0x01	; 1
    5098:	50 40       	sbci	r21, 0x00	; 0
    509a:	e1 f7       	brne	.-8      	; 0x5094 <vProtocolHandlerTask+0x58>
	uint8_t ucBufferSLDPpayloadInputCounter;
	
	xALDPQueue = xQueueCreate(ANZSENDQUEUE, sizeof(uint8_t));
    509c:	40 e0       	ldi	r20, 0x00	; 0
    509e:	61 e0       	ldi	r22, 0x01	; 1
    50a0:	80 e2       	ldi	r24, 0x20	; 32
    50a2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <xQueueGenericCreate>
    50a6:	80 93 23 2d 	sts	0x2D23, r24	; 0x802d23 <xALDPQueue>
    50aa:	90 93 24 2d 	sts	0x2D24, r25	; 0x802d24 <xALDPQueue+0x1>
	
	// Debugging
	xEventGroupSetBits(xProtocolBufferStatus, BUFFER_A_freetouse);
    50ae:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    50b2:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    50b6:	41 e0       	ldi	r20, 0x01	; 1
    50b8:	50 e0       	ldi	r21, 0x00	; 0
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	70 e0       	ldi	r23, 0x00	; 0
    50be:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
	xEventGroupSetBits(xProtocolBufferStatus, BUFFER_B_freetouse);
    50c2:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    50c6:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    50ca:	42 e0       	ldi	r20, 0x02	; 2
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	60 e0       	ldi	r22, 0x00	; 0
    50d0:	70 e0       	ldi	r23, 0x00	; 0
    50d2:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
	
	

	for(;;) {
		
		PORTF.OUTTGL = 0x01;
    50d6:	80 ea       	ldi	r24, 0xA0	; 160
    50d8:	96 e0       	ldi	r25, 0x06	; 6
    50da:	21 e0       	ldi	r18, 0x01	; 1
    50dc:	fc 01       	movw	r30, r24
    50de:	27 83       	std	Z+7, r18	; 0x07
		
		xSLDP_Paket.sldp_size = ucglobalProtocolBuffer_A[ucBuffer_A_Position];
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
    50e2:	88 2f       	mov	r24, r24
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	80 50       	subi	r24, 0x00	; 0
    50e8:	90 4e       	sbci	r25, 0xE0	; 224
    50ea:	fc 01       	movw	r30, r24
    50ec:	80 81       	ld	r24, Z
    50ee:	8f 83       	std	Y+7, r24	; 0x07
			
		for (ucBufferSLDPpayloadInputCounter = 0; ucBufferSLDPpayloadInputCounter <= (xSLDP_Paket.sldp_size+1); ucBufferSLDPpayloadInputCounter++) {
    50f0:	1c 82       	std	Y+4, r1	; 0x04
    50f2:	71 c0       	rjmp	.+226    	; 0x51d6 <vProtocolHandlerTask+0x19a>
				
			// Bufferhandler
			if (ucBuffer_A_Position >= (PROTOCOLBUFFERSIZE)) {
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	80 32       	cpi	r24, 0x20	; 32
    50f8:	18 f0       	brcs	.+6      	; 0x5100 <vProtocolHandlerTask+0xc4>
				ucactiveBuffer = ACTIVEBUFFER_B;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
    50fc:	8b 83       	std	Y+3, r24	; 0x03
				ucBuffer_A_Position = 0;
    50fe:	19 82       	std	Y+1, r1	; 0x01
			}
				
			if (ucBuffer_B_Position >= (PROTOCOLBUFFERSIZE)) {
    5100:	8a 81       	ldd	r24, Y+2	; 0x02
    5102:	80 32       	cpi	r24, 0x20	; 32
    5104:	10 f0       	brcs	.+4      	; 0x510a <vProtocolHandlerTask+0xce>
				ucactiveBuffer = ACTIVEBUFFER_A;
    5106:	1b 82       	std	Y+3, r1	; 0x03
				ucBuffer_B_Position = 0;
    5108:	1a 82       	std	Y+2, r1	; 0x02
			}
				
				
			if (ucactiveBuffer == ACTIVEBUFFER_A) {
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	88 23       	and	r24, r24
    510e:	79 f5       	brne	.+94     	; 0x516e <vProtocolHandlerTask+0x132>
				xEventGroupWaitBits(xProtocolBufferStatus, BUFFER_A_freetouse, pdTRUE, pdFALSE, portMAX_DELAY);					// wait for Buffer A
    5110:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    5114:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    5118:	cc 24       	eor	r12, r12
    511a:	ca 94       	dec	r12
    511c:	dc 2c       	mov	r13, r12
    511e:	76 01       	movw	r14, r12
    5120:	00 e0       	ldi	r16, 0x00	; 0
    5122:	21 e0       	ldi	r18, 0x01	; 1
    5124:	41 e0       	ldi	r20, 0x01	; 1
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	60 e0       	ldi	r22, 0x00	; 0
    512a:	70 e0       	ldi	r23, 0x00	; 0
    512c:	0e 94 c1 02 	call	0x582	; 0x582 <xEventGroupWaitBits>
				ucBufferSLDPpayloadInput[ucBufferSLDPpayloadInputCounter] = ucglobalProtocolBuffer_A[ucBuffer_A_Position];		
    5130:	8c 81       	ldd	r24, Y+4	; 0x04
    5132:	88 2f       	mov	r24, r24
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	29 81       	ldd	r18, Y+1	; 0x01
    5138:	22 2f       	mov	r18, r18
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	20 50       	subi	r18, 0x00	; 0
    513e:	30 4e       	sbci	r19, 0xE0	; 224
    5140:	f9 01       	movw	r30, r18
    5142:	40 81       	ld	r20, Z
    5144:	9e 01       	movw	r18, r28
    5146:	25 5f       	subi	r18, 0xF5	; 245
    5148:	3f 4f       	sbci	r19, 0xFF	; 255
    514a:	82 0f       	add	r24, r18
    514c:	93 1f       	adc	r25, r19
    514e:	fc 01       	movw	r30, r24
    5150:	40 83       	st	Z, r20
				ucBuffer_A_Position++;
    5152:	89 81       	ldd	r24, Y+1	; 0x01
    5154:	8f 5f       	subi	r24, 0xFF	; 255
    5156:	89 83       	std	Y+1, r24	; 0x01
				xEventGroupSetBits(xProtocolBufferStatus, BUFFER_A_freetouse);													// Buffer A release
    5158:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    515c:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    5160:	41 e0       	ldi	r20, 0x01	; 1
    5162:	50 e0       	ldi	r21, 0x00	; 0
    5164:	60 e0       	ldi	r22, 0x00	; 0
    5166:	70 e0       	ldi	r23, 0x00	; 0
    5168:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
    516c:	31 c0       	rjmp	.+98     	; 0x51d0 <vProtocolHandlerTask+0x194>
			}
			else if (ucactiveBuffer == ACTIVEBUFFER_B) {
    516e:	8b 81       	ldd	r24, Y+3	; 0x03
    5170:	81 30       	cpi	r24, 0x01	; 1
    5172:	71 f5       	brne	.+92     	; 0x51d0 <vProtocolHandlerTask+0x194>
				xEventGroupWaitBits(xProtocolBufferStatus, BUFFER_B_freetouse, pdTRUE, pdFALSE, portMAX_DELAY);					// wait for Buffer A
    5174:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    5178:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    517c:	cc 24       	eor	r12, r12
    517e:	ca 94       	dec	r12
    5180:	dc 2c       	mov	r13, r12
    5182:	76 01       	movw	r14, r12
    5184:	00 e0       	ldi	r16, 0x00	; 0
    5186:	21 e0       	ldi	r18, 0x01	; 1
    5188:	42 e0       	ldi	r20, 0x02	; 2
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	60 e0       	ldi	r22, 0x00	; 0
    518e:	70 e0       	ldi	r23, 0x00	; 0
    5190:	0e 94 c1 02 	call	0x582	; 0x582 <xEventGroupWaitBits>
				ucBufferSLDPpayloadInput[ucBufferSLDPpayloadInputCounter] = ucglobalProtocolBuffer_B[ucBuffer_B_Position];
    5194:	8c 81       	ldd	r24, Y+4	; 0x04
    5196:	88 2f       	mov	r24, r24
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	2a 81       	ldd	r18, Y+2	; 0x02
    519c:	22 2f       	mov	r18, r18
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	20 5e       	subi	r18, 0xE0	; 224
    51a2:	3f 4d       	sbci	r19, 0xDF	; 223
    51a4:	f9 01       	movw	r30, r18
    51a6:	40 81       	ld	r20, Z
    51a8:	9e 01       	movw	r18, r28
    51aa:	25 5f       	subi	r18, 0xF5	; 245
    51ac:	3f 4f       	sbci	r19, 0xFF	; 255
    51ae:	82 0f       	add	r24, r18
    51b0:	93 1f       	adc	r25, r19
    51b2:	fc 01       	movw	r30, r24
    51b4:	40 83       	st	Z, r20
				ucBuffer_B_Position++;
    51b6:	8a 81       	ldd	r24, Y+2	; 0x02
    51b8:	8f 5f       	subi	r24, 0xFF	; 255
    51ba:	8a 83       	std	Y+2, r24	; 0x02
				xEventGroupSetBits(xProtocolBufferStatus, BUFFER_B_freetouse);													// Buffer A release
    51bc:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <xProtocolBufferStatus>
    51c0:	90 91 20 2d 	lds	r25, 0x2D20	; 0x802d20 <xProtocolBufferStatus+0x1>
    51c4:	42 e0       	ldi	r20, 0x02	; 2
    51c6:	50 e0       	ldi	r21, 0x00	; 0
    51c8:	60 e0       	ldi	r22, 0x00	; 0
    51ca:	70 e0       	ldi	r23, 0x00	; 0
    51cc:	0e 94 44 04 	call	0x888	; 0x888 <xEventGroupSetBits>
		
		PORTF.OUTTGL = 0x01;
		
		xSLDP_Paket.sldp_size = ucglobalProtocolBuffer_A[ucBuffer_A_Position];
			
		for (ucBufferSLDPpayloadInputCounter = 0; ucBufferSLDPpayloadInputCounter <= (xSLDP_Paket.sldp_size+1); ucBufferSLDPpayloadInputCounter++) {
    51d0:	8c 81       	ldd	r24, Y+4	; 0x04
    51d2:	8f 5f       	subi	r24, 0xFF	; 255
    51d4:	8c 83       	std	Y+4, r24	; 0x04
    51d6:	8c 81       	ldd	r24, Y+4	; 0x04
    51d8:	28 2f       	mov	r18, r24
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	8f 81       	ldd	r24, Y+7	; 0x07
    51de:	88 2f       	mov	r24, r24
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	82 17       	cp	r24, r18
    51e6:	93 07       	cpc	r25, r19
    51e8:	0c f0       	brlt	.+2      	; 0x51ec <vProtocolHandlerTask+0x1b0>
    51ea:	84 cf       	rjmp	.-248    	; 0x50f4 <vProtocolHandlerTask+0xb8>
				xEventGroupSetBits(xProtocolBufferStatus, BUFFER_B_freetouse);													// Buffer A release
			}

		}

		ucBufferSLDPpayloadInputCounter--;	
    51ec:	8c 81       	ldd	r24, Y+4	; 0x04
    51ee:	81 50       	subi	r24, 0x01	; 1
    51f0:	8c 83       	std	Y+4, r24	; 0x04
			
			
			
		xSLDP_Paket.sldp_crc8 = ucBufferSLDPpayloadInput[ucBufferSLDPpayloadInputCounter];
    51f2:	8c 81       	ldd	r24, Y+4	; 0x04
    51f4:	88 2f       	mov	r24, r24
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	9e 01       	movw	r18, r28
    51fa:	25 5f       	subi	r18, 0xF5	; 245
    51fc:	3f 4f       	sbci	r19, 0xFF	; 255
    51fe:	82 0f       	add	r24, r18
    5200:	93 1f       	adc	r25, r19
    5202:	fc 01       	movw	r30, r24
    5204:	80 81       	ld	r24, Z
    5206:	8a 87       	std	Y+10, r24	; 0x0a
		xSLDP_Paket.sldp_payload = &ucBufferSLDPpayloadInput[1];
    5208:	ce 01       	movw	r24, r28
    520a:	0b 96       	adiw	r24, 0x0b	; 11
    520c:	01 96       	adiw	r24, 0x01	; 1
    520e:	88 87       	std	Y+8, r24	; 0x08
    5210:	99 87       	std	Y+9, r25	; 0x09
			
		xALDP_Paket = (struct ALDP_t_class *)xSLDP_Paket.sldp_payload;
    5212:	88 85       	ldd	r24, Y+8	; 0x08
    5214:	99 85       	ldd	r25, Y+9	; 0x09
    5216:	8d 83       	std	Y+5, r24	; 0x05
    5218:	9e 83       	std	Y+6, r25	; 0x06
			
		
		
		uint8_t array[256]={};
    521a:	9e 01       	movw	r18, r28
    521c:	25 5f       	subi	r18, 0xF5	; 245
    521e:	3e 4f       	sbci	r19, 0xFE	; 254
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	91 e0       	ldi	r25, 0x01	; 1
    5224:	f9 01       	movw	r30, r18
    5226:	ac 01       	movw	r20, r24
    5228:	11 92       	st	Z+, r1
    522a:	41 50       	subi	r20, 0x01	; 1
    522c:	50 40       	sbci	r21, 0x00	; 0
    522e:	e1 f7       	brne	.-8      	; 0x5228 <vProtocolHandlerTask+0x1ec>

		memcpy(array, xALDP_Paket->aldp_payload, xALDP_Paket->aldp_hdr_byte_2);
    5230:	8d 81       	ldd	r24, Y+5	; 0x05
    5232:	9e 81       	ldd	r25, Y+6	; 0x06
    5234:	fc 01       	movw	r30, r24
    5236:	81 81       	ldd	r24, Z+1	; 0x01
    5238:	48 2f       	mov	r20, r24
    523a:	50 e0       	ldi	r21, 0x00	; 0
    523c:	8d 81       	ldd	r24, Y+5	; 0x05
    523e:	9e 81       	ldd	r25, Y+6	; 0x06
    5240:	9c 01       	movw	r18, r24
    5242:	2e 5f       	subi	r18, 0xFE	; 254
    5244:	3f 4f       	sbci	r19, 0xFF	; 255
    5246:	ce 01       	movw	r24, r28
    5248:	85 5f       	subi	r24, 0xF5	; 245
    524a:	9e 4f       	sbci	r25, 0xFE	; 254
    524c:	b9 01       	movw	r22, r18
    524e:	0e 94 c9 2b 	call	0x5792	; 0x5792 <memcpy>





		vTaskDelay(50 / portTICK_RATE_MS);				// Delay 50ms
    5252:	62 e3       	ldi	r22, 0x32	; 50
    5254:	70 e0       	ldi	r23, 0x00	; 0
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <vTaskDelay>
	}
    525e:	3b cf       	rjmp	.-394    	; 0x50d6 <vProtocolHandlerTask+0x9a>

00005260 <getResetReason>:
 *  Author: mburger
 */ 
 #include "avr_compiler.h"
 #include "utils.h"

 resetReason_t getResetReason(void) {
    5260:	cf 93       	push	r28
    5262:	df 93       	push	r29
    5264:	1f 92       	push	r1
    5266:	cd b7       	in	r28, 0x3d	; 61
    5268:	de b7       	in	r29, 0x3e	; 62
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
    526a:	82 e0       	ldi	r24, 0x02	; 2
    526c:	89 83       	std	Y+1, r24	; 0x01
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
    526e:	88 e7       	ldi	r24, 0x78	; 120
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	fc 01       	movw	r30, r24
    5274:	80 81       	ld	r24, Z
    5276:	88 2f       	mov	r24, r24
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	80 72       	andi	r24, 0x20	; 32
    527c:	99 27       	eor	r25, r25
    527e:	89 2b       	or	r24, r25
    5280:	41 f0       	breq	.+16     	; 0x5292 <getResetReason+0x32>
	 {
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
    5282:	88 e7       	ldi	r24, 0x78	; 120
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	20 e2       	ldi	r18, 0x20	; 32
    5288:	fc 01       	movw	r30, r24
    528a:	20 83       	st	Z, r18
		 returnValue = RESETREASON_SOFTWARERESET;
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	89 83       	std	Y+1, r24	; 0x01
    5290:	35 c0       	rjmp	.+106    	; 0x52fc <getResetReason+0x9c>
	 }
	 // power on reset ?
	 else if( RST.STATUS & RST_PORF_bm)
    5292:	88 e7       	ldi	r24, 0x78	; 120
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	fc 01       	movw	r30, r24
    5298:	80 81       	ld	r24, Z
    529a:	88 2f       	mov	r24, r24
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	81 70       	andi	r24, 0x01	; 1
    52a0:	99 27       	eor	r25, r25
    52a2:	89 2b       	or	r24, r25
    52a4:	41 f0       	breq	.+16     	; 0x52b6 <getResetReason+0x56>
	 {
		 // reset this bit
		 RST.STATUS = RST_PORF_bm;
    52a6:	88 e7       	ldi	r24, 0x78	; 120
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	21 e0       	ldi	r18, 0x01	; 1
    52ac:	fc 01       	movw	r30, r24
    52ae:	20 83       	st	Z, r18
		 returnValue = RESETREASON_POWERONRESET;
    52b0:	82 e0       	ldi	r24, 0x02	; 2
    52b2:	89 83       	std	Y+1, r24	; 0x01
    52b4:	23 c0       	rjmp	.+70     	; 0x52fc <getResetReason+0x9c>
	 }
	 // debugger reset ?
	 else if( RST.STATUS & RST_PDIRF_bm)
    52b6:	88 e7       	ldi	r24, 0x78	; 120
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	fc 01       	movw	r30, r24
    52bc:	80 81       	ld	r24, Z
    52be:	88 2f       	mov	r24, r24
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	80 71       	andi	r24, 0x10	; 16
    52c4:	99 27       	eor	r25, r25
    52c6:	89 2b       	or	r24, r25
    52c8:	41 f0       	breq	.+16     	; 0x52da <getResetReason+0x7a>
	 {
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
    52ca:	88 e7       	ldi	r24, 0x78	; 120
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	20 e1       	ldi	r18, 0x10	; 16
    52d0:	fc 01       	movw	r30, r24
    52d2:	20 83       	st	Z, r18
		 returnValue = RESETREASON_DEBUGGERRESET;
    52d4:	83 e0       	ldi	r24, 0x03	; 3
    52d6:	89 83       	std	Y+1, r24	; 0x01
    52d8:	11 c0       	rjmp	.+34     	; 0x52fc <getResetReason+0x9c>
	 }
	 // external reset ?
	 else if( RST.STATUS & RST_EXTRF_bm)
    52da:	88 e7       	ldi	r24, 0x78	; 120
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	fc 01       	movw	r30, r24
    52e0:	80 81       	ld	r24, Z
    52e2:	88 2f       	mov	r24, r24
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	82 70       	andi	r24, 0x02	; 2
    52e8:	99 27       	eor	r25, r25
    52ea:	89 2b       	or	r24, r25
    52ec:	39 f0       	breq	.+14     	; 0x52fc <getResetReason+0x9c>
	 {
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
    52ee:	88 e7       	ldi	r24, 0x78	; 120
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	22 e0       	ldi	r18, 0x02	; 2
    52f4:	fc 01       	movw	r30, r24
    52f6:	20 83       	st	Z, r18
		 returnValue = RESETREASON_EXTERNALRESET;
    52f8:	84 e0       	ldi	r24, 0x04	; 4
    52fa:	89 83       	std	Y+1, r24	; 0x01
	 }
	 return returnValue;
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	0f 90       	pop	r0
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	08 95       	ret

00005306 <__subsf3>:
    5306:	50 58       	subi	r21, 0x80	; 128

00005308 <__addsf3>:
    5308:	bb 27       	eor	r27, r27
    530a:	aa 27       	eor	r26, r26
    530c:	0e 94 9b 29 	call	0x5336	; 0x5336 <__addsf3x>
    5310:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    5314:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    5318:	38 f0       	brcs	.+14     	; 0x5328 <__addsf3+0x20>
    531a:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    531e:	20 f0       	brcs	.+8      	; 0x5328 <__addsf3+0x20>
    5320:	39 f4       	brne	.+14     	; 0x5330 <__addsf3+0x28>
    5322:	9f 3f       	cpi	r25, 0xFF	; 255
    5324:	19 f4       	brne	.+6      	; 0x532c <__addsf3+0x24>
    5326:	26 f4       	brtc	.+8      	; 0x5330 <__addsf3+0x28>
    5328:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__fp_nan>
    532c:	0e f4       	brtc	.+2      	; 0x5330 <__addsf3+0x28>
    532e:	e0 95       	com	r30
    5330:	e7 fb       	bst	r30, 7
    5332:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__fp_inf>

00005336 <__addsf3x>:
    5336:	e9 2f       	mov	r30, r25
    5338:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    533c:	58 f3       	brcs	.-42     	; 0x5314 <__addsf3+0xc>
    533e:	ba 17       	cp	r27, r26
    5340:	62 07       	cpc	r22, r18
    5342:	73 07       	cpc	r23, r19
    5344:	84 07       	cpc	r24, r20
    5346:	95 07       	cpc	r25, r21
    5348:	20 f0       	brcs	.+8      	; 0x5352 <__addsf3x+0x1c>
    534a:	79 f4       	brne	.+30     	; 0x536a <__addsf3x+0x34>
    534c:	a6 f5       	brtc	.+104    	; 0x53b6 <__addsf3x+0x80>
    534e:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__fp_zero>
    5352:	0e f4       	brtc	.+2      	; 0x5356 <__addsf3x+0x20>
    5354:	e0 95       	com	r30
    5356:	0b 2e       	mov	r0, r27
    5358:	ba 2f       	mov	r27, r26
    535a:	a0 2d       	mov	r26, r0
    535c:	0b 01       	movw	r0, r22
    535e:	b9 01       	movw	r22, r18
    5360:	90 01       	movw	r18, r0
    5362:	0c 01       	movw	r0, r24
    5364:	ca 01       	movw	r24, r20
    5366:	a0 01       	movw	r20, r0
    5368:	11 24       	eor	r1, r1
    536a:	ff 27       	eor	r31, r31
    536c:	59 1b       	sub	r21, r25
    536e:	99 f0       	breq	.+38     	; 0x5396 <__addsf3x+0x60>
    5370:	59 3f       	cpi	r21, 0xF9	; 249
    5372:	50 f4       	brcc	.+20     	; 0x5388 <__addsf3x+0x52>
    5374:	50 3e       	cpi	r21, 0xE0	; 224
    5376:	68 f1       	brcs	.+90     	; 0x53d2 <__addsf3x+0x9c>
    5378:	1a 16       	cp	r1, r26
    537a:	f0 40       	sbci	r31, 0x00	; 0
    537c:	a2 2f       	mov	r26, r18
    537e:	23 2f       	mov	r18, r19
    5380:	34 2f       	mov	r19, r20
    5382:	44 27       	eor	r20, r20
    5384:	58 5f       	subi	r21, 0xF8	; 248
    5386:	f3 cf       	rjmp	.-26     	; 0x536e <__addsf3x+0x38>
    5388:	46 95       	lsr	r20
    538a:	37 95       	ror	r19
    538c:	27 95       	ror	r18
    538e:	a7 95       	ror	r26
    5390:	f0 40       	sbci	r31, 0x00	; 0
    5392:	53 95       	inc	r21
    5394:	c9 f7       	brne	.-14     	; 0x5388 <__addsf3x+0x52>
    5396:	7e f4       	brtc	.+30     	; 0x53b6 <__addsf3x+0x80>
    5398:	1f 16       	cp	r1, r31
    539a:	ba 0b       	sbc	r27, r26
    539c:	62 0b       	sbc	r22, r18
    539e:	73 0b       	sbc	r23, r19
    53a0:	84 0b       	sbc	r24, r20
    53a2:	ba f0       	brmi	.+46     	; 0x53d2 <__addsf3x+0x9c>
    53a4:	91 50       	subi	r25, 0x01	; 1
    53a6:	a1 f0       	breq	.+40     	; 0x53d0 <__addsf3x+0x9a>
    53a8:	ff 0f       	add	r31, r31
    53aa:	bb 1f       	adc	r27, r27
    53ac:	66 1f       	adc	r22, r22
    53ae:	77 1f       	adc	r23, r23
    53b0:	88 1f       	adc	r24, r24
    53b2:	c2 f7       	brpl	.-16     	; 0x53a4 <__addsf3x+0x6e>
    53b4:	0e c0       	rjmp	.+28     	; 0x53d2 <__addsf3x+0x9c>
    53b6:	ba 0f       	add	r27, r26
    53b8:	62 1f       	adc	r22, r18
    53ba:	73 1f       	adc	r23, r19
    53bc:	84 1f       	adc	r24, r20
    53be:	48 f4       	brcc	.+18     	; 0x53d2 <__addsf3x+0x9c>
    53c0:	87 95       	ror	r24
    53c2:	77 95       	ror	r23
    53c4:	67 95       	ror	r22
    53c6:	b7 95       	ror	r27
    53c8:	f7 95       	ror	r31
    53ca:	9e 3f       	cpi	r25, 0xFE	; 254
    53cc:	08 f0       	brcs	.+2      	; 0x53d0 <__addsf3x+0x9a>
    53ce:	b0 cf       	rjmp	.-160    	; 0x5330 <__addsf3+0x28>
    53d0:	93 95       	inc	r25
    53d2:	88 0f       	add	r24, r24
    53d4:	08 f0       	brcs	.+2      	; 0x53d8 <__addsf3x+0xa2>
    53d6:	99 27       	eor	r25, r25
    53d8:	ee 0f       	add	r30, r30
    53da:	97 95       	ror	r25
    53dc:	87 95       	ror	r24
    53de:	08 95       	ret

000053e0 <__cmpsf2>:
    53e0:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__fp_cmp>
    53e4:	08 f4       	brcc	.+2      	; 0x53e8 <__cmpsf2+0x8>
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	08 95       	ret

000053ea <__divsf3>:
    53ea:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3x>
    53ee:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    53f2:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    53f6:	58 f0       	brcs	.+22     	; 0x540e <__divsf3+0x24>
    53f8:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    53fc:	40 f0       	brcs	.+16     	; 0x540e <__divsf3+0x24>
    53fe:	29 f4       	brne	.+10     	; 0x540a <__divsf3+0x20>
    5400:	5f 3f       	cpi	r21, 0xFF	; 255
    5402:	29 f0       	breq	.+10     	; 0x540e <__divsf3+0x24>
    5404:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__fp_inf>
    5408:	51 11       	cpse	r21, r1
    540a:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    540e:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__fp_nan>

00005412 <__divsf3x>:
    5412:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    5416:	68 f3       	brcs	.-38     	; 0x53f2 <__divsf3+0x8>

00005418 <__divsf3_pse>:
    5418:	99 23       	and	r25, r25
    541a:	b1 f3       	breq	.-20     	; 0x5408 <__divsf3+0x1e>
    541c:	55 23       	and	r21, r21
    541e:	91 f3       	breq	.-28     	; 0x5404 <__divsf3+0x1a>
    5420:	95 1b       	sub	r25, r21
    5422:	55 0b       	sbc	r21, r21
    5424:	bb 27       	eor	r27, r27
    5426:	aa 27       	eor	r26, r26
    5428:	62 17       	cp	r22, r18
    542a:	73 07       	cpc	r23, r19
    542c:	84 07       	cpc	r24, r20
    542e:	38 f0       	brcs	.+14     	; 0x543e <__divsf3_pse+0x26>
    5430:	9f 5f       	subi	r25, 0xFF	; 255
    5432:	5f 4f       	sbci	r21, 0xFF	; 255
    5434:	22 0f       	add	r18, r18
    5436:	33 1f       	adc	r19, r19
    5438:	44 1f       	adc	r20, r20
    543a:	aa 1f       	adc	r26, r26
    543c:	a9 f3       	breq	.-22     	; 0x5428 <__divsf3_pse+0x10>
    543e:	35 d0       	rcall	.+106    	; 0x54aa <__divsf3_pse+0x92>
    5440:	0e 2e       	mov	r0, r30
    5442:	3a f0       	brmi	.+14     	; 0x5452 <__divsf3_pse+0x3a>
    5444:	e0 e8       	ldi	r30, 0x80	; 128
    5446:	32 d0       	rcall	.+100    	; 0x54ac <__divsf3_pse+0x94>
    5448:	91 50       	subi	r25, 0x01	; 1
    544a:	50 40       	sbci	r21, 0x00	; 0
    544c:	e6 95       	lsr	r30
    544e:	00 1c       	adc	r0, r0
    5450:	ca f7       	brpl	.-14     	; 0x5444 <__divsf3_pse+0x2c>
    5452:	2b d0       	rcall	.+86     	; 0x54aa <__divsf3_pse+0x92>
    5454:	fe 2f       	mov	r31, r30
    5456:	29 d0       	rcall	.+82     	; 0x54aa <__divsf3_pse+0x92>
    5458:	66 0f       	add	r22, r22
    545a:	77 1f       	adc	r23, r23
    545c:	88 1f       	adc	r24, r24
    545e:	bb 1f       	adc	r27, r27
    5460:	26 17       	cp	r18, r22
    5462:	37 07       	cpc	r19, r23
    5464:	48 07       	cpc	r20, r24
    5466:	ab 07       	cpc	r26, r27
    5468:	b0 e8       	ldi	r27, 0x80	; 128
    546a:	09 f0       	breq	.+2      	; 0x546e <__divsf3_pse+0x56>
    546c:	bb 0b       	sbc	r27, r27
    546e:	80 2d       	mov	r24, r0
    5470:	bf 01       	movw	r22, r30
    5472:	ff 27       	eor	r31, r31
    5474:	93 58       	subi	r25, 0x83	; 131
    5476:	5f 4f       	sbci	r21, 0xFF	; 255
    5478:	3a f0       	brmi	.+14     	; 0x5488 <__divsf3_pse+0x70>
    547a:	9e 3f       	cpi	r25, 0xFE	; 254
    547c:	51 05       	cpc	r21, r1
    547e:	78 f0       	brcs	.+30     	; 0x549e <__divsf3_pse+0x86>
    5480:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__fp_inf>
    5484:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    5488:	5f 3f       	cpi	r21, 0xFF	; 255
    548a:	e4 f3       	brlt	.-8      	; 0x5484 <__divsf3_pse+0x6c>
    548c:	98 3e       	cpi	r25, 0xE8	; 232
    548e:	d4 f3       	brlt	.-12     	; 0x5484 <__divsf3_pse+0x6c>
    5490:	86 95       	lsr	r24
    5492:	77 95       	ror	r23
    5494:	67 95       	ror	r22
    5496:	b7 95       	ror	r27
    5498:	f7 95       	ror	r31
    549a:	9f 5f       	subi	r25, 0xFF	; 255
    549c:	c9 f7       	brne	.-14     	; 0x5490 <__divsf3_pse+0x78>
    549e:	88 0f       	add	r24, r24
    54a0:	91 1d       	adc	r25, r1
    54a2:	96 95       	lsr	r25
    54a4:	87 95       	ror	r24
    54a6:	97 f9       	bld	r25, 7
    54a8:	08 95       	ret
    54aa:	e1 e0       	ldi	r30, 0x01	; 1
    54ac:	66 0f       	add	r22, r22
    54ae:	77 1f       	adc	r23, r23
    54b0:	88 1f       	adc	r24, r24
    54b2:	bb 1f       	adc	r27, r27
    54b4:	62 17       	cp	r22, r18
    54b6:	73 07       	cpc	r23, r19
    54b8:	84 07       	cpc	r24, r20
    54ba:	ba 07       	cpc	r27, r26
    54bc:	20 f0       	brcs	.+8      	; 0x54c6 <__divsf3_pse+0xae>
    54be:	62 1b       	sub	r22, r18
    54c0:	73 0b       	sbc	r23, r19
    54c2:	84 0b       	sbc	r24, r20
    54c4:	ba 0b       	sbc	r27, r26
    54c6:	ee 1f       	adc	r30, r30
    54c8:	88 f7       	brcc	.-30     	; 0x54ac <__divsf3_pse+0x94>
    54ca:	e0 95       	com	r30
    54cc:	08 95       	ret

000054ce <__fixsfsi>:
    54ce:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <__fixunssfsi>
    54d2:	68 94       	set
    54d4:	b1 11       	cpse	r27, r1
    54d6:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    54da:	08 95       	ret

000054dc <__fixunssfsi>:
    54dc:	0e 94 2e 2b 	call	0x565c	; 0x565c <__fp_splitA>
    54e0:	88 f0       	brcs	.+34     	; 0x5504 <__fixunssfsi+0x28>
    54e2:	9f 57       	subi	r25, 0x7F	; 127
    54e4:	98 f0       	brcs	.+38     	; 0x550c <__fixunssfsi+0x30>
    54e6:	b9 2f       	mov	r27, r25
    54e8:	99 27       	eor	r25, r25
    54ea:	b7 51       	subi	r27, 0x17	; 23
    54ec:	b0 f0       	brcs	.+44     	; 0x551a <__fixunssfsi+0x3e>
    54ee:	e1 f0       	breq	.+56     	; 0x5528 <__fixunssfsi+0x4c>
    54f0:	66 0f       	add	r22, r22
    54f2:	77 1f       	adc	r23, r23
    54f4:	88 1f       	adc	r24, r24
    54f6:	99 1f       	adc	r25, r25
    54f8:	1a f0       	brmi	.+6      	; 0x5500 <__fixunssfsi+0x24>
    54fa:	ba 95       	dec	r27
    54fc:	c9 f7       	brne	.-14     	; 0x54f0 <__fixunssfsi+0x14>
    54fe:	14 c0       	rjmp	.+40     	; 0x5528 <__fixunssfsi+0x4c>
    5500:	b1 30       	cpi	r27, 0x01	; 1
    5502:	91 f0       	breq	.+36     	; 0x5528 <__fixunssfsi+0x4c>
    5504:	0e 94 48 2b 	call	0x5690	; 0x5690 <__fp_zero>
    5508:	b1 e0       	ldi	r27, 0x01	; 1
    550a:	08 95       	ret
    550c:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__fp_zero>
    5510:	67 2f       	mov	r22, r23
    5512:	78 2f       	mov	r23, r24
    5514:	88 27       	eor	r24, r24
    5516:	b8 5f       	subi	r27, 0xF8	; 248
    5518:	39 f0       	breq	.+14     	; 0x5528 <__fixunssfsi+0x4c>
    551a:	b9 3f       	cpi	r27, 0xF9	; 249
    551c:	cc f3       	brlt	.-14     	; 0x5510 <__fixunssfsi+0x34>
    551e:	86 95       	lsr	r24
    5520:	77 95       	ror	r23
    5522:	67 95       	ror	r22
    5524:	b3 95       	inc	r27
    5526:	d9 f7       	brne	.-10     	; 0x551e <__fixunssfsi+0x42>
    5528:	3e f4       	brtc	.+14     	; 0x5538 <__fixunssfsi+0x5c>
    552a:	90 95       	com	r25
    552c:	80 95       	com	r24
    552e:	70 95       	com	r23
    5530:	61 95       	neg	r22
    5532:	7f 4f       	sbci	r23, 0xFF	; 255
    5534:	8f 4f       	sbci	r24, 0xFF	; 255
    5536:	9f 4f       	sbci	r25, 0xFF	; 255
    5538:	08 95       	ret

0000553a <__floatunsisf>:
    553a:	e8 94       	clt
    553c:	09 c0       	rjmp	.+18     	; 0x5550 <__floatsisf+0x12>

0000553e <__floatsisf>:
    553e:	97 fb       	bst	r25, 7
    5540:	3e f4       	brtc	.+14     	; 0x5550 <__floatsisf+0x12>
    5542:	90 95       	com	r25
    5544:	80 95       	com	r24
    5546:	70 95       	com	r23
    5548:	61 95       	neg	r22
    554a:	7f 4f       	sbci	r23, 0xFF	; 255
    554c:	8f 4f       	sbci	r24, 0xFF	; 255
    554e:	9f 4f       	sbci	r25, 0xFF	; 255
    5550:	99 23       	and	r25, r25
    5552:	a9 f0       	breq	.+42     	; 0x557e <__floatsisf+0x40>
    5554:	f9 2f       	mov	r31, r25
    5556:	96 e9       	ldi	r25, 0x96	; 150
    5558:	bb 27       	eor	r27, r27
    555a:	93 95       	inc	r25
    555c:	f6 95       	lsr	r31
    555e:	87 95       	ror	r24
    5560:	77 95       	ror	r23
    5562:	67 95       	ror	r22
    5564:	b7 95       	ror	r27
    5566:	f1 11       	cpse	r31, r1
    5568:	f8 cf       	rjmp	.-16     	; 0x555a <__floatsisf+0x1c>
    556a:	fa f4       	brpl	.+62     	; 0x55aa <__floatsisf+0x6c>
    556c:	bb 0f       	add	r27, r27
    556e:	11 f4       	brne	.+4      	; 0x5574 <__floatsisf+0x36>
    5570:	60 ff       	sbrs	r22, 0
    5572:	1b c0       	rjmp	.+54     	; 0x55aa <__floatsisf+0x6c>
    5574:	6f 5f       	subi	r22, 0xFF	; 255
    5576:	7f 4f       	sbci	r23, 0xFF	; 255
    5578:	8f 4f       	sbci	r24, 0xFF	; 255
    557a:	9f 4f       	sbci	r25, 0xFF	; 255
    557c:	16 c0       	rjmp	.+44     	; 0x55aa <__floatsisf+0x6c>
    557e:	88 23       	and	r24, r24
    5580:	11 f0       	breq	.+4      	; 0x5586 <__floatsisf+0x48>
    5582:	96 e9       	ldi	r25, 0x96	; 150
    5584:	11 c0       	rjmp	.+34     	; 0x55a8 <__floatsisf+0x6a>
    5586:	77 23       	and	r23, r23
    5588:	21 f0       	breq	.+8      	; 0x5592 <__floatsisf+0x54>
    558a:	9e e8       	ldi	r25, 0x8E	; 142
    558c:	87 2f       	mov	r24, r23
    558e:	76 2f       	mov	r23, r22
    5590:	05 c0       	rjmp	.+10     	; 0x559c <__floatsisf+0x5e>
    5592:	66 23       	and	r22, r22
    5594:	71 f0       	breq	.+28     	; 0x55b2 <__floatsisf+0x74>
    5596:	96 e8       	ldi	r25, 0x86	; 134
    5598:	86 2f       	mov	r24, r22
    559a:	70 e0       	ldi	r23, 0x00	; 0
    559c:	60 e0       	ldi	r22, 0x00	; 0
    559e:	2a f0       	brmi	.+10     	; 0x55aa <__floatsisf+0x6c>
    55a0:	9a 95       	dec	r25
    55a2:	66 0f       	add	r22, r22
    55a4:	77 1f       	adc	r23, r23
    55a6:	88 1f       	adc	r24, r24
    55a8:	da f7       	brpl	.-10     	; 0x55a0 <__floatsisf+0x62>
    55aa:	88 0f       	add	r24, r24
    55ac:	96 95       	lsr	r25
    55ae:	87 95       	ror	r24
    55b0:	97 f9       	bld	r25, 7
    55b2:	08 95       	ret

000055b4 <__fp_cmp>:
    55b4:	99 0f       	add	r25, r25
    55b6:	00 08       	sbc	r0, r0
    55b8:	55 0f       	add	r21, r21
    55ba:	aa 0b       	sbc	r26, r26
    55bc:	e0 e8       	ldi	r30, 0x80	; 128
    55be:	fe ef       	ldi	r31, 0xFE	; 254
    55c0:	16 16       	cp	r1, r22
    55c2:	17 06       	cpc	r1, r23
    55c4:	e8 07       	cpc	r30, r24
    55c6:	f9 07       	cpc	r31, r25
    55c8:	c0 f0       	brcs	.+48     	; 0x55fa <__fp_cmp+0x46>
    55ca:	12 16       	cp	r1, r18
    55cc:	13 06       	cpc	r1, r19
    55ce:	e4 07       	cpc	r30, r20
    55d0:	f5 07       	cpc	r31, r21
    55d2:	98 f0       	brcs	.+38     	; 0x55fa <__fp_cmp+0x46>
    55d4:	62 1b       	sub	r22, r18
    55d6:	73 0b       	sbc	r23, r19
    55d8:	84 0b       	sbc	r24, r20
    55da:	95 0b       	sbc	r25, r21
    55dc:	39 f4       	brne	.+14     	; 0x55ec <__fp_cmp+0x38>
    55de:	0a 26       	eor	r0, r26
    55e0:	61 f0       	breq	.+24     	; 0x55fa <__fp_cmp+0x46>
    55e2:	23 2b       	or	r18, r19
    55e4:	24 2b       	or	r18, r20
    55e6:	25 2b       	or	r18, r21
    55e8:	21 f4       	brne	.+8      	; 0x55f2 <__fp_cmp+0x3e>
    55ea:	08 95       	ret
    55ec:	0a 26       	eor	r0, r26
    55ee:	09 f4       	brne	.+2      	; 0x55f2 <__fp_cmp+0x3e>
    55f0:	a1 40       	sbci	r26, 0x01	; 1
    55f2:	a6 95       	lsr	r26
    55f4:	8f ef       	ldi	r24, 0xFF	; 255
    55f6:	81 1d       	adc	r24, r1
    55f8:	81 1d       	adc	r24, r1
    55fa:	08 95       	ret

000055fc <__fp_inf>:
    55fc:	97 f9       	bld	r25, 7
    55fe:	9f 67       	ori	r25, 0x7F	; 127
    5600:	80 e8       	ldi	r24, 0x80	; 128
    5602:	70 e0       	ldi	r23, 0x00	; 0
    5604:	60 e0       	ldi	r22, 0x00	; 0
    5606:	08 95       	ret

00005608 <__fp_nan>:
    5608:	9f ef       	ldi	r25, 0xFF	; 255
    560a:	80 ec       	ldi	r24, 0xC0	; 192
    560c:	08 95       	ret

0000560e <__fp_pscA>:
    560e:	00 24       	eor	r0, r0
    5610:	0a 94       	dec	r0
    5612:	16 16       	cp	r1, r22
    5614:	17 06       	cpc	r1, r23
    5616:	18 06       	cpc	r1, r24
    5618:	09 06       	cpc	r0, r25
    561a:	08 95       	ret

0000561c <__fp_pscB>:
    561c:	00 24       	eor	r0, r0
    561e:	0a 94       	dec	r0
    5620:	12 16       	cp	r1, r18
    5622:	13 06       	cpc	r1, r19
    5624:	14 06       	cpc	r1, r20
    5626:	05 06       	cpc	r0, r21
    5628:	08 95       	ret

0000562a <__fp_round>:
    562a:	09 2e       	mov	r0, r25
    562c:	03 94       	inc	r0
    562e:	00 0c       	add	r0, r0
    5630:	11 f4       	brne	.+4      	; 0x5636 <__fp_round+0xc>
    5632:	88 23       	and	r24, r24
    5634:	52 f0       	brmi	.+20     	; 0x564a <__fp_round+0x20>
    5636:	bb 0f       	add	r27, r27
    5638:	40 f4       	brcc	.+16     	; 0x564a <__fp_round+0x20>
    563a:	bf 2b       	or	r27, r31
    563c:	11 f4       	brne	.+4      	; 0x5642 <__fp_round+0x18>
    563e:	60 ff       	sbrs	r22, 0
    5640:	04 c0       	rjmp	.+8      	; 0x564a <__fp_round+0x20>
    5642:	6f 5f       	subi	r22, 0xFF	; 255
    5644:	7f 4f       	sbci	r23, 0xFF	; 255
    5646:	8f 4f       	sbci	r24, 0xFF	; 255
    5648:	9f 4f       	sbci	r25, 0xFF	; 255
    564a:	08 95       	ret

0000564c <__fp_split3>:
    564c:	57 fd       	sbrc	r21, 7
    564e:	90 58       	subi	r25, 0x80	; 128
    5650:	44 0f       	add	r20, r20
    5652:	55 1f       	adc	r21, r21
    5654:	59 f0       	breq	.+22     	; 0x566c <__fp_splitA+0x10>
    5656:	5f 3f       	cpi	r21, 0xFF	; 255
    5658:	71 f0       	breq	.+28     	; 0x5676 <__fp_splitA+0x1a>
    565a:	47 95       	ror	r20

0000565c <__fp_splitA>:
    565c:	88 0f       	add	r24, r24
    565e:	97 fb       	bst	r25, 7
    5660:	99 1f       	adc	r25, r25
    5662:	61 f0       	breq	.+24     	; 0x567c <__fp_splitA+0x20>
    5664:	9f 3f       	cpi	r25, 0xFF	; 255
    5666:	79 f0       	breq	.+30     	; 0x5686 <__fp_splitA+0x2a>
    5668:	87 95       	ror	r24
    566a:	08 95       	ret
    566c:	12 16       	cp	r1, r18
    566e:	13 06       	cpc	r1, r19
    5670:	14 06       	cpc	r1, r20
    5672:	55 1f       	adc	r21, r21
    5674:	f2 cf       	rjmp	.-28     	; 0x565a <__fp_split3+0xe>
    5676:	46 95       	lsr	r20
    5678:	f1 df       	rcall	.-30     	; 0x565c <__fp_splitA>
    567a:	08 c0       	rjmp	.+16     	; 0x568c <__fp_splitA+0x30>
    567c:	16 16       	cp	r1, r22
    567e:	17 06       	cpc	r1, r23
    5680:	18 06       	cpc	r1, r24
    5682:	99 1f       	adc	r25, r25
    5684:	f1 cf       	rjmp	.-30     	; 0x5668 <__fp_splitA+0xc>
    5686:	86 95       	lsr	r24
    5688:	71 05       	cpc	r23, r1
    568a:	61 05       	cpc	r22, r1
    568c:	08 94       	sec
    568e:	08 95       	ret

00005690 <__fp_zero>:
    5690:	e8 94       	clt

00005692 <__fp_szero>:
    5692:	bb 27       	eor	r27, r27
    5694:	66 27       	eor	r22, r22
    5696:	77 27       	eor	r23, r23
    5698:	cb 01       	movw	r24, r22
    569a:	97 f9       	bld	r25, 7
    569c:	08 95       	ret

0000569e <__gesf2>:
    569e:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <__fp_cmp>
    56a2:	08 f4       	brcc	.+2      	; 0x56a6 <__gesf2+0x8>
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	08 95       	ret

000056a8 <__mulsf3>:
    56a8:	0e 94 67 2b 	call	0x56ce	; 0x56ce <__mulsf3x>
    56ac:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__fp_round>
    56b0:	0e 94 07 2b 	call	0x560e	; 0x560e <__fp_pscA>
    56b4:	38 f0       	brcs	.+14     	; 0x56c4 <__mulsf3+0x1c>
    56b6:	0e 94 0e 2b 	call	0x561c	; 0x561c <__fp_pscB>
    56ba:	20 f0       	brcs	.+8      	; 0x56c4 <__mulsf3+0x1c>
    56bc:	95 23       	and	r25, r21
    56be:	11 f0       	breq	.+4      	; 0x56c4 <__mulsf3+0x1c>
    56c0:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__fp_inf>
    56c4:	0c 94 04 2b 	jmp	0x5608	; 0x5608 <__fp_nan>
    56c8:	11 24       	eor	r1, r1
    56ca:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>

000056ce <__mulsf3x>:
    56ce:	0e 94 26 2b 	call	0x564c	; 0x564c <__fp_split3>
    56d2:	70 f3       	brcs	.-36     	; 0x56b0 <__mulsf3+0x8>

000056d4 <__mulsf3_pse>:
    56d4:	95 9f       	mul	r25, r21
    56d6:	c1 f3       	breq	.-16     	; 0x56c8 <__mulsf3+0x20>
    56d8:	95 0f       	add	r25, r21
    56da:	50 e0       	ldi	r21, 0x00	; 0
    56dc:	55 1f       	adc	r21, r21
    56de:	62 9f       	mul	r22, r18
    56e0:	f0 01       	movw	r30, r0
    56e2:	72 9f       	mul	r23, r18
    56e4:	bb 27       	eor	r27, r27
    56e6:	f0 0d       	add	r31, r0
    56e8:	b1 1d       	adc	r27, r1
    56ea:	63 9f       	mul	r22, r19
    56ec:	aa 27       	eor	r26, r26
    56ee:	f0 0d       	add	r31, r0
    56f0:	b1 1d       	adc	r27, r1
    56f2:	aa 1f       	adc	r26, r26
    56f4:	64 9f       	mul	r22, r20
    56f6:	66 27       	eor	r22, r22
    56f8:	b0 0d       	add	r27, r0
    56fa:	a1 1d       	adc	r26, r1
    56fc:	66 1f       	adc	r22, r22
    56fe:	82 9f       	mul	r24, r18
    5700:	22 27       	eor	r18, r18
    5702:	b0 0d       	add	r27, r0
    5704:	a1 1d       	adc	r26, r1
    5706:	62 1f       	adc	r22, r18
    5708:	73 9f       	mul	r23, r19
    570a:	b0 0d       	add	r27, r0
    570c:	a1 1d       	adc	r26, r1
    570e:	62 1f       	adc	r22, r18
    5710:	83 9f       	mul	r24, r19
    5712:	a0 0d       	add	r26, r0
    5714:	61 1d       	adc	r22, r1
    5716:	22 1f       	adc	r18, r18
    5718:	74 9f       	mul	r23, r20
    571a:	33 27       	eor	r19, r19
    571c:	a0 0d       	add	r26, r0
    571e:	61 1d       	adc	r22, r1
    5720:	23 1f       	adc	r18, r19
    5722:	84 9f       	mul	r24, r20
    5724:	60 0d       	add	r22, r0
    5726:	21 1d       	adc	r18, r1
    5728:	82 2f       	mov	r24, r18
    572a:	76 2f       	mov	r23, r22
    572c:	6a 2f       	mov	r22, r26
    572e:	11 24       	eor	r1, r1
    5730:	9f 57       	subi	r25, 0x7F	; 127
    5732:	50 40       	sbci	r21, 0x00	; 0
    5734:	9a f0       	brmi	.+38     	; 0x575c <__mulsf3_pse+0x88>
    5736:	f1 f0       	breq	.+60     	; 0x5774 <__mulsf3_pse+0xa0>
    5738:	88 23       	and	r24, r24
    573a:	4a f0       	brmi	.+18     	; 0x574e <__mulsf3_pse+0x7a>
    573c:	ee 0f       	add	r30, r30
    573e:	ff 1f       	adc	r31, r31
    5740:	bb 1f       	adc	r27, r27
    5742:	66 1f       	adc	r22, r22
    5744:	77 1f       	adc	r23, r23
    5746:	88 1f       	adc	r24, r24
    5748:	91 50       	subi	r25, 0x01	; 1
    574a:	50 40       	sbci	r21, 0x00	; 0
    574c:	a9 f7       	brne	.-22     	; 0x5738 <__mulsf3_pse+0x64>
    574e:	9e 3f       	cpi	r25, 0xFE	; 254
    5750:	51 05       	cpc	r21, r1
    5752:	80 f0       	brcs	.+32     	; 0x5774 <__mulsf3_pse+0xa0>
    5754:	0c 94 fe 2a 	jmp	0x55fc	; 0x55fc <__fp_inf>
    5758:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__fp_szero>
    575c:	5f 3f       	cpi	r21, 0xFF	; 255
    575e:	e4 f3       	brlt	.-8      	; 0x5758 <__mulsf3_pse+0x84>
    5760:	98 3e       	cpi	r25, 0xE8	; 232
    5762:	d4 f3       	brlt	.-12     	; 0x5758 <__mulsf3_pse+0x84>
    5764:	86 95       	lsr	r24
    5766:	77 95       	ror	r23
    5768:	67 95       	ror	r22
    576a:	b7 95       	ror	r27
    576c:	f7 95       	ror	r31
    576e:	e7 95       	ror	r30
    5770:	9f 5f       	subi	r25, 0xFF	; 255
    5772:	c1 f7       	brne	.-16     	; 0x5764 <__mulsf3_pse+0x90>
    5774:	fe 2b       	or	r31, r30
    5776:	88 0f       	add	r24, r24
    5778:	91 1d       	adc	r25, r1
    577a:	96 95       	lsr	r25
    577c:	87 95       	ror	r24
    577e:	97 f9       	bld	r25, 7
    5780:	08 95       	ret

00005782 <__tablejump2__>:
    5782:	ee 0f       	add	r30, r30
    5784:	ff 1f       	adc	r31, r31
    5786:	88 1f       	adc	r24, r24
    5788:	8b bf       	out	0x3b, r24	; 59
    578a:	07 90       	elpm	r0, Z+
    578c:	f6 91       	elpm	r31, Z
    578e:	e0 2d       	mov	r30, r0
    5790:	19 94       	eijmp

00005792 <memcpy>:
    5792:	fb 01       	movw	r30, r22
    5794:	dc 01       	movw	r26, r24
    5796:	02 c0       	rjmp	.+4      	; 0x579c <memcpy+0xa>
    5798:	01 90       	ld	r0, Z+
    579a:	0d 92       	st	X+, r0
    579c:	41 50       	subi	r20, 0x01	; 1
    579e:	50 40       	sbci	r21, 0x00	; 0
    57a0:	d8 f7       	brcc	.-10     	; 0x5798 <memcpy+0x6>
    57a2:	08 95       	ret

000057a4 <memset>:
    57a4:	dc 01       	movw	r26, r24
    57a6:	01 c0       	rjmp	.+2      	; 0x57aa <memset+0x6>
    57a8:	6d 93       	st	X+, r22
    57aa:	41 50       	subi	r20, 0x01	; 1
    57ac:	50 40       	sbci	r21, 0x00	; 0
    57ae:	e0 f7       	brcc	.-8      	; 0x57a8 <memset+0x4>
    57b0:	08 95       	ret

000057b2 <strlen>:
    57b2:	fc 01       	movw	r30, r24
    57b4:	01 90       	ld	r0, Z+
    57b6:	00 20       	and	r0, r0
    57b8:	e9 f7       	brne	.-6      	; 0x57b4 <strlen+0x2>
    57ba:	80 95       	com	r24
    57bc:	90 95       	com	r25
    57be:	8e 0f       	add	r24, r30
    57c0:	9f 1f       	adc	r25, r31
    57c2:	08 95       	ret

000057c4 <itoa>:
    57c4:	45 32       	cpi	r20, 0x25	; 37
    57c6:	51 05       	cpc	r21, r1
    57c8:	20 f4       	brcc	.+8      	; 0x57d2 <itoa+0xe>
    57ca:	42 30       	cpi	r20, 0x02	; 2
    57cc:	10 f0       	brcs	.+4      	; 0x57d2 <itoa+0xe>
    57ce:	0c 94 ed 2b 	jmp	0x57da	; 0x57da <__itoa_ncheck>
    57d2:	fb 01       	movw	r30, r22
    57d4:	10 82       	st	Z, r1
    57d6:	cb 01       	movw	r24, r22
    57d8:	08 95       	ret

000057da <__itoa_ncheck>:
    57da:	bb 27       	eor	r27, r27
    57dc:	4a 30       	cpi	r20, 0x0A	; 10
    57de:	31 f4       	brne	.+12     	; 0x57ec <__itoa_ncheck+0x12>
    57e0:	99 23       	and	r25, r25
    57e2:	22 f4       	brpl	.+8      	; 0x57ec <__itoa_ncheck+0x12>
    57e4:	bd e2       	ldi	r27, 0x2D	; 45
    57e6:	90 95       	com	r25
    57e8:	81 95       	neg	r24
    57ea:	9f 4f       	sbci	r25, 0xFF	; 255
    57ec:	0c 94 f9 2b 	jmp	0x57f2	; 0x57f2 <__utoa_common>

000057f0 <__utoa_ncheck>:
    57f0:	bb 27       	eor	r27, r27

000057f2 <__utoa_common>:
    57f2:	fb 01       	movw	r30, r22
    57f4:	55 27       	eor	r21, r21
    57f6:	aa 27       	eor	r26, r26
    57f8:	88 0f       	add	r24, r24
    57fa:	99 1f       	adc	r25, r25
    57fc:	aa 1f       	adc	r26, r26
    57fe:	a4 17       	cp	r26, r20
    5800:	10 f0       	brcs	.+4      	; 0x5806 <__utoa_common+0x14>
    5802:	a4 1b       	sub	r26, r20
    5804:	83 95       	inc	r24
    5806:	50 51       	subi	r21, 0x10	; 16
    5808:	b9 f7       	brne	.-18     	; 0x57f8 <__utoa_common+0x6>
    580a:	a0 5d       	subi	r26, 0xD0	; 208
    580c:	aa 33       	cpi	r26, 0x3A	; 58
    580e:	08 f0       	brcs	.+2      	; 0x5812 <__utoa_common+0x20>
    5810:	a9 5d       	subi	r26, 0xD9	; 217
    5812:	a1 93       	st	Z+, r26
    5814:	00 97       	sbiw	r24, 0x00	; 0
    5816:	79 f7       	brne	.-34     	; 0x57f6 <__utoa_common+0x4>
    5818:	b1 11       	cpse	r27, r1
    581a:	b1 93       	st	Z+, r27
    581c:	11 92       	st	Z+, r1
    581e:	cb 01       	movw	r24, r22
    5820:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <strrev>

00005824 <strrev>:
    5824:	dc 01       	movw	r26, r24
    5826:	fc 01       	movw	r30, r24
    5828:	67 2f       	mov	r22, r23
    582a:	71 91       	ld	r23, Z+
    582c:	77 23       	and	r23, r23
    582e:	e1 f7       	brne	.-8      	; 0x5828 <strrev+0x4>
    5830:	32 97       	sbiw	r30, 0x02	; 2
    5832:	04 c0       	rjmp	.+8      	; 0x583c <strrev+0x18>
    5834:	7c 91       	ld	r23, X
    5836:	6d 93       	st	X+, r22
    5838:	70 83       	st	Z, r23
    583a:	62 91       	ld	r22, -Z
    583c:	ae 17       	cp	r26, r30
    583e:	bf 07       	cpc	r27, r31
    5840:	c8 f3       	brcs	.-14     	; 0x5834 <strrev+0x10>
    5842:	08 95       	ret

00005844 <_exit>:
    5844:	f8 94       	cli

00005846 <__stop_program>:
    5846:	ff cf       	rjmp	.-2      	; 0x5846 <__stop_program>
